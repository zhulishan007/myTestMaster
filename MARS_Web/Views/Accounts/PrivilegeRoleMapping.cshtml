<div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content">
    <div class="kt-subheader   kt-grid__item" id="kt_subheader" style="left: @ViewBag.width;">
        <div class="kt-container  kt-container--fluid ">
            <div class="kt-subheader__main">
                <span class="kt-subheader__separator kt-hidden"></span>
                <div class="kt-subheader__breadcrumbs">
                    <a href="#" class="kt-subheader__breadcrumbs-home"><i class="flaticon2-settings" style="color:#1c6081"></i></a>
                    <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081">
                        User Role
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid">
        <div class="kt-portlet kt-portlet--mobile">
            <div class="kt-portlet__head kt-portlet__head--lg">
                <div class="kt-portlet__head-label">
                    <h3 class="kt-portlet__head-title" style="color:#1582ab">
                        List of Privilages according to Role
                    </h3>
                </div>
            </div>
            <br />
            <form id="frmuserroleprivilegemapping">
                <div class="kt-portlet__body">


                    <div class="form-group row">
                        <input type="hidden" id="hdnPrivilegeRoleMappingId" name="hdnPrivilegeRoleMappingId" />
                        <label class="Column">User Roles: </label>
                        <div class="Column" id="clsappobject">
                            <select class="form-control kt-select2" id="drpRoles" name="roles" style="width: 182px;"></select>
                        </div>
                    </div>
                    <div>
                        <select id="kt_dual_listbox_1" class="dual-listbox" multiple></select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="addPrivileges" class="btn btn-outline-brand btn-elevate btn-pill" onclick="AddEditPrivilegeRoleMappingSave()">Save</button>
                    </div>
                    

                </div>
</form>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/dual-listbox@1.0.9/dist/dual-listbox.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/dual-listbox@1.0.9/dist/dual-listbox.css">
<script type="text/javascript">

    jQuery(document).ready(function () {
        RolesDropdown.init();
        KTDualListbox.init();
        drpRolesChange.init();
    });

    $("#drpRoles").on('change', function () {
        drpRolesChange.init();
    });

    var drpRolesChange = function () {
        var drpFunction = function () {
            var roleid = $("#drpRoles").val();
            $.ajax({
                url: "/Accounts/GetPrivilegesByRoleId",
                data: JSON.stringify({ roleId: roleid }),
                type: "POST",
                async: false,
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (data) {
                    var len = data.privilegesByRoleId.length;
                    var dataLen = data.allPrivileges.length;
                    $('#kt_dual_listbox_1').html('');
                    $('.dual-listbox__selected').html('');
                    //$('.dual-listbox__available').html('');
                    for (i = 0; i < len; i++) {
                        $('.dual-listbox__selected').append('<li class="dual-listbox__item" data-id="' + data.privilegesByRoleId[i].Value + '">' + data.privilegesByRoleId[i].Text + '</li>');
                    }
                    for (i = 0; i < dataLen; i++) {
                        //$('.dual-listbox__available').append('<li class="dual-listbox__item" data-id="' + data.allPrivileges[i].Value + '">' + data.allPrivileges[i].Text + '</li>');
                        $('#kt_dual_listbox_1').append('<option value="' + data.allPrivileges[i].Value + '">' + data.allPrivileges[i].Text + '</option>');
                    }
                },
                error: function (x, y, z) {
                    debugger
                    swal.fire(
                        'Error occured on user changed',
                        'error'
                    )
                }
            });

            // init dual listbox
            var dualListBox = new DualListbox($('.dual-listbox__selected').get(0), {
                addEvent: function (value) {
                    console.log(value);
                },
                removeEvent: function (value) {
                    console.log(value);
                },
                availableTitle: 'Available Privileges',
                selectedTitle: 'Selected Privileges',
                addButtonText: 'Add',
                removeButtonText: 'Remove',
                addAllButtonText: 'Add All',
                removeAllButtonText: 'Remove All',
               // options: options,
            });
        };
        return {
            init: function () {
                drpFunction();
            },
        };
    }();

    function AddEditPrivilegeRoleMappingSave() {
        var lId = $("#hdnPrivilegeRoleMappingId").val();
        var privileges = [];
        $('.dual-listbox :selected').each(function (i, selected) {
            privileges[i] = $(selected).val();
        });
        var PrivilegeRoleModel = {};
        PrivilegeRoleModel.PrivilegeRoleMappingId = lId,
            PrivilegeRoleModel.RoleId = $("#drpRoles").val(),
            PrivilegeRoleModel.PrivilegeId = privileges.join(",");
        startloader();
        $.ajax({
            url: "/Accounts/AddEditPrivilageRoleMapping",
            data: JSON.stringify(PrivilegeRoleModel),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                stoploader();
                if (result.status == 1 && result.data) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "type": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
                else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "type": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            },
            error: function (errormessage) {
                stoploader();
                alert(errormessage.responseText);
            }
        });
    }

    //Listbox of Prvileges - Class definition
    var KTDualListbox = function () {
        // Private functions
        var demo1 = function () {
            // Dual Listbox
            var listBox = $('#kt_dual_listbox_1');
            var $this = listBox;

            $.ajax({
                url: "/Accounts/GetAllPrivileges",
                data: null,
                type: "POST",
                async: false,
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (data) {
                    var dataLen = data.length;
                    for (i = 0; i < dataLen; i++) {
                        $('#kt_dual_listbox_1').append('<option value="' + data[i].Value + '">' + data[i].Text + '</option>');
                        // $('.dual-listbox__available').append('<li class="dual-listbox__item" data-id="' + data.allPrivileges[i].Value + '">' + data.allPrivileges[i].Text + '</li>')
                    }
                },
                error: function (x, y, z) {
                    swal.fire(
                        'Error in listbox',
                        'error'
                    )
                }
            });

            //// get options
            //var options = [];
            //$this.children('option').each(function () {
            //    var value = $(this).val();
            //    var label = $(this).text();
            //    options.push({
            //        text: label,
            //        value: value
            //    });
            //});
            //alert(options);

            // init dual listbox
            var dualListBox = new DualListbox($this.get(0), {
                addEvent: function (value) {
                    console.log(value);
                },
                removeEvent: function (value) {
                    console.log(value);
                },
                availableTitle: 'Available Privileges',
                selectedTitle: 'Selected Privileges',
                addButtonText: 'Add',
                removeButtonText: 'Remove',
                addAllButtonText: 'Add All',
                removeAllButtonText: 'Remove All',
                //options: options,
            });
        };

        return {
            init: function () {
                demo1();
            },
        };
    }();

    //Roles Dropdown
    var RolesDropdown = function () {
        // Private functions
        var roles = function () {
            // Dual Listbox
            var dropdown = $('#drpRoles');
            var $this = dropdown;
            $.ajax({
                url: "/Accounts/GetAllRoles",
                data: null,
                type: "POST",
                async: false,
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (data) {
                    var dataLen = data.length;
                    for (i = 0; i < dataLen; i++) {
                        $('#drpRoles').append('<option value="' + data[i].Value + '">' + data[i].Text + '</option>');
                    }
                },
                error: function (x, y, z) {
                    swal.fire(
                        'Error in roles dropdown',
                        'error'
                    )
                }
            });
        }
        return {
            init: function () {
                roles();
            },
        };
    }();
</script>
