@using MARS_Repository.ViewModel
@{
    var BhistedId = ViewBag.BhistedId;
    var ChistedId = ViewBag.ChistedId;
    var BTestReportId = ViewBag.BTestReportId;
    var CTestReportId = ViewBag.CTestReportId;
    var lid = "grid" + Convert.ToString(BhistedId);
    var classgridobj = "grid" + "ResultView_BHistoryId_" + Convert.ToString(BhistedId) + "_CHistoryId_" + Convert.ToString(ChistedId);
    var lgridName = ".grid" + "ResultView_BHistoryId_" + Convert.ToString(BhistedId) + "_CHistoryId_" + Convert.ToString(ChistedId);

    var BaselineReportId = "BaselineReportId" + Convert.ToString(BhistedId);
    var CompareReportId = "CompareReportId" + Convert.ToString(ChistedId);

    var TestCaseId = ViewBag.TestCaseId;
    var StoryboardDetailId = ViewBag.StoryboardDetailId;


    var PrivilegeList = Session["PrivilegeList"] as List<PrivilegeViewModel>;
    var RoleList = Session["RoleList"] as List<RoleViewModel>;
    var SAVERESULTBUTTON = "none";
    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Save Result Data"))
    {
        SAVERESULTBUTTON = "block";
    }
}
<style>
    .pq-cell-dirty div {
        font-weight: 600 !important;
    }
     .SAVERESULTBUTTON{
        display:@SAVERESULTBUTTON !important;
    }
</style>
<script>
    var DataTagdt = [];
    var DataTagobj = [];
    var rtgrid;
    var lheight = $(window).height();
    DataTagdt.push({
        title: "", copy: false, editable: false, minWidth: 40, maxWidth: 40, sortable: false, dataIndx: "IsDelete",
        menuInHide: true, menuIcon: false, sortable: false, filter: { on: false, menuIcon: false },
        render: function (ui) {
            return "<button type='button' class='delete_btn' style='color:red;'></button>";
        },
         postRender: function (ui) {
                var rowIndx = ui.rowIndx,
                    grid = this,
                    $cell = gridobj['@lgridName'].getCell(ui);
                $cell.find("button").button({ icons: { primary: 'ui-icon-close' } })
                    .bind("click", function () {

                        gridobj['@lgridName'].addClass({ rowIndx: ui.rowIndx, cls: 'pq-row-delete' });
                                ans = true;
                                gridobj['@lgridName'].removeClass({ rowIndx: rowIndx, cls: 'pq-row-delete' });
                                if (ans) {
                                    gridobj['@lgridName'].deleteRow({ rowIndx: rowIndx });
                                }
                    });
            }
    });
    DataTagdt.push({
        title: "StepNo", copy: false, hidden: true, dataType: "int", dataIndx: "StepNo", align: "center", menuInHide: true, sortable: false,
    });
    DataTagdt.push({
        title: "Comment", copy: false, hidden: true, dataType: "string", dataIndx: "COMMENT", align: "center", menuInHide: true, sortable: false,
    });
    DataTagdt.push({
        title: "Keyword", copy: false, hidden: true, dataType: "string", dataIndx: "Keyword", align: "center", menuInHide: true, sortable: false,
    });
    DataTagdt.push({
        title: "BaselineStepId", copy: false, hidden: true, dataType: "int", dataIndx: "BaselineStepId", align: "center", menuInHide: true, sortable: false,
    });
    DataTagdt.push({
        title: "CompareStepId", copy: false, hidden: true, dataType: "int", dataIndx: "CompareStepId", align: "center", menuInHide: true, sortable: false,
    });
    DataTagdt.push({
        dataIndx: "InputValueSetting", title: "Data Tag", dataType: 'string', maxLen: 10, width: 200, minWidth: 40, menuInHide: false, align: "left", halign: "center", sortable: true, nodrag: true, nodrop: true, filter: { crules: [{ condition: 'contain' }] }, resizable: true
    });
    DataTagdt.push({
        dataIndx: "BreturnValues", title: "Baseline Value", dataType: 'string', maxLen: 10, width: 200, minWidth: 40, menuInHide: false, align: "left", halign: "center", sortable: true, nodrag: true, nodrop: true, filter: { crules: [{ condition: 'contain' }] }, resizable: true
        , render: function (ui) {
            if (ui.rowData.BaselineStepId <= 0 && ui.rowData.CompareStepId > 0) {
                return {
                    style: { "background": "#b3b3b3" } //can also return attr (for attributes) and cls (for css classes) properties.
                };
            }
        }

    });
    DataTagdt.push({
        dataIndx: "CreturnValues", title: "Compare Value", dataType: 'string', maxLen: 10, width: 200, minWidth: 40, menuInHide: false, align: "left", halign: "center", sortable: true, nodrag: true, nodrop: true, filter: { crules: [{ condition: 'contain' }] }, resizable: true
        , render: function (ui) {
            if (ui.rowData.BaselineStepId > 0 && ui.rowData.CompareStepId <= 0) {
                return {
                    style: { "background": "#b3b3b3" } //can also return attr (for attributes) and cls (for css classes) properties.
                };
            }
        }
    });
    DataTagdt.push({
        dataIndx: "result", title: "Result", dataType: 'string', editable: false, maxLen: 10, width: 100, minWidth: 20, menuInHide: false, align: "left", halign: "center", sortable: true, nodrag: true, nodrop: true, filter: { crules: [{ condition: 'contain' }] }, resizable: true,
        render: function (ui) {
            var result = "";
            var BValue = ui.rowData.BreturnValues;
            var CValue = ui.rowData.CreturnValues;
            var PValue = ui.rowData.COMMENT;
            if (PValue != undefined) {
                if (PValue.indexOf("TOL:") > -1) {
                    var splitParameter = PValue.split(" ");
                    var pvalue = splitParameter[1];
                    if ((Math.abs( parseFloat(BValue) - parseFloat(CValue))) < parseFloat(pvalue)) {
                        result = "TRUE";
                    } else {
                        result = "FALSE";
                    }
                }
                else {
                    result = ui.rowData.BreturnValues == ui.rowData.CreturnValues ? "TRUE" : "FALSE";
                    if (ui.rowData.Keyword == "CaptureValue") {
                        result = "";
                    }
                }
            }
            else {
                result = "";
            }

            return result;
        }
    });
    DataTagdt.push({
        dataIndx: "BaselineComment", title: "Baseline Comment", dataType: 'string', maxLen: 10, width: 200, minWidth: 40, menuInHide: false, align: "left", halign: "center", sortable: true, nodrag: true, nodrop: true, filter: { crules: [{ condition: 'contain' }] }, resizable: true
        , editable: function (ui) {

            if (ui.rowData != undefined) {
                if (ui.rowData.pq_cellcls != undefined) {
                    if (ui.rowData.pq_cellcls["BreturnValues"] == "pq-cell-dirty") {
                        return true;
                    }
                    else
                        return false;
                }
                if (ui.rowData.StepNo == "0" || ui.rowData.StepNo == undefined) {
                    return true;
                }

            }
            return false;
        }
    });
    DataTagdt.push({
        dataIndx: "CompareComment", title: "Compare Comment", dataType: 'string', maxLen: 10, width: 200, minWidth: 40, menuInHide: false, align: "left", halign: "center", sortable: true, nodrag: true, nodrop: true, filter: { crules: [{ condition: 'contain' }] }, resizable: true
        , editable: function (ui) {
            if (ui.rowData != undefined) {
                if (ui.rowData.pq_cellcls != undefined) {
                    if (ui.rowData.pq_cellcls["CreturnValues"] == "pq-cell-dirty") {
                        return true;
                    }
                    else
                        return false;
                }
                if (ui.rowData.StepNo == "0" || ui.rowData.StepNo==undefined) {
                    return true;
                }

            }
            return false;

        }
    });
    var DataTagobj = {
        selectionModel: { type: 'cell' },
        autoSizeInterval: 0,
        //scrollModel: { autoFit: true },
        dragColumns: { enabled: false },
        width: "99%",
        height: lheight - 130,
        colModel: DataTagdt,
        editModel: {
            clicksToEdit: 1,
        },
        trackModel: { on: true },
        track: { on: true },
        dataModel: { recIndx: "BaselineStepId" },
        virtualX: true,
        editable: true,
        selectionModel: { type: 'cell' },
        collapsible: { on: false, toggle: false },
        columnBorders: true,
        hoverMode: 'row',
        numberCell: { show: true },
        history: function (evt, ui) {
            var $tb = this.toolbar(),
                $undo = $tb.find("button:contains('Undo')"),
                $redo = $tb.find("button:contains('Redo')");
            if (ui.canUndo != null) {
                $undo.button("option", { disabled: !ui.canUndo });
            }
            if (ui.canRedo != null) {
                $redo.button("option", "disabled", !ui.canRedo);
            }
            var $grid = this.widget();
            if (ui.canUndo != null) {
                $("button.undosbchanges", $grid).button("option", { disabled: !ui.canUndo });
            }
            $undo.button("option", { label: 'Undo (' + ui.num_undo + ')' });
            $redo.button("option", { label: 'Redo (' + ui.num_redo + ')' });
        },
        columnTemplate: { render: SCResultfilterRender },
        menuIcon: true,
        menuUI: {
            tabs: ['hideCols', 'filter'],
            gridOptions: {
                columnTemplate: { dataType: 'html' }
            }
        },
        cellSave: function (evt, ui) {

            if (ui.dataIndx == "BreturnValues" || ui.dataIndx == "CreturnValues" && ui.newVal != ui.oldVal) {
                //var result = ui.rowData.BreturnValues == ui.rowData.CreturnValues ? 'TRUE' : 'FALSE';
                //ui.rowData.result = result;
                this.refreshRow({ rowIndx: ui.rowIndx });

            }
        },
        beforeValidate: function (event, ui) {
            ui.updateList.forEach(function (obj) {
                var newRow = obj.newRow;
                $.each(newRow, function (key, value) {
                    if (key == "BreturnValues") {
                        newRow["BreturnValues"] = newRow["BreturnValues"] == null ? newRow["BreturnValues"] :newRow["BreturnValues"].substring(0, 255);
                    }
                    else if (key == "CreturnValues") {
                        newRow["CreturnValues"] = newRow["CreturnValues"] == null ? newRow["CreturnValues"] : newRow["CreturnValues"].substring(0, 255);
                    }
                    else if (key == "CompareComment") {
                        newRow["CompareComment"] = newRow["CompareComment"] == null ? newRow["CompareComment"] : newRow["CompareComment"].substring(0, 2000);
                    }
                    else if (key == "BaselineComment") {
                        newRow["BaselineComment"] = newRow["BaselineComment"] == null ? newRow["BaselineComment"]:newRow["BaselineComment"].substring(0, 2000);
                    }
                    else if (key == "InputValueSetting") {
                        newRow["InputValueSetting"] = newRow["InputValueSetting"] == null ? newRow["InputValueSetting"]:newRow["InputValueSetting"].substring(0, 1024);
                    }
                });

            });
        },
        rowInit: function (ui) {
            var result = "";
            var BValue = ui.rowData.BreturnValues;
            var CValue = ui.rowData.CreturnValues;
            var PValue = ui.rowData.COMMENT;
            if (PValue != undefined) {
                if (PValue.indexOf("TOL:") > -1) {
                    var splitParameter = PValue.split(" ");
                    var pvalue = splitParameter[1];
                    if ((Math.abs(parseFloat(BValue) - parseFloat(CValue))) < parseFloat(pvalue)) {
                        return {
                            style: { "background": "#fff" } //can also return attr (for attributes) and cls (for css classes) properties.
                        };
                    } else {
                        return {
                            style: { "background": "#ff8fa0" } //can also return attr (for attributes) and cls (for css classes) properties.
                        };
                    }
                }
                else {
                    result = ui.rowData.BreturnValues == ui.rowData.CreturnValues ? "TRUE" : "FALSE";
                    if (ui.rowData.Keyword == "CaptureValue" || result == "TRUE") {
                        return {
                            style: { "background": "#fff" } //can also return attr (for attributes) and cls (for css classes) properties.
                        };
                    } else {
                        return {
                            style: { "background": "#ff8fa0" } //can also return attr (for attributes) and cls (for css classes) properties.
                        };
                    }
                }
            } else {
                return {
                    style: { "background": "#fff" } //can also return attr (for attributes) and cls (for css classes) properties.
                };
            }





            //if (ui.rowData.result == "FALSE") {

            //}
        },
        reactive: false,
        roundcorners: false,
        rowBorders: true,
        stripeRows: false,
        showHeader: true,
        showTitle: false,
        showToolbar: true,
        showTop: true,
        title: "DataTagResutSet",

        postRenderInterval: -1,
        filterModel:
        {
            on: true,
            mode: "OR",
            header: true,
            menuIcon: true
        },
        complete: function () {
            this.flex();
        },
        toolbar:
        {
            items: [
                  {
                        type: 'button',
                        icon: 'save',
                        attr: 'title="Save"',
                        label: '',
                    cls: "floatRight btn btn-brand btn-elevate btn-icon-sm SAVERESULTBUTTON", listener: function () {
                            //append empty row at the end.
                            SaveSBResultData('@lgridName',@BhistedId,@ChistedId, @TestCaseId,@StoryboardDetailId);
                        }
                },
                 {
                       type: 'button',
                       attr: 'title="Validate"',
                       label: '',
                       icon:'validate',
                       cls: "floatRight btn btn-brand btn-elevate btn-icon-sm",
                       cls: "floatRight btn btn-brand btn-elevate btn-icon-sm", listener: function () {
                           //append empty row at the end.
                           //validateTC();
                           validateSBResult('@lgridName');
                       }
                 },
                 {
                        type: 'button',
                        icon: 'plus',
                        attr: 'title="New Step"',

                        label: '',
                        cls: "floatRight btn btn-brand btn-elevate btn-icon-sm",
                        listener: function () {
                            //append empty row at the end.

                            var rowData = { StepNo:0 }; //empty row
                            var rowIndx = this.addRow({ rowData: rowData, checkEditable: true });
                            this.goToPage({ rowIndx: rowIndx });
                            this.editFirstCellInRow({ rowIndx: rowIndx });

                        }
                },
                 {
                     type: 'button', label: '', attr: 'title="Reload"', cls: 'bgImage  btn btn-brand btn-elevate btn-icon-sm',
                     icon: "flaticon2-reload", listener: function () {
                           swal.fire({
                                title: '',
                                text: "All changes in ResultList will be discarded.  Please confirm",
                               icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes'
                            }).then(function (result) {
                                if (result.value == true)
                                {
                                    ReloadDataTagResultList('@lgridName',@BhistedId,@ChistedId);
                                }
                            });
                         }
                    },
                    {
                        type: 'button',
                        attr: 'title="Undo"',
                        icon: 'undo',
                        label: '&nbsp;Undo',
                        cls: 'btn btn-brand btn-icon-sm undosbchanges',
                        options: { disabled: true },
                        listener: function () {
                           gridobj['@lgridName'].history({ method: 'undo' });
                        }
                    },
                    {
                        type: 'button',
                        attr: 'title="Redo"',
                        icon: 'redo',
                        cls: 'btn btn-brand btn-icon-sm ',
                        label: '&nbsp;Redo',
                        options: { disabled: true },
                        listener: function () {
                            gridobj['@lgridName'].history({ method: 'redo' });
                        }
                    }, {
                        type: 'button',
                        //icon: '',
                        icon: 'resetfilter',
                        attr: 'title="Reset Filter"',
                        cls: 'btn btn-brand btn-icon-sm ',
                        label: '',
                        listener: function () {
                            gridobj['@lgridName'].reset({ filter: true })
                        }
                    }, {
                        type: 'button',
                        //icon: '',
                        icon: 'ui-icon-Copy',
                        attr: 'title="Copy"',
                        cls: 'btn btn-brand btn-icon-sm ',
                        label: '',
                        listener: function () {
                            this.copy();
                        }
                    }, {
                        type: 'button',
                        //icon: '',
                        icon: 'ui-icon-Paste',
                        attr: 'title="Paste"',
                        cls: 'btn btn-brand btn-icon-sm ',
                        label: '',
                        listener: function () {
                            this.paste();
                        }
                    },
                    {
                        type: 'button',
                        icon: 'save',
                        attr: 'title="Save As"',
                        label: '',
                        cls: "btn btn-brand btn-elevate btn-icon-sm", listener: function () {
                            //append empty row at the end.
                            SaveAsResultSet(@BhistedId,@ChistedId);
                        }
                },
            ]
        }
    };


    @*rtgrid = pq.grid("#" + "@lid", DataTagobj);*@

    gridobj['@lgridName'] = pq.grid("@lgridName", DataTagobj);
    ReloadDataTagResultList('@lgridName',@BhistedId,@ChistedId);

    function SCResultfilterRender(ui) {
        var val = ui.cellData,
            filter = ui.column.filter,
            crules = (filter || {}).crules;

        if (filter && filter.on && crules && crules[0].value) {
            var condition = crules[0].condition,
                valUpper = val.toUpperCase(),
                txt = crules[0].value,
                txt = (txt == null) ? "" : txt.toString(),
                txtUpper = txt.toUpperCase(),
                indx = -1;
            if (condition == "end") {
                indx = valUpper.lastIndexOf(txtUpper);
                if (indx + txtUpper.length != valUpper.length) {
                    indx = -1;
                }
            }
            else if (condition == "contain") {
                indx = valUpper.indexOf(txtUpper);
            }
            else if (condition == "begin") {
                indx = valUpper.indexOf(txtUpper);
                if (indx > 0) {
                    indx = -1;
                }
            }
            if (indx >= 0) {
                var txt1 = val.substring(0, indx);
                var txt2 = val.substring(indx, indx + txt.length);
                var txt3 = val.substring(indx + txt.length);
                return txt1 + "<span style='background:yellow;color:#333;'>" + txt2 + "</span>" + txt3;
            }
            else {
                return val;
            }
        }
        else {
            return val;
        }
    }

    function ReloadDataTagResultList(lgridName, BhistedId, ChistedId) {
        $.ajax({
            url: "/StoryBoard/GetCompareResultList?BhistedId=" + BhistedId + "&ChistedId=" + ChistedId,
            type: "GET",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                if (result.status == 1) {
                    var DataTagjsonData = [];
                    DataTagjsonData = "[";
                    var Resultlist = JSON.parse(result.data);
                    if (Resultlist.length > 0) {
                        //TestModeId
                        var StepNo = 0;
                        //if ($("#BaselineReportId" + BhistedId).val() == null || $("#BaselineReportId" + BhistedId).val() == "") {

                        //if (Resultlist[Resultlist.length - 1].BaselineReportId != null)
                        //    $("#BaselineReportId" + BhistedId).val(Resultlist[Resultlist.length - 1].BaselineReportId);



                        //}
                       // if ($("#CompareReportId" + ChistedId).val() == null || $("#CompareReportId" + ChistedId).val() == "") {
                        //if (Resultlist[Resultlist.length - 1].CompareReportId != null)
                        //    $("#CompareReportId" + ChistedId).val(Resultlist[Resultlist.length - 1].CompareReportId);
                        //}
                        for (i = 0; i < Resultlist.length; i++) {
                            if (DataTagjsonData.length > 1) {
                                DataTagjsonData += ",";
                            }
                            StepNo = StepNo + 1;
                            DataTagjsonData += '{ "StepNo":"' + StepNo + '","Keyword":"' + Resultlist[i].Keyword + '", "BaselineStepId":"' + Resultlist[i].BaselineStepId + '", "CompareStepId":"' + Resultlist[i].CompareStepId + '", "InputValueSetting":"' + Resultlist[i].InputValueSetting +
                                '", "BreturnValues": "' + Resultlist[i].BreturnValues + '", "CreturnValues": "' + Resultlist[i].CreturnValues + '", "COMMENT": "' + Resultlist[i].COMMENT
                                + '", "result": "' + Resultlist[i].Result + '", "BaselineComment": "' + Resultlist[i].BaselineComment +
                                '", "CompareComment": "' + Resultlist[i].CompareComment + '"';
                            DataTagjsonData += "}";
                        }
                    }
                    DataTagjsonData = DataTagjsonData + "]";
                    var SCRdata = JSON.parse(DataTagjsonData);
                    gridobj[lgridName].option("dataModel.data", SCRdata);
                    gridobj[lgridName].refreshDataAndView();
                } else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            }
        });
    }

    function SaveSBResultData(lgridName, BhistedId, ChistedId, TestCaseId, StoryboardDetailId) {

        startloader();
        var changes;
        changes = gridobj[lgridName].getChanges({ format: "byVal" });
        var BaselineReportId = $("#BaselineReportId" + BhistedId).val();
        var CompareReportId = $("#CompareReportId" + ChistedId).val();
        if (BaselineReportId == "")
            BaselineReportId = 0;
        if (CompareReportId == "")
            CompareReportId = 0;

        gridobj[lgridName].setSelection(null);
        $.ajax({
            dataType: "json",
            type: "POST",
            async: true,
            url: "/StoryBoard/SaveSbResultData",
            data: { lgridchange: JSON.stringify(changes), lgrid: JSON.stringify(gridobj[lgridName].pdata), BaselineReportId: BaselineReportId, CompareReportId: CompareReportId, TestCaseId: TestCaseId, StoryboardDetailId: StoryboardDetailId},
            success: function (result) {
                if (result.status == 1) {
                    if ((BhistedId == 0 && ChistedId != 0) || (BhistedId != 0 && ChistedId == 0)) {
                        var ltabName = "#tabResultView_BHistoryId_" + BhistedId + "_CHistoryId_" + ChistedId;
                        var aatrobj = $('[data-target="' + ltabName + '"]');
                        var storyboard = aatrobj.attr("data-storyboard");
                        var runorder = aatrobj.attr("data-runorder");
                        closetabforresultset(aatrobj);

                        if (result.data.BaseHistId > 0)
                            BhistedId = result.data.BaseHistId;

                        if (result.data.CompareHistId > 0)
                            ChistedId = result.data.CompareHistId;

                        displayresultsetdata(null, TestCaseId, StoryboardDetailId, BhistedId, ChistedId, runorder, storyboard);
                        stoploader();
                    }
                    swal.fire({
                        "title": "",
                        "text": " Data Saved successfully.",
                        "icon": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                    gridobj[lgridName].commit({ type: 'add', rows: changes.addList });
                    gridobj[lgridName].commit({ type: 'update', rows: changes.updateList });
                    gridobj[lgridName].commit({ type: 'delete', rows: changes.deleteList });

                    gridobj[lgridName].history({ method: 'reset' });
                    ReloadDataTagResultList(lgridName, BhistedId, ChistedId);
                }
                else if (result.status == 0) {
                    if (result.message == "validation") {
                        var validationmsgs = "<table cellborder='0' cellspacing='2' cellpadding='5'>";
                        var lobject = JSON.parse(result.data);
                        $("#ValidationMessageLabel").html("");
                        for (var i = 0; i < lobject.length; i++) {
                            var lrowid = lobject[i].pq_ri;
                            gridobj[lgridName].setSelection({ rowIndx: lrowid, focus: true });
                            gridobj[lgridName].Range({ r1: lrowid, r2: lrowid }).comment(lobject[i].ValidMsg);
                            validationmsgs += "<tr><td style='width: 80px;'>Row: " + (lrowid + 1) + "</td><td align='left'>" + lobject[i].ValidMsg + "</td></tr>";
                        }
                        validationmsgs += "</table>";
                        $("#ValidationMessageLabel").html(validationmsgs);
                        $("#ValidateMsgModel").modal("toggle");
                    }
                    else {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                }

            },
            complete: function (result) {
                stoploader();
            }
        });
    }

    function validateSBResult(lgridName) {
        startloader();
        var changes;
         changes = gridobj[lgridName].getChanges({ format: "byVal" });

        gridobj[lgridName].setSelection(null);
        $.ajax({
            dataType: "json",
            type: "POST",
            async: true,
            url: "/StoryBoard/ValidationSbResultData",
            data: { lgridchange: JSON.stringify(changes), lgrid: JSON.stringify(gridobj[lgridName].pdata)},
            success: function (result) {
                if (result.status == 1) {
                    swal.fire({
                        "title": "",
                        "text": " Data Validate successfully.",
                        "icon": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                    gridobj[lgridName].setSelection(null);
                } else if (result.status == 0) {
                    if (result.message == "validation") {
                        var validationmsgs = "<table cellborder='0' cellspacing='2' cellpadding='5'>";
                        var lobject = JSON.parse(result.data);
                        $("#ValidationMessageLabel").html("");
                        for (var i = 0; i < lobject.length; i++) {
                            var lrowid = lobject[i].pq_ri;
                            gridobj[lgridName].setSelection({ rowIndx: lrowid, focus: true });
                            gridobj[lgridName].Range({ r1: lrowid, r2: lrowid }).comment(lobject[i].ValidMsg);
                            validationmsgs += "<tr><td style='width: 80px;'>Row: " + (lrowid + 1) + "</td><td align='left'>" + lobject[i].ValidMsg + "</td></tr>";
                        }
                        validationmsgs += "</table>";
                        $("#ValidationMessageLabel").html(validationmsgs);
                        $("#ValidateMsgModel").modal("toggle");
                    }
                    else {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                }
            },
            complete: function (result) {
                stoploader();
            }
        });
    }

    function SaveAsResultSet(BhistedId, ChistedId) {
        startloader();
        $.ajax({
            dataType: "json",
            type: "POST",
            async: true,
            url: "/StoryBoard/SaveAsResultSet",
            data: { BhistedId: BhistedId, ChistedId: ChistedId },
            success: function (result) {
                if (result.status == 1 && result.data == true) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                } else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            },
            error: function (errormessage) {
                alert(errormessage.responseText);
            },
             complete: function (changes) {
                stoploader();
            }
        });
    }
</script>

<div class="kt-subheader   kt-grid__item" id="kt_subheader" style="left: @ViewBag.width;">
    <div class="kt-container  kt-container--fluid ">
        <div class="kt-subheader__main">
            <span class="kt-subheader__separator kt-hidden"></span>
            <div class="kt-subheader__breadcrumbs">
                <a href="#" class="kt-subheader__breadcrumbs-home">
                    <i class="flaticon2-shelter" style="color:#1c6081;"></i>
                </a>
                <input type="hidden" name="@BaselineReportId" id="@BaselineReportId" value="@BTestReportId" />
                <input type="hidden" name="@CompareReportId" id="@CompareReportId" value="@CTestReportId" />
            </div>
        </div>
        <div class="kt-subheader__toolbar">
        </div>
    </div>
</div>
<div class="kt-portlet__body">
    <div id="grid" class="@classgridobj" style="margin:auto;padding:0px 10px;"></div>
</div>
