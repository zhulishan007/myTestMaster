@using MARS_Repository.ViewModel;
@using System.Configuration;
@{
    var lTestCaseName = ViewBag.TestCaseName;
    //if (!String.IsNullOrEmpty(lTestCaseName))
    //{
    //    lTestCaseName = lTestCaseName.Replace(' ', '_');
    //}
    var lTestCasegrid = ".grid" + lTestCaseName.Replace('/', '_').Replace('(', '_').Replace(')', '_').Replace('.', '_').Replace('*', '_').Replace('&', '_').Replace(' ', '_');
    var lclassgrid = "grid" + lTestCaseName.Replace('/', '_').Replace('(', '_').Replace(')', '_').Replace('.', '_').Replace('*', '_').Replace('&', '_').Replace(' ', '_');

    var DatasetName = "";
    if (ViewBag.VisibleDataset != null)
    {
        DatasetName = ViewBag.VisibleDataset;
    }
    var PrivilegeList = Session["PrivilegeList"] as List<PrivilegeViewModel>;
    var RoleList = Session["RoleList"] as List<RoleViewModel>;
    var TCExportButtonStyle = "none";
    var TCSaveButtonStyle = "none";
    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export TestCase"))
    {
        TCExportButtonStyle = "block";
    }
    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Save TestCase"))
    {
        TCSaveButtonStyle = "block";
    }
    var MarsengineURL = ConfigurationManager.AppSettings["MarsengineURL"];

}
<style>
      .TCExportButton{
        display:@TCExportButtonStyle !important;
    }
      .TCSaveButton{
        display:@TCSaveButtonStyle !important;
    }
</style>
@if (ViewBag.TestcaseId != null && ViewBag.TestsuiteId != null && ViewBag.ProjectId != null
&& ViewBag.TestcaseId != 0 && ViewBag.TestsuiteId != 0 && ViewBag.ProjectId != 0
)
{
    <script>
      var selectChange = "";
      var undonum;
   var draggedRow;
        var lheight = $(window).height();
        var lPer = 92;
        var pqwidth = "99%";
        var pqheight = lheight - 130;

      var lPqGridHeight = lheight * lPer / 100;
      var validflag = false;
      var msgflag = false;
   var lObjectValidationMsg = "";
   var lKeywordValidationMsg = "";
   var data = [];
   var keywordValidate = [];
        var objectValidate = [];

   //var NewColumnsList = [];

   var lwrap = true;
   var keywords = [];
   var objects = [];
        var freezcols = 0;
        var viewbagtcid = @ViewBag.TestcaseId;
                var newsteps = [];
                var addeddatasetid;
        //var newstepsid = 1;
        var newstepsid = 0;
        var newstepid = 1;
        var lflagDragRow = false;
                var Version = 0;
                var IsAvailable = 0;
                var EditedUserName = "";

   var jsonData = "";
   var clms = "";
   var dt = [];
   var obj = [];



        var lCollExpRowId;
        dt.push({
            dataIndx: "state", copy: false, maxWidth: 30, minWidth: 30, align: "center", resizable: false, title: "", menuIcon: false, type: 'checkbox', sortable: false, editor: false, dataType: 'bool',
            render: function (ui) {
                var rowData = ui.rowData,
                    dataIndx = ui.dataIndx;
                rowData.pq_cellcls = rowData.pq_cellcls || {};
                 if (ui.rowData != undefined) {
                                if (ui.rowData.pq_rowcls == "collapseBorder") {
                                    return "<input type='checkbox' disabled  " + (ui.cellData ? "checked='checked'" : "") + " />";
                                } else {
                                    return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                                }
                            } else {
                                    return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                            }

            }
        });
        dt.push({
            title: "", minWidth: 30, copy: false,maxWidth: 30, filter: { on: false, menuIcon: false },menuIcon: false,menuInHide: true, align: "left", halign: "center", sortable: false, nodrag: true,
            nodrop: true,resizable: false, editable: false,render: function (ui) {
                    var rowIndx = ui.rowIndx,
                        $cell = gridobj["@lTestCasegrid"].getCell(ui);
                    var lflagPegObject = false;
                    if (ui.rowData.keyword != undefined) {
                        if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                            lflagPegObject = true;
                        }
                    }
                    if (lflagPegObject) {

                        var prowvisible = true;
                        var lDM = gridobj["@lTestCasegrid"].option("dataModel");
                        ldata = lDM.data;
                        if ((rowIndx + 1) < lDM.data.length) {
                            if (ldata[rowIndx + 1].pq_hidden == true) {
                                prowvisible = false;
                            }
                        }
                        if (prowvisible) {
                            return "<button type='button' class='ui-icon-collapse-Row'></button>";
                        } else {
                            return "<button type='button' class='ui-icon-expand-Row'></button>";
                        }
                    }
            },
            postRender: function (ui) {

                var rowIndx = ui.rowIndx;
               $cell = gridobj["@lTestCasegrid"].getCell(ui);
                 if (ui.rowData.keyword != undefined) {
                    if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                        lflagPegObject = true;
                    }
                }
                 var lrowvisible;
                 $cell.find("button")
                     .bind("click", function () {
                         lCollExpRowId = rowIndx;
                        var lDM = gridobj["@lTestCasegrid"].option("dataModel");
                            ldata = lDM.data;
                        if (ldata[rowIndx + 1].pq_hidden == true && lrowvisible == null) {
                            lrowvisible = true;
                         }
                  for (var k = 0; gridobj["@lTestCasegrid"].pdata.length > k; k++) {
                    if (rowIndx < k) {
                        var lflagblank = true;
                        if (gridobj["@lTestCasegrid"].pdata[k].keyword.toLowerCase() == "pegwindow") {
                            lflagblank = false;
                            break;
                        }
                        if (lflagblank)
                        {
                            var DM = gridobj["@lTestCasegrid"].option("dataModel");
                            data = DM.data;
                            if (lrowvisible == true) {
                                data[k].pq_hidden = false;
                               gridobj["@lTestCasegrid"].removeClass({ rowIndx: rowIndx, cls: 'collapseBorder' });
                            }
                            else {
                                data[k].pq_hidden = true;

                                gridobj["@lTestCasegrid"].addClass({ rowIndx: rowIndx, cls: 'collapseBorder' });
                            }
                        }
                        gridobj["@lTestCasegrid"].refreshView();
                    }
                        }
                        lrowvisible = null;
                    });
            }

        });

        dt.push({
            title: "", copy: false, editable: false, minWidth: 40, maxWidth: 40, sortable: false, dataIndx: "IsDelete", menuInHide: true, menuIcon: false, sortable: false, filter: { on: false, menuIcon: false },
            render: function (ui) {
                if (ui.rowData != undefined) {
                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                        return "<button type='button' class='delete_btn' disabled style='color:red;'></button>";
                    } else {
                        return "<button type='button' class='delete_btn' style='color:red;'></button>";
                    }
                } else {
                    return "<button type='button' class='delete_btn' style='color:red;'></button>";
                }
            },
            postRender: function (ui) {
                var rowIndx = ui.rowIndx,
                    grid = this,
                    $cell = gridobj["@lTestCasegrid"].getCell(ui);
                var lflagPegObject = false;
                if (ui.rowData.keyword != undefined) {
                    if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                        lflagPegObject = true;
                    }
                }
                $cell.find("button").button({ icons: { primary: 'ui-icon-close' } }).bind("click", function () {
                    debugger;
                    gridobj["@lTestCasegrid"].addClass({ rowIndx: ui.rowIndx, cls: 'pq-row-delete' });

               //swal.fire({
               //    title: 'Delete',
               //    text: "Are you sure to delete this row No " + (rowIndx + 1) + "?",
               //    type: 'warning',
               //    showCancelButton: true,
               //    confirmButtonText: 'Yes, delete it!'
               //}).then(function (result) {
                  // if (result.value == true) {
                    ans = true;
                    var rowDatas = ui.rowData;
                    gridobj["@lTestCasegrid"].removeClass({ rowIndx: rowIndx, cls: 'pq-row-delete' });
                    if (ans) {
                        gridobj["@lTestCasegrid"].deleteRow({ rowIndx: rowIndx });
                        delete newsteps[rowIndx];
                        if (lflagPegObject) {
                            var ldeletedRowIndex = rowIndx;
                            var lflagblank = true;
                            for (var k = 0; gridobj["@lTestCasegrid"].pdata.length > k; k++) {
                                if (ldeletedRowIndex <= k) {
                                    if (gridobj["@lTestCasegrid"].pdata[k].keyword.toLowerCase() == "pegwindow") {
                                        lflagblank = false;
                                    }
                                    if (lflagblank) {
                                        gridobj["@lTestCasegrid"].updateRow({
                                            rowIndx: k,
                                            newRow: { 'object': '' }
                                        });
                                    }
                                }
                            }
                        }
                        DeleteTestCaseRowInSession(rowDatas.stepsID, rowDatas.RUN_ORDER);
                    }
                   //} else {
                      // gridobj["@lTestCasegrid"].removeClass({ rowIndx: rowIndx, cls: 'pq-row-delete' });
                 //  }
              // });
                });
            }
        });
   dt.push({
       title: "StepsID", copy: false, hidden: true,menuInHide: true,sortable: false, dataType: "int", dataIndx: "stepsID", align: "center",
   });
    dt.push({
        title: "RUN_ORDER", copy: false, hidden: true, dataType: "int", dataIndx: "RUN_ORDER", align: "center", menuInHide: false, sortable: false,
    });
        //dt.push({ title: "KeywordId", dataIndx: 'KeywordId', hidden: true }),
      dt.push({
        title: "Keyword", dataIndx: "keyword", dataType: "string", align: "left", menuInHide: true, halign: "center", nodrag: true, nodrop: true, width: @ViewBag.keywordwidth, minWidth: 20, sortable: false, resizable: true,
       editor:
       {
           type: 'select',
           valueIndx: "value",
           init: function (ui) {
               ui.$cell.find("select").pqSelect();
           },
           labelIndx: "text",
           //mapIndices: { "text": "Keyword", "value": "KeywordId" },
           options: function (ui) {
               var List = [];
               var lGridList = [];
               for (i = 0; i < gridobj["@lTestCasegrid"].pdata.length; i++) {
                   lGridList.push({ "Id": gridobj["@lTestCasegrid"].pdata[i].stepsID, "Keyword": gridobj["@lTestCasegrid"].pdata[i].keyword});
               }
                var KeywordList = {};
               KeywordList.stepId = ui.rowIndx + 1;
               KeywordList.Grid = JSON.stringify(lGridList);
               var lPegStepId = 0;
               var lstepId = ui.rowIndx + 1;
               var keywordsList = [];
               for (i = 0; i < gridobj["@lTestCasegrid"].pdata.length; i++)
               {
                   var item = gridobj["@lTestCasegrid"].pdata[i];
                   if (item.keyword) {

                            if (item.keyword.toLowerCase() == "pegwindow" && lPegStepId == 0) {
                                lPegStepId = i + 1;
                                break;

                        }
                    }

                    i++;
               }
               if (lstepId == 1 || lstepId < lPegStepId || lPegStepId == 0) {
                   keywordsList = @Html.Raw(ViewBag.KeywordsPegwindowList);

               }
               else {
                   keywordsList = @Html.Raw(ViewBag.KeywordsList);
               }
               keywords.push({ "value": "", "text": "" });
               $.each(keywordsList, function (key, value) {
                   keywords.push({ "value": value.KeywordName, "text": value.KeywordName });
               });
               List = keywords;
               keywords = [];
               //$.ajax({
               //    url: "/TestCase/GetKeywordsList",
               //    type: "POST",
               //    data: '{KeywordList: ' + JSON.stringify(KeywordList) + '}',
               //    contentType: "application/json;charset=utf-8",
               //    dataType: "json",
               //    async: false,
               //    success: function (result) {
               //    if (result.status == 1) {
               //            if (result.data != null && result.data.length > 0) {
               //                keywords.push({ "value": "", "text": "" });
               //                keywordValidate.push("");
               //                for (var i = 0; i < result.data.length; i++) {
               //                    keywords.push({ "value": result.data[i].KeywordName, "text": result.data[i].KeywordName });
               //                    keywordValidate.push(result.data[i].KeywordName);
               //                }
               //                List = keywords;
               //                keywords = [];
               //            }
               //        }
               //        else if (result.status == 0) {
               //            swal.fire({
               //                "title": "",
               //                "text": result.message,
               //                "icon": "error",
               //                "onClose": function (e) {
               //                    console.log('on close event fired!');
               //                }
               //            });
               //        }
               //    },
               //    error(a, b, c) {
               //    }
               //});
               return List;
           }
          },
          editable: function (ui) {
              debugger;
              if (ui.rowData != undefined) {
                  if (ui.rowData.pq_rowcls == "collapseBorder") {
                      return false;
                  } else {
                      return true;
                  }
              } else {
                  return true;
              }
          },
       //validations: [
       //    { type: 'minLen', value: 1, msg: "Required" },

       //],
       filter: { crules: [{ condition: 'range' }] }
   });
   //------------------------------------------

   //------------------------------------------
   // Object Column
        //------------------------------------------

      dt.push({
        title: "Object", dataIndx: "object", dataType: "string", align: "left", menuInHide: true, halign: "center", sortable: false, resizable: true, nodrag: true, nodrop: true, width: @ViewBag.objectwidth, minWidth: 20,
          editable: function (ui) {
              if (ui.rowData != undefined) {
                  if (ui.rowData.pq_rowcls == "collapseBorder") {
                      return false;
                  } else {
                      return true;
                  }
              } else {
                  return true;
              }
          },
          editor:
       {
           type: 'select',
           valueIndx: "value",
           init: function (ui) {
               var lchangedRowIndex = ui.rowIndx;
               ui.$cell.find("select").pqSelect();
               ui.$editor.on('change', function () {
                   var lflagblank = false;
                   for (var k = 0; gridobj["@lTestCasegrid"].pdata.length > k; k++){
                       if (lchangedRowIndex == k) {
                           if (gridobj["@lTestCasegrid"].pdata[k].keyword.toLowerCase() == "pegwindow") {
                               lflagblank = true;
                           }
                       }

                       if (lchangedRowIndex < k) {
                           if (gridobj["@lTestCasegrid"].pdata[k].keyword.toLowerCase() == "pegwindow") {
                               lflagblank = false;
                           }

                           if (lflagblank) {
                               gridobj["@lTestCasegrid"].updateRow({
                                   rowIndx: k,
                                   newRow: { 'object': '' }
                               });
                           }
                       }
               }

               });
           },
           labelIndx: "text",
              options: function (ui) {
               var List = [];
               var lGridList = [];
               for (i = 0; i < gridobj["@lTestCasegrid"].pdata.length; i++) {
                   lGridList.push({ "Id": i + 1, "StepId": gridobj["@lTestCasegrid"].pdata[i].stepsID, "Keyword": gridobj["@lTestCasegrid"].pdata[i].keyword, "Object": gridobj["@lTestCasegrid"].pdata[i].object });
               }

               var ObjectList = {};
               ObjectList.stepId = ui.rowIndx + 1;
               ObjectList.Grid = JSON.stringify(lGridList);
               ObjectList.TestCaseId = @ViewBag.TestcaseId;

               if (ui.rowData.keyword == "PegWindow") {
                   var objectlist = @Html.Raw(ViewBag.ObjectList);
                   objects.push({ "value": "", "text": "" });
                   objectValidate.push("");
                   $.each(objectlist, function (key, value) {
                       objects.push({ "value": value.ObjectName, "text": value.ObjectName });
                       objectValidate.push(value.ObjectName);
                   });

                   List = objects;
                   objects = [];
               } else {
                   var paraentPeg = lGridList.filter(function (obj) { return obj.Keyword.toLowerCase() === "pegwindow" });
                   var pegObjectList = paraentPeg.filter(function (obj) { return obj.Id < ObjectList.stepId });
                   var keyworkName = lGridList.filter(function (obj) { return obj.Id == ObjectList.stepId })[0].Keyword;
                   var objectName = null;
                   if (pegObjectList.length > 1) {
                       objectName = pegObjectList[pegObjectList.length - 1].Object;
                   }
                   var appId = '@ViewBag.AppID';
                   $.ajax({
                       url: "/TestCase/GetObjectsList",
                       type: "GET",
                       data: { 'appId': appId, 'objectName': objectName, 'keyworkName': keyworkName },
                       contentType: "application/json;charset=utf-8",
                       dataType: "json",
                       async: false,
                       success: function (result) {
                           if (result.status == 1) {
                               if (result.data != null && result.data.length > 0) {
                                   objects.push({ "value": "", "text": "" });
                                   objectValidate.push("");
                                   for (var i = 0; i < result.data.length; i++) {
                                       objects.push({ "value": result.data[i].ObjectName, "text": result.data[i].ObjectName });
                                       objectValidate.push(result.data[i].ObjectName);
                                   }
                                   List = objects;
                                   objects = [];
                               }
                           }
                           else if (result.status == 0) {
                               swal.fire({
                                   "title": "",
                                   "text": result.message,
                                   "icon": "error",
                                   "onClose": function (e) {
                                       console.log('on close event fired!');
                                   }
                               });
                           }
                       },
                       error(a, b, c) {
                       }
                   });
                   //$.ajax({
                   //    url: "/TestCase/GetObjectsList",
                   //    type: "POST",
                   //    data: '{ObjectList: ' + JSON.stringify(ObjectList) + '}',
                   //    contentType: "application/json;charset=utf-8",
                   //    dataType: "json",
                   //    async: false,
                   //    success: function (result) {
                   //        if (result.status == 1) {
                   //            if (result.data != null && result.data.length > 0) {
                   //                objects.push({ "value": "", "text": "" });
                   //                objectValidate.push("");
                   //                for (var i = 0; i < result.data.length; i++) {
                   //                    objects.push({ "value": result.data[i].ObjectName, "text": result.data[i].ObjectName });
                   //                    objectValidate.push(result.data[i].ObjectName);
                   //                }
                   //                List = objects;
                   //                objects = [];
                   //            }
                   //        }
                   //        else if (result.status == 0) {
                   //            swal.fire({
                   //                "title": "",
                   //                "text": result.message,
                   //                "icon": "error",
                   //                "onClose": function (e) {
                   //                    console.log('on close event fired!');
                   //                }
                   //            });
                   //        }
                   //    },
                   //    error(a, b, c) {
                   //    }
                   //});
               }
               return List;
           }
       },
       filter: { crules: [{ condition: 'contain' }] },

   });
        dt.push({
            title: "Parameters", menuInHide: true, align: "left", halign: "center", sortable: false, nodrag: true, nodrop: true, width: @ViewBag.parameterswidth, minWidth: 20, dataIndx: "parameters", filter: { crules: [{ condition: 'contain' }] }, resizable: true, editable: function (ui) {
                if (ui.rowData != undefined) {
                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                        return false;
                    } else {
                        return true;
                    }
                } else {
                    return true;
                }
            },
            });
        dt.push({
            title: "Comment", dataType: "string", align: "left", halign: "center", sortable: false, dataIndx: "comment", nodrag: true, nodrop: true, width: @ViewBag.commentwidth, minWidth: 20, menuInHide: true, resizable: true,
            filter: { crules: [{ condition: 'contain' }] },
            resizable: true,
            editable: function (ui) {
                if (ui.rowData != undefined) {
                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                        return false;
                    } else {
                        return true;
                    }
                } else {
                    return true;
                }
                },
        });
        dt.push({
            title: "hdnVersionId", copy: false, dataType: "int", dataIndx: "VERSION", hidden: true, menuInHide: true, sortable: false
                });
                dt.push({
                    title: "hdnISAVAILABLE", copy: false, dataType: "int", dataIndx: "ISAVAILABLE", hidden: true, menuInHide: true, sortable: false
                });

                    $.ajax({
                        url: "/TestCase/GetTestCaseDetails",
                        type: "GET",
                        data: {
                            testcaseId: @ViewBag.TestcaseId,
                            dataset : "@ViewBag.VisibleDataset"
                        },
                        contentType: "application/json;charset=utf-8",
                        async: false,
                        dataType: "json",
                        success: function (result) {
                            if (result.status == 1) {
                                result.data = JSON.parse(result.data);

                                console.log("Get testCase :" + new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds())
                                jsonData = "[";
                                if (result.data.length > 0) {

                                    var datasetname = result.data[0].DATASETNAME;//.replace(/\s+/g, '_');--cherish
                                    var datasetDesc = result.data[0].DATASETDESCRIPTION;
                                    var datasetnames = [];
                                    if (datasetname != null) {
                                        datasetname = datasetname.replace(/\\/g, "\\\\");
                                        datasetnames = datasetname.split(',');
                                    }

                                    var datasetdescs = [];
                                    if (datasetDesc != null) {
                                        datasetdescs = datasetDesc.split(',');
                                    }

                                    var datasetIds = result.data[0].DATASETIDS;
                                    var datasetid = [];
                                    if (datasetIds != null) {
                                        datasetid = datasetIds.split(',');
                                    }
                                    for (var k = 0; k < datasetnames.length; k++) {
                                        var l = 4;
                                        datasetnames[k] = datasetnames[k].replace(/___/g, ',');
                                        //*********************************************************************
                                        // START - DYNAMIC - Define Headers for the PQGrid and Create JSON
                                        //*********************************************************************
                                        //ExistDataSetRenameList[0].TestcaseIDd.push(idtc);
                                        //ExistDataSetRenameList[a].Item.push({ oldColumn: datasetnames[k], newColumn: datasetnames[k], detail: datasetdescs[k], datasetid: datasetid[k] });

                                        ExistDataSetRenameList.push({ TestCaseId:@ViewBag.TestcaseId,oldColumn: datasetnames[k], newColumn: datasetnames[k], detail: datasetdescs[k], datasetid: datasetid[k] });
                                        var lTitle = datasetnames[k];
                                        var OTitle = datasetnames[k];
                                        lTitle = lTitle.replace(/___/g, ',');
                                        if (datasetdescs[k] != null && datasetdescs[k].trim() != "") {
                                            lTitle = '<span title="' + datasetdescs[k] + '">' + datasetnames[k] + '</span>';
                                        }

                                        var pDatasetName = "@ViewBag.VisibleDataset";

                                        var IsHidden = false;
                                        var IsCopy = true;
                                        if (pDatasetName != "" && pDatasetName != null) {
                                            IsHidden = true;
                                            IsCopy = false;
                                            //copy: false,

                                        }
                                        if (pDatasetName != "") {
                                            if (OTitle.toUpperCase() == pDatasetName.toUpperCase()) {
                                                IsHidden = false;
                                                IsCopy = true;
                                            }
                                        }

                                         dt.push({
                                             title: lTitle, clsHead: datasetid[k], menuInClose: true, sortable: false, resizable: true, minWidth: 50, width: 250, copy: IsCopy, hidden: IsHidden,
                                            align: "center", colModel: [{
                                                title: "", width: "2%", dataType: "bool", sortable: false, copy: IsCopy,
                                                render: function (ui) {
                                                    var rowData = ui.rowData,
                                                        dataIndx = ui.dataIndx;
                                                    ldataIndx = datasetnames[k];

                                                    rowData.pq_cellcls = rowData.pq_cellcls || {};
                                                    if (rowData[dataIndx] == true) {
                                                        if (rowData.pq_cellcls[dataIndx] == undefined) {
                                                            rowData.pq_cellcls[dataIndx] = 'grey';
                                                        } else {
                                                            rowData.pq_cellcls[dataIndx] = 'grey ' + rowData.pq_cellcls[dataIndx].replace("grey", "");
                                                        }
                                                        return "<input  type='checkbox' " + (ui.cellData ? "checked='checked'" : "") + " />";
                                                    }
                                                    else {
                                                        if (rowData.pq_cellcls[dataIndx] == undefined) {
                                                            rowData.pq_cellcls[dataIndx] = '';
                                                        } else {
                                                            rowData.pq_cellcls[dataIndx] = rowData.pq_cellcls[dataIndx].replace("grey", "");
                                                        }
                                                        return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                                                    }
                                                },
                                                align: "center",
                                                dataIndx: "skip_" + datasetnames[k],
                                                exportRender: false,
                                                editor: false,
                                                type: 'checkbox',
                                                nodrag: true,
                                                nodrop: true,
                                                cls: 'hideRightborder',
                                                copy: IsCopy,
                                                editable: function (ui) {
                                                    if (ui.rowData != undefined) {
                                                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                                                            return false;
                                                        } else {
                                                            return true;
                                                        }
                                                    } else {
                                                        return true;
                                                    }
                                                },
                                                //resizable: true
                                            },
                                            {
                                                title: "Data", sortable: false,
                                                minWidth: 20,
                                                width: 200,
                                                dataType: "string",
                                                dataIndx: datasetnames[k],
                                                cls: 'hideLeftborder',
                                                nodrag: true,
                                                nodrop: true,
                                                copy: IsCopy,
                                                filter: { crules: [{ condition: 'contain' }] },
                                                resizable: true,
                                                render: function (ui) {
                                                    var column = this.getColumn({ dataIndx: 'skip_' + ui.column.dataIndx }),
                                                        state = ui.rowData["skip_" + ui.dataIndx];
                                                    if (column != undefined) {
                                                        if (state) {
                                                            return { style: "background:#c0c0c0;" }
                                                        }
                                                        else {
                                                            return { style: "" }
                                                        }
                                                    }
                                                },
                                                editable: function (ui) {
                                                    if (ui.rowData != undefined) {
                                                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                                                            return false;
                                                        } else {
                                                            return true;
                                                        }
                                                    } else {
                                                        return true;
                                                    }
                                                },
                                            },
                                            { title: "hdnId", dataType: "string", copy: false, dataIndx: "DataSettingId_" + datasetnames[k], hidden: true, menuInHide: true, sortable: false, }
                                            ]
                                        });

                                        IsHidden = true;
                                        l = l + 2;
                                    }
                                }
                                //  console.log("col model completed :" + new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds())
                                newsteps = [];
                                for (var i = 0; i < result.data.length; i++) {
                                    if (i != 0) {
                                        jsonData += ",";
                                    }
                                    var datasetvalue = result.data[i].DATASETVALUE;
                                    if (datasetvalue != null) {
                                        datasetvalue = datasetvalue.replace(/&amp;/g, "&").replace("&lt;", "<").replace("&gt;", ">").replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace("&apos;", "'").replace(/"/g, "\\\"")/*.replace(",","##")*/;/*.replace(/\\\\/g, '\\')*//*.replace(/\\/g, '\\\\');*///.replace(/\\\\/g, '\\');
                                    }
                                    datasetvalues = [];
                                    if (datasetvalue != null) {
                                        datasetvalues = datasetvalue.split(',');

                                    }

                                    var DataSettingIds = [];
                                    if (result.data[i].Data_Setting_Id != null) {
                                        DataSettingIds = result.data[i].Data_Setting_Id.split(',');

                                    }
                                    var datasetskip = result.data[i].SKIP;
                                    var datasetskipsTest = [];
                                    var datasetskips = [];
                                    if (datasetskip != null) {
                                        datasetskipsTest = datasetskip.split(',');
                                        for (var m = 0; m <= datasetskipsTest.length; m++) {
                                            if (datasetskipsTest[m] == "4") {
                                                datasetskips.push(true);
                                            }
                                            else {
                                                datasetskips.push(false);
                                            }
                                        }
                                    }
                                    var objvalue = "";
                                    var parametervalue = "";
                                    var commentvalue = "";
                                    if (result.data[i].object_happy_name != null) {
                                        objvalue = result.data[i].object_happy_name;
                                    }
                                    if (result.data[i].parameter != null) {
                                        parametervalue = result.data[i].parameter;
                                        if (parametervalue != null) {
                                            parametervalue = parametervalue.replace(/&amp;/g, "&").replace(/\n/g, "\\n").replace(/\\/g, "\\\\").replace(/\t/g, "\\t").replace("&lt;", "<").replace("&gt;", ">").replace(/"/g, "\\\"");/*.replace(/\\/g, '\\\\')*/;//replace(/"/g, '\\"');
                                        }

                                    }
                                    if (result.data[i].COMMENT != null) {
                                        commentvalue = result.data[i].COMMENT;
                                        if (commentvalue != null) {
                                            commentvalue = commentvalue.replace(/&amp;/g, "&").replace(/\n/g, "\\n").replace(/\\/g, "\\\\").replace(/\t/g, "\\t").replace("&lt;", "<").replace("&gt;", ">").replace(/"/g, "\\\"");
                                        }
                                    }

                                    //*********************************************************************
                                    // START - DYNAMIC - Define DATA for the PQGrid and Create JSON
                                    //*********************************************************************
                                    jsonData += '{"stepsID":"' + result.data[i].STEPS_ID + '", "keyword":"' + result.data[i].key_word_name + '", "object":"' + objvalue + '", "parameters":"'
                                        + parametervalue + '", "comment":"' + commentvalue + '", "RUN_ORDER":"' + result.data[i].RUN_ORDER + '", "hdnVERSION":"' + result.data[i].VERSION + '", "hdnISAVAILABLE":"' + result.data[i].ISAVAILABLE + '"';

                                    if (Version == 0) {
                                        Version = result.data[i].VERSION;
                                    }
                                    if (IsAvailable == 0) {
                                        IsAvailable = result.data[i].ISAVAILABLE;
                                    }
                                    EditedUserName = result.data[i].EditingUserName;
                                    if (datasetvalues.length > 0 && datasetskips.length > 0) {
                                        for (var j = 0; j < datasetnames.length; j++) {

                                            if (datasetnames[j] != undefined) {
                                                var lSkip = false;
                                                var lvalue = "";
                                                if (datasetskips[j] != undefined) {
                                                    lSkip = datasetskips[j];
                                                }
                                                if (datasetvalues[j] != undefined) {
                                                    lvalue = datasetvalues[j];
                                                    lvalue = lvalue.replace(/##/g, ",");
                                                }

                                                if (DataSettingIds[j] != undefined) {
                                                    lsettingId = DataSettingIds[j];
                                                } else {
                                                    lsettingId = "";
                                                }

                                                datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                                jsonData += ', "skip_' + datasetnames[j] + '":' + lSkip + ', "' + datasetnames[j] + '":"' + lvalue + '","DataSettingId_' + datasetnames[j] + '":"' + lsettingId + '"';
                                            }
                                        }
                                    }
                                    else if (datasetvalues.length == 0 && datasetskips.length > 0) {
                                        for (var j = 0; j < datasetskips.length; j++) {
                                            if (datasetnames[j] != undefined) {
                                                datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                                jsonData += ', "skip_' + datasetnames[j] + '":' + datasetskips[j] + ', "' + datasetnames[j] + '":' + '"", "DataSettingId_' + datasetnames[j] + '":"' + DataSettingIds[j] + '"';
                                            }
                                        }
                                    }
                                    else if (datasetvalues.length > 0 && datasetskips.length == 0) {
                                        for (var j = 0; j < datasetvalues.length; j++) {
                                            if (datasetnames[j] != undefined) {
                                                datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                                jsonData += ',"skip_' + datasetnames[j] + '": false , "' + datasetnames[j] + '":"' + datasetvalues[j] + '","DataSettingId_' + datasetnames[j] + '":"' + DataSettingIds[j] + '"';
                                            }
                                        }
                                    }

                                    // initialize the steps and run order array
                                    newsteps.push({ "stepsid": result.data[i].STEPS_ID, "RUN_ORDER": i + 1, "RUN_ORDER_OLD": i + 1 });

                                    jsonData += "}";
                                    //*********************************************************************
                                    // START - DYNAMIC - Define DATA for the PQGrid and Create JSON
                                    //*********************************************************************

                                }
                                jsonData += "]";

                                if (IsAvailable == "1") {
                                    swal.fire({
                                        "title": "Notification",
                                        "text": EditedUserName + " is editing this testcase.",
                                        "icon": "warning",
                                        "onClose": function (e) {
                                            console.log('on close event fired!');
                                        }
                                    });
                                }
                            }
                            else if (result.status == 0) {
                                swal.fire({
                                    "title": "",
                                    "text": result.message,
                                    "icon": "error",
                                    "onClose": function (e) {
                                        console.log('on close event fired!');
                                    }
                                });
                            }
                        }
                    });
                        obj = [];
           //*********************************************************************
           // START - CREATE PQ GRID JSON
           //*********************************************************************
           obj =
            {
               colModel: dt,
               editModel: {
                   clicksToEdit: 1,
               },
               trackModel: { on: true },
               track: { on: true },
               virtualX: true,
               editable: true,
               selectionModel: { type: 'cell' },
               collapsible: { on: false, toggle: false },
               columnBorders: true,
               hoverMode: 'row',
               resizable: true,
               dataModel: { data: data, recIndx: "stepsID" },
               selectChange: function (evt, ui) {
                   console.log('selectChange', ui);
                   selectChange = ui;
                   // $("#select_change_div").html(JSON.stringify(address));
               },
               contextMenu: {
                   on: true,
                   //head: true,
                   headItems: function (evt, ui) {
                       return (ui.$th ? tcheadItems.call(this, evt, ui,"@lTestCasegrid",@ViewBag.TestcaseId) : bodyItems.call(this, evt, ui));
                   }
                   ,
                   cellItems: function (evt, ui) {
                       return (TCbodyItems("@lTestCasegrid",@ViewBag.TestcaseId,@ViewBag.TestsuiteId, @ViewBag.TCstoryboradId, '@ViewBag.TCstoryboardname','@ViewBag.TCApplicationList'));
                   }
               },
               //create: function (evt, ui) {
               //    this.widget().pqTooltip();
               //},
               freezeCols: 0,
               freezeRows: 0,
               height: lPqGridHeight,
               //rowHt: 13,
               cellClick: function (evt, ui) {
                   debugger;
                   if (ui.column.type == "checkbox") {
                       var chkBoxValue = false;
                       if (ui.rowData.hasOwnProperty(ui.dataIndx)) {
                           chkBoxValue = ui.rowData[ui.dataIndx] == true ? false : true;
                       }
                       var propertyName = ui.dataIndx;
                       var propertyValue = ui.newVal;
                       var stepId = ui.rowData.stepsID;
                       UpdateValuesInTestCaseSession(propertyName, propertyValue, stepId, true, chkBoxValue);
                   }
               },
               cellSave: function (evt, ui) {
                   debugger;
                   if (ui.dataIndx == "keyword" && ui.newVal !== ui.oldVal) {
                       //reset the region cell whenever country cell is modified.
                       this.updateRow({
                           rowIndx: ui.rowIndx,
                           row: { 'object': '' }
                       });
                   }

                   var propertyName = ui.dataIndx;
                   var propertyValue = ui.newVal;
                   var stepId = ui.rowData.stepsID;
                   UpdateValuesInTestCaseSession(propertyName, propertyValue, stepId, false, false);
               },
               beforeValidate: function (event, ui) {

                   ui.updateList.forEach(function (obj) {
                       var newRow = obj.newRow;
                       //if (!(newRow["state"] || newRow["IsDelete"] || newRow["stepsID"] || newRow["RUN_ORDER"] || newRow["keyword"] || newRow["object"] || newRow["VERSION"] || newRow["ISAVAILABLE"])) {
                       $.each(newRow, function (key, value) {

                           if (key != "state" && key != "IsDelete" && key != "stepsID" && key != "RUN_ORDER" && key != "keyword" && key != "object" && key != "VERSION" && key != "ISAVAILABLE" && key.indexOf('skip_') ==-1)
                           { newRow[key] = newRow[key] == null ? newRow[key]: newRow[key].substring(0, 128); }
                           });


                           });
               },

               history: function (evt, ui) {
                   var $tb = this.toolbar(),
                       $undo = $tb.find("button:contains('Undo')"),
                       $redo = $tb.find("button:contains('Redo')");
                   if (ui.canUndo != null) {
                       $undo.button("option", { disabled: !ui.canUndo });
                   }
                   if (ui.canRedo != null) {
                       $redo.button("option", "disabled", !ui.canRedo);
                 }
                 var $grid = this.widget();
                 if (ui.canUndo != null) {
                   $("button.undotcchanges", $grid).button("option", { disabled: !ui.canUndo });
                 }
                 $undo.button("option", { label: 'Undo (' + ui.num_undo + ')' });
                 //undonum = ui.num_undo;
                   $redo.button("option", { label: 'Redo (' + ui.num_redo + ')' });
               },
               columnTemplate: { render: filterRenderTC },//
               menuIcon: true,
               menuUI: {
                   tabs: ['hideCols', 'filter'],
                   gridOptions: {
                       columnTemplate: { dataType: 'html' }
                   }
               },
               //important option for this example.
               reactive: false,

               width: pqwidth,
               height: pqheight,
               roundcorners: false,
               rowBorders: true,
               numberCell: { show: true },
               stripeRows: true,
               //scrollModel: { autoFit: true },
               showHeader: true,
               showTitle: false,
               showToolbar: true,
               showTop: true,
               title: "Test Case",
               postRenderInterval: -1,
               filterModel:
               {
                   on: true,
                   mode: "OR",
                   header: true,
                   menuIcon: true,
                   copy: false
               },
               toolbar:
               {
                   // cls: "pq-toolbar-search",
                   items: [
                       {
                           type: 'button',
                           icon: 'export',
                           attr: 'title="Export"',
                           label: '',
                           cls: "floatRight btn btn-brand btn-elevate btn-icon-sm TCExportButton", listener: function () {
                               //append empty row at the end.
                               exportTestcase("@lTestCasegrid",@ViewBag.TestcaseId,@ViewBag.TestsuiteId);
                           }
                       },
                       {
                           type: 'button',
                           icon: 'save',
                           attr: 'title="Save"',

                           label: '',
                           cls: "floatRight btn btn-brand btn-elevate btn-icon-sm TCSaveButton", listener: function () {
                               //append empty row at the end.
                               saveChangesTC("@lTestCasegrid",@ViewBag.TestcaseId,@ViewBag.TestsuiteId);
                           }
                       },
                       {
                           type: 'button',
                           attr: 'title="Validate"',
                           label: '',
                           icon: 'validate',
                           cls: "floatRight btn btn-brand btn-elevate btn-icon-sm",
                           cls: "floatRight btn btn-brand btn-elevate btn-icon-sm", listener: function () {
                               //append empty row at the end.
                               validateTC("@lTestCasegrid",@ViewBag.TestcaseId,@ViewBag.TestsuiteId);
                           }
                       },

                       {
                           type: 'button',
                           icon: 'plus',
                           attr: 'title="New Step"',

                           label: '',
                           cls: "floatRight btn btn-brand btn-elevate btn-icon-sm",
                           listener: function () {

                               //append empty row at the end.
                               debugger;
                               var lMinValueStepId = 0;
                               for (var k = 0; gridobj["@lTestCasegrid"].pdata.length > k; k++) {
                                   if (gridobj["@lTestCasegrid"].pdata[k].stepsID <= lMinValueStepId) {
                                       lMinValueStepId = gridobj["@lTestCasegrid"].pdata[k].stepsID - 1;
                                   }
                               }


                               var ri = -1;
                               if (gridobj['@lTestCasegrid'].Selection().address().length > 0) {
                                   ri = gridobj['@lTestCasegrid'].Selection().address()[0].r1;
                               }

                               var rowData = { stepsID: lMinValueStepId }; //empty row
                               newstepid = newstepid - 1;
                               var rowIndx;
                               if (ri >= 0) {
                                   gridobj['@lTestCasegrid'].addRow({
                                       rowIndx: ri + 1,
                                       newRow: {},
                                       rowData: rowData
                                   })
                               }
                               else {
                                   rowIndx = gridobj['@lTestCasegrid'].addRow({ rowData: rowData });
                               }

                               gridobj['@lTestCasegrid'].goToPage({ rowIndx: rowIndx });
                               gridobj['@lTestCasegrid'].editFirstCellInRow({ rowIndx: rowIndx });
                               var stepsCount = newsteps.length;
                               newsteps.push({ "stepsid": lMinValueStepId, "RUN_ORDER": stepsCount + 2, "RUN_ORDER_OLD": stepsCount });

                           }
                       },


                       {
                           type: 'button',
                           label: '',
                           attr: 'title="Reload"',
                           cls: 'btn btn-brand btn-elevate btn-icon-sm bgImage ',
                           icon: "flaticon2-reload",
                           listener: function () {
                               var lTestcaseName = "@lTestCasegrid";
                               var testcaselist = lTestcaseName.split(".grid");
                               var changes = gridobj["@lTestCasegrid"].getChanges({ format: "byVal" });
                               console.log(changes);
                               if (changes.updateList.length == 0 && changes.addList.length == 0 && changes.deleteList.length == 0 && changes.oldList.length == 0) {

                                   gridobj["@lTestCasegrid"].commit({ type: 'add', rows: changes.addList });
                                   gridobj["@lTestCasegrid"].commit({ type: 'update', rows: changes.updateList });
                                   gridobj["@lTestCasegrid"].commit({ type: 'delete', rows: changes.deleteList });

                                   gridobj["@lTestCasegrid"].history({ method: 'reset' });

                                   var lDeletedColLength = 0;
                                   var lExistDataSetLength = 0;
                                   lDeletedColLength = DeleteColumnsList.length;
                                   lExistDataSetLength = ExistDataSetRenameList.length;
                                   while (lDeletedColLength--) {
                                       if (DeleteColumnsList[lDeletedColLength]["TestCaseId"] == @ViewBag.TestcaseId) {
                                           DeleteColumnsList.splice(lDeletedColLength, 1);
                                       }
                                   }

                                   while (lExistDataSetLength--) {
                                       if (ExistDataSetRenameList[lExistDataSetLength]["TestCaseId"] == @ViewBag.TestcaseId) {
                                           ExistDataSetRenameList.splice(lExistDataSetLength, 1);
                                       }
                                   }

                                   Version = 0;
                                   IsAvailable = 0;
                                   dt = [];

                                   ReloadGrid('@lTestCasegrid', @ViewBag.TestcaseId,@ViewBag.TestsuiteId, "");

                               }
                               else {
                                   swal.fire({
                                       title: '',
                                       text: "All changes in [" + testcaselist[1] + "] will be discarded.  Please confirm",
                                       icon: 'warning',
                                       showCancelButton: true,
                                       confirmButtonText: 'Yes'
                                       //confirmButtonText: 'Yes, remove it!'
                                   }).then(function (result) {
                                       if (result.value == true) {


                                           gridobj["@lTestCasegrid"].commit({ type: 'add', rows: changes.addList });
                                           gridobj["@lTestCasegrid"].commit({ type: 'update', rows: changes.updateList });
                                           gridobj["@lTestCasegrid"].commit({ type: 'delete', rows: changes.deleteList });

                                           gridobj["@lTestCasegrid"].history({ method: 'reset' });

                                           var lDeletedColLength = 0;
                                           var lExistDataSetLength = 0;
                                           lDeletedColLength = DeleteColumnsList.length;
                                           lExistDataSetLength = ExistDataSetRenameList.length;
                                           while (lDeletedColLength--) {
                                               if (DeleteColumnsList[lDeletedColLength]["TestCaseId"] == @ViewBag.TestcaseId) {
                                                   DeleteColumnsList.splice(lDeletedColLength, 1);
                                               }
                                           }

                                           while (lExistDataSetLength--) {
                                               if (ExistDataSetRenameList[lExistDataSetLength]["TestCaseId"] == @ViewBag.TestcaseId) {
                                                   ExistDataSetRenameList.splice(lExistDataSetLength, 1);
                                               }
                                           }

                                           Version = 0;
                                           IsAvailable = 0;
                                           dt = [];

                                           ReloadGrid('@lTestCasegrid', @ViewBag.TestcaseId,@ViewBag.TestsuiteId, "");

                                   // gridobj['@lTestCasegrid'].toolbar().children()[4].setAttribute("disabled", "");
                               }
                           });
                       }
                           },
               //    options: { disabled: true }
                       },

                   {
                       type: 'button',
                       attr: 'title="Toggle Collapse"',
                        label: '',
                       cls: "btn btn-brand btn-icon-sm ",
                       icon: "flaticon2-size",
                       listener: function () {
                           var grid = this;
                           gridobj['@lTestCasegrid'].Columns().alter(function () {
                             gridobj['@lTestCasegrid'].option('colModel').forEach(function (column) {

                               if (column.title == "Func" || column.title == "Keyword" || column.title == "Object" || column.title == "Parameters" ||
                                 column.title == "Comment") {
                                   if (column.width < 180 && (column.title == 'Keyword' || column.title == "Object")) {
                                       column.width = 200;
                                   }
                                   else if (column.width < 80 && (column.title == "Parameters" || column.title == "Comment")) {
                                       column.width = 100;}
                                   else
                                        { column.width = 50; }
                                    }
                               })
                           });
                       }
                   },
                   {

                       type: 'button',
                       attr: 'title="Freeze"',
                       label: '',
                       cls: 'btn btn-brand btn-icon-sm',
                       icon: "freeze",
                       listener: function (evt) {

                           if (freezcols == 0) {
                               freezcols = 9;
                           }
                           else {
                               freezcols = 0;
                           }
                           this.option("freezeCols", freezcols);
                           this.refresh();
                       }
                   },
                   {
                       type: 'button',
                       attr: 'title="Wrap"',
                       cls: ' btn btn-brand btn-icon-sm ',
                       label: '',
                       icon: "wrap",
                       listener: function (evt) {
                           if (lwrap) {
                              lwrap = false;
                           } else {
                               lwrap = true;
                           }
                           this.option('wrap', lwrap);
                           this.refresh();
                       }
                       },
                   {
                       type: 'button',
                       attr: 'title="Undo"',
                       icon: 'undo',
                       label: '&nbsp;Undo',
                       cls: 'btn btn-brand btn-icon-sm undotcchanges',
                       options: { disabled: true },
                       listener: function () {
                           gridobj['@lTestCasegrid'].history({ method: 'undo' });
                       }
                   },
                   {
                       type: 'button',
                       attr: 'title="Redo"',
                       icon: 'redo',
                       cls: 'btn btn-brand btn-icon-sm ',
                       label: '&nbsp;Redo',
                       options: { disabled: true },
                       listener: function () {
                           gridobj['@lTestCasegrid'].history({ method: 'redo' });
                       }
                       }, {
                           type: 'button',
                           //icon: '',
                           icon: 'resetfilter',
                            attr: 'title="Reset Filter"',
                           cls: 'btn btn-brand btn-icon-sm ',
                           label: '',
                           listener: function () {
                               gridobj['@lTestCasegrid'].reset({ filter: true })
                           }
                       }, {
                           type: 'button',
                           //icon: '',
                            icon: 'CollapseAll',
                            attr: 'title="Collapse All"',
                           cls: 'btn btn-brand btn-icon-sm ',
                           label: '',
               listener: function () {

                                  for (var k = 0; gridobj["@lTestCasegrid"].pdata.length > k; k++) {

                                         var lflagblank = true;
                                         if (gridobj["@lTestCasegrid"].pdata[k].keyword.toLowerCase() == "pegwindow") {
                                             lflagblank = false;
                                         }

                                      if (lflagblank) {
                                          var DM = gridobj["@lTestCasegrid"].option("dataModel");
                                          data = DM.data;
                                          //if (data[k].pq_hidden == true) {
                                          data[k].pq_hidden = true;

                                          //}
                                          //else {
                                          //    data[k].pq_hidden = true;
                                          // }
                                      } else {
                                           gridobj["@lTestCasegrid"].addClass({ rowIndx: k, cls: 'collapseBorder' });
                                      }
                                         gridobj["@lTestCasegrid"].refreshView();
                                 }
                           }
                       }, {
                           type: 'button',
                           //icon: '',
                           icon: 'ExpandAllSteps',
                            attr: 'title="Expand All"',
                           cls: 'btn btn-brand btn-icon-sm ',
                           label: '',
               listener: function () {

                               for (var k = 0; gridobj["@lTestCasegrid"].pdata.length > k; k++) {

                                         var lflagblank = true;
                                         if (gridobj["@lTestCasegrid"].pdata[k].keyword.toLowerCase() == "pegwindow") {
                                             lflagblank = false;
                                         }

                                   if (lflagblank) {
                                       var DM = gridobj["@lTestCasegrid"].option("dataModel");
                                       data = DM.data;
                                       //if (data[k].pq_hidden == true) {
                                       data[k].pq_hidden = false;
                                       //}
                                       //else {
                                       //    data[k].pq_hidden = true;
                                       // }
                                   } else {

                                        gridobj["@lTestCasegrid"].removeClass({ rowIndx: k, cls: 'collapseBorder' });
                                   }
                                         gridobj["@lTestCasegrid"].refreshView();
                                 }
                           }
                       }, {
                           type: 'button',
                           //icon: '',
               icon: 'ui-icon-Copy',
                            attr: 'title="Copy"',
                           cls: 'btn btn-brand btn-icon-sm ',
                           label: '',
               listener: function () {
                   this.copy();
                           }
               }, {
                   type: 'button',
                   //icon: '',
               icon: 'ui-icon-Paste',
                   attr: 'title="Paste"',
                   cls: 'btn btn-brand btn-icon-sm ',
                   label: '',
                   listener: function () {
                       this.paste();
                   }
               },
               @*{
                        type: 'button',
                        //icon: '',
                        icon: 'execute',
                        attr: 'title="Execute Engine"',
                        cls: 'floatRight btn btn-brand btn-icon-sm ENGINEExportRoleHide',
                        label: '',
                        listener: function () {
                            ExecuteEngineTC("@lTestCasegrid", @ViewBag.TestcaseId,@ViewBag.TestsuiteId, @ViewBag.TCstoryboradId,'@ViewBag.TCstoryboardname');
                        }
                    }*@
                   ]
               },
               complete: function () {
                   this.flex();
        },
        moveNode: function() {
            this.Checkbox('state').unCheckAll();
        },
        dragModel: {
            on: true,
                diHelper: ['StepsID'],
                dragNodes: function(rd, evt) {
                    debugger;
                    if (rd.pq_rowcls == "collapseBorder") {
                        swal.fire({
                            "title": "",
                            "text": "Please expand this pegwindow row to drag",
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                        return false;
                    }
                    var checkNodes = this.Checkbox('state').getCheckedNodes();
                    return (checkNodes.length && checkNodes.indexOf(rd) > -1) ? checkNodes : [rd];
                }
        },
        dropModel: {
            on: true,
          @*drop: function (evt, uiDrop) {
                var Drag = uiDrop.helper.data('Drag'),
                    uiDrag = Drag.getUI(),
                    rdDrag = uiDrag.rowData;
                var rowIndx = uiDrop.rowIndx + (uiDrop.ratioY() > 0.5 ? 1 : 0);
                gridobj['@lTestCasegrid'].moveNodes([rdDrag], rowIndx);
                gridobj['@lTestCasegrid'].toolbar().children()[4].removeAttribute("disabled");
            }*@
               },
           };

        gridobj['@lTestCasegrid'] = pq.grid("@lTestCasegrid", obj);
        setTimeout(function () {
            data = JSON.parse(jsonData);
            gridobj['@lTestCasegrid'].option("dataModel.data", data);
            gridobj['@lTestCasegrid'].refreshDataAndView();
        }, 1000);

        //#region RELOAD DATA GRID
        function ReloadDataGrid(tcgrid, tcid, tsid, Visibledatasetname) {
            $.ajax({
                url: "/TestCase/GetTestCaseDetails",
                type: "GET",
                data: {
                            testcaseId: tcid,
                    dataset : Visibledatasetname
                        },
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                    if (result.status == 1) {
                        result.data = JSON.parse(result.data);
                    console.log("Get testCase :" + new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds())
                    jsonData = "[";

                        if (result.data.length > 0) {

                            var datasetname = result.data[0].DATASETNAME;//.replace(/\s+/g, '_');--cherish
                            var datasetDesc = result.data[0].DATASETDESCRIPTION;
                        var datasetnames = [];
                        if (datasetname != null) {
                            datasetname = datasetname.replace(/\\/g, "\\\\");
                            //datasetname = datasetname.replace(",", "%%%");
                            datasetnames = datasetname.split(',');
                        }

                        var datasetdescs = [];
                        if (datasetDesc != null) {
                            datasetdescs = datasetDesc.split(',');
                        }

                        var datasetIds = result.data[0].DATASETIDS;
                        var datasetid = [];
                        if (datasetIds != null) {
                            datasetid = datasetIds.split(',');
                        }

                        for (var k = 0; k < datasetnames.length; k++) {
                            var l = 4;
                            datasetnames[k] = datasetnames[k].replace(/___/g, ',');
                            //*********************************************************************
                            // START - DYNAMIC - Define Headers for the PQGrid and Create JSON
                            //*********************************************************************
                            ExistDataSetRenameList.push({ TestCaseId:tcid,oldColumn: datasetnames[k], newColumn: datasetnames[k], detail: datasetdescs[k], datasetid: datasetid[k] });

                            var lTitle = datasetnames[k];
                            var OTitle = datasetnames[k];
                            lTitle = lTitle.replace(/___/g, ',');
                            if (datasetdescs[k] != null && datasetdescs[k].trim() != "") {
                                lTitle = '<span title="' + datasetdescs[k] + '">' + datasetnames[k] + '</span>';
                            }
                            var pDatasetName = Visibledatasetname;
                            var IsHidden = false;
                            if (pDatasetName != "" && pDatasetName != null) {
                                IsHidden = true;
                            }
                            if (pDatasetName != "" && pDatasetName != undefined) {
                                if (OTitle.toUpperCase() == pDatasetName.toUpperCase()) {
                                    IsHidden = false;
                                }
                            }


                            IsHidden = true;
                            l = l + 2;
                        }
                    }
                    console.log("col model completed :" + new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds())
                    newsteps = [];
                    for (var i = 0; i < result.data.length; i++) {
                        if (i != 0) {
                            jsonData += ",";
                        }
                        var datasetvalue = result.data[i].DATASETVALUE;
                        if (datasetvalue != null) {
                            datasetvalue = datasetvalue.replace(/&amp;/g, "&").replace("&lt;", "<").replace("&gt;", ">").replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace("&apos;", "'").replace(/"/g, "\\\"")/*.replace(",","##")*/;/*.replace(/\\\\/g, '\\')*//*.replace(/\\/g, '\\\\');*///.replace(/\\\\/g, '\\');
                        }
                        datasetvalues = [];
                        if (datasetvalue != null) {
                            datasetvalues = datasetvalue.split(',');

                        }

                        var DataSettingIds = [];
                        if (result.data[i].Data_Setting_Id != null) {
                            DataSettingIds = result.data[i].Data_Setting_Id.split(',');

                        }
                        var datasetskip = result.data[i].SKIP;
                        var datasetskipsTest = [];
                        var datasetskips = [];
                        if (datasetskip != null) {
                            datasetskipsTest = datasetskip.split(',');
                            for (var m = 0; m <= datasetskipsTest.length; m++) {
                                if (datasetskipsTest[m] == "4") {
                                    datasetskips.push(true);
                                }
                                else {
                                    datasetskips.push(false);
                                }
                            }
                        }
                        var objvalue = "";
                        var parametervalue = "";
                        var commentvalue = "";
                            if (result.data[i].object_happy_name != null) {
                                objvalue = result.data[i].object_happy_name;
                        }
                            if (result.data[i].parameter != null) {
                            parametervalue = result.data[i].parameter;
                            if (parametervalue != null) {
                                parametervalue = parametervalue.replace(/&amp;/g, "&").replace(/\n/g, "\\n").replace(/\\/g, "\\\\").replace(/\t/g, "\\t").replace("&lt;", "<").replace("&gt;", ">").replace(/"/g, "\\\"");/*.replace(/\\/g, '\\\\')*/;//replace(/"/g, '\\"');
                            }

                        }
                            if (result.data[i].COMMENT != null) {
                                commentvalue = result.data[i].COMMENT;
                            if (commentvalue != null) {
                                commentvalue = commentvalue.replace(/&amp;/g, "&").replace(/\n/g, "\\n").replace(/\\/g, "\\\\").replace(/\t/g, "\\t").replace("&lt;", "<").replace("&gt;", ">").replace(/"/g, "\\\"");
                            }
                        }

                        //*********************************************************************
                        // START - DYNAMIC - Define DATA for the PQGrid and Create JSON
                        //*********************************************************************
                            jsonData += '{"stepsID":"' + result.data[i].STEPS_ID + '", "keyword":"' + result.data[i].key_word_name + '", "object":"' + objvalue + '", "parameters":"'
                                + parametervalue + '", "comment":"' + commentvalue + '", "RUN_ORDER":"' + result.data[i].RUN_ORDER + '", "hdnVERSION":"' + result.data[i].VERSION + '", "hdnISAVAILABLE":"' + result.data[i].ISAVAILABLE + '"';

                        if (Version == 0) {
                            Version = result.data[i].VERSION;
                        }
                        if (IsAvailable == 0) {
                            IsAvailable = result.data[i].ISAVAILABLE;
                        }
                            EditedUserName = result.data[i].EditingUserName;
                        if (datasetvalues.length > 0 && datasetskips.length > 0) {
                            for (var j = 0; j < datasetnames.length; j++) {

                                if (datasetnames[j] != undefined) {
                                    var lSkip = false;
                                    var lvalue = "";
                                    if (datasetskips[j] != undefined) {
                                        lSkip = datasetskips[j];
                                    }
                                    if (datasetvalues[j] != undefined) {
                                        lvalue = datasetvalues[j];
                                        lvalue = lvalue.replace(/##/g, ",");
                                    }

                                    if (DataSettingIds[j] != undefined) {
                                        lsettingId = DataSettingIds[j];
                                    } else {
                                        lsettingId = "";
                                    }
                                    datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                    jsonData += ', "skip_' + datasetnames[j] + '":' + lSkip + ', "' + datasetnames[j] + '":"' + lvalue + '","DataSettingId_' + datasetnames[j] + '":"' + lsettingId + '"';
                                }
                            }
                        }
                        else if (datasetvalues.length == 0 && datasetskips.length > 0) {
                            for (var j = 0; j < datasetskips.length; j++) {
                                if (datasetnames[j] != undefined) {
                                    datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                    jsonData += ', "skip_' + datasetnames[j] + '":' + datasetskips[j] + ', "' + datasetnames[j] + '":' + '"", "DataSettingId_' + datasetnames[j] + '":"' + DataSettingIds[j] + '"';
                                }
                            }
                        }
                        else if (datasetvalues.length > 0 && datasetskips.length == 0) {
                            for (var j = 0; j < datasetvalues.length; j++) {
                                if (datasetnames[j] != undefined) {
                                    datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                    jsonData += ',"skip_' + datasetnames[j] + '": false , "' + datasetnames[j] + '":"' + datasetvalues[j] + '","DataSettingId_' + datasetnames[j] + '":"' + DataSettingIds[j] + '"';
                                }
                            }
                        }

                        // initialize the steps and run order array
                            newsteps.push({ "stepsid": result.data[i].STEPS_ID, "RUN_ORDER": i + 1, "RUN_ORDER_OLD": i + 1 });

                        jsonData += "}";
                        //*********************************************************************
                        // START - DYNAMIC - Define DATA for the PQGrid and Create JSON
                        //*********************************************************************

                    }
                    jsonData += "]";
                    console.log("Json data completed :" + new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds())
                    data = JSON.parse(jsonData);


                    gridobj[tcgrid].option("dataModel.data", data);
                    gridobj[tcgrid].refreshDataAndView();
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }

                }
            });


        }
        //#endregion

        //#region RELOAD COLUMNS
        function ReloadColumn(tcgrid, tcid, tsid, Visibledatasetname) {
            dt = [];
            dt.push({
                dataIndx: "state", copy: false, maxWidth: 30, minWidth: 30, align: "center", resizable: false, title: "", menuIcon: false, type: 'checkbox', sortable: false, editor: false, dataType: 'bool',
                render: function (ui) {
                    var rowData = ui.rowData,
                        dataIndx = ui.dataIndx;
                    rowData.pq_cellcls = rowData.pq_cellcls || {};
                    if (ui.rowData != undefined) {
                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                            return "<input type='checkbox' disabled  " + (ui.cellData ? "checked='checked'" : "") + " />";
                        } else {
                            return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                        }
                    } else {
                        return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                    }

                }
                   // return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";

            });
           dt.push({
               title: "", copy: false,minWidth: 30, maxWidth: 30, filter: { on: false, menuIcon: false },menuIcon: false,menuInHide: true, align: "left", halign: "center", sortable: false, nodrag: true,
            nodrop: true,resizable: false, editable: false,render: function (ui) {
                 var rowIndx = ui.rowIndx,
                    grid = this,
                    $cell = gridobj[tcgrid].getCell(ui);
                var lflagPegObject = false;
                if (ui.rowData.keyword != undefined) {
                    if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                        lflagPegObject = true;
                    }
                }
                var lChildCount = 0;
                if (lflagPegObject) {
                    //
                    var prowvisible = true;
                    var lDM = gridobj[tcgrid].option("dataModel");
                    ldata = lDM.data;
                    if ((rowIndx + 1) < lDM.data.length) {
                        if (ldata[rowIndx + 1].pq_hidden == true) {
                            prowvisible = false;
                        }
                    }
                    for (var k = 0; gridobj[tcgrid].pdata.length > k; k++) {
                        if (rowIndx < k) {

                            if (gridobj[tcgrid].pdata[k].keyword != undefined) {
                                if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() != "pegwindow") {
                                    lChildCount = lChildCount + 1;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    if (prowvisible) {
                        return "<button type='button' class='ui-icon-collapse-Row'></button>";
                    } else {
                        return "<button type='button' class='ui-icon-expand-Row'></button>";
                    }
                }
            },
             postRender: function (ui) {
                var rowIndx = ui.rowIndx;
               $cell = gridobj[tcgrid].getCell(ui);
                 if (ui.rowData.keyword != undefined) {
                    if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                        lflagPegObject = true;
                    }
                }
                 var lrowvisible;

                 $cell.find("button")
                     .bind("click", function () {
                        var lDM = gridobj[tcgrid].option("dataModel");
                            ldata = lDM.data;
                        if (ldata[rowIndx + 1].pq_hidden == true && lrowvisible == null) {
                            lrowvisible = true;
                        }
                        for (var k = 0; gridobj[tcgrid].pdata.length > k; k++) {

                    if (rowIndx < k) {
                        var lflagblank = true;
                        if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() == "pegwindow") {
                            lflagblank = false;
                            break;
                        }

                        if (lflagblank)
                        {
                            var DM = gridobj[tcgrid].option("dataModel");
                            data = DM.data;



                            if (lrowvisible == true) {

                                data[k].pq_hidden = false;
                                 gridobj[tcgrid].removeClass({ rowIndx: rowIndx, cls: 'collapseBorder' });
                            }
                            else {
                                data[k].pq_hidden = true;
                                 gridobj[tcgrid].addClass({ rowIndx: rowIndx, cls: 'collapseBorder' });
                            }
                        }
                        gridobj[tcgrid].refreshView();
                    }
                        }
                        lrowvisible = null;
                    });
            }

        });
              dt.push({
                  title: "", copy: false, copy: false,editable: false, minWidth: 40, maxWidth: 40, sortable: false, dataIndx: "IsDelete", menuInHide: true, menuIcon: false, sortable: false, filter: { on: false, menuIcon: false},
                  render: function (ui) {
                      if (ui.rowData != undefined) {
                          if (ui.rowData.pq_rowcls == "collapseBorder") {
                              return "<button type='button' class='delete_btn' disabled style='color:red;'></button>";
                          } else {
                              return "<button type='button' class='delete_btn' style='color:red;'></button>";
                          }
                      } else {
                          return "<button type='button' class='delete_btn' style='color:red;'></button>";
                      }
           //return "<button type='button' class='delete_btn' style='color:red;'></button>";
       },
                  postRender: function (ui) {
           var rowIndx = ui.rowIndx,
               grid = this,
               $cell = gridobj[tcgrid].getCell(ui);
           var lflagPegObject = false;
           if (ui.rowData.keyword != undefined) {
               if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                   lflagPegObject = true;
               }
           }
           $cell.find("button").button({ icons: { primary: 'ui-icon-close' } })
           .bind("click", function () {

               gridobj[tcgrid].addClass({ rowIndx: ui.rowIndx, cls: 'pq-row-delete' });


               //swal.fire({
               //    title: 'Delete',
               //    text: "Are you sure to delete this row No " + (rowIndx + 1) + "?",
               //    type: 'warning',
               //    showCancelButton: true,
               //    confirmButtonText: 'Yes, delete it!'
               //}).then(function (result) {
                   //if (result.value == true) {
                       ans = true;
                       gridobj[tcgrid].removeClass({ rowIndx: rowIndx, cls: 'pq-row-delete' });
                       if (ans) {
                           gridobj[tcgrid].deleteRow({ rowIndx: rowIndx });
                           delete newsteps[rowIndx];
                           if (lflagPegObject) {
                               var ldeletedRowIndex = rowIndx;
                               var lflagblank = true;
                               for (var k = 0; gridobj[tcgrid].pdata.length > k; k++) {
                                   if (ldeletedRowIndex <= k) {
                                       if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() == "pegwindow") {
                                           lflagblank = false;
                                       }

                                       if (lflagblank) {
                                           gridobj[tcgrid].updateRow({
                                               rowIndx: k,
                                               newRow: { 'object': '' }
                                           });
                                       }
                                   }
                               }
                           }
                       }
                  // } else {
                    //   gridobj[tcgrid].removeClass({ rowIndx: rowIndx, cls: 'pq-row-delete' });
                   //}
              // });
           });
       }
   });
   dt.push({
       title: "StepsID", copy: false,hidden: true,menuInHide: true,sortable: false, dataType: "int", dataIndx: "stepsID", align: "center",
   });
   dt.push({
       title: "RUN_ORDER", copy: false, hidden: true, dataType: "int", dataIndx: "RUN_ORDER", align: "center", menuInHide: false, sortable: false,
   });


            //dt.push({ title: "KeywordId", dataIndx: 'KeywordId', hidden: true }),
   dt.push({
     title: "Keyword", dataIndx: "keyword", dataType: "string", align: "left", menuInHide: true, halign: "center", nodrag: true, nodrop: true, sortable: false, resizable: true, width: @ViewBag.keywordwidth, minWidth: 20,
       editor:
       {
           type: 'select',
           valueIndx: "value",
           init: function (ui) {
               ui.$cell.find("select").pqSelect();
             //  alert("1");
           },
           labelIndx: "text",
           //mapIndices: { "text": "Keyword", "value": "KeywordId" },
           options: function (ui) {
               var List = [];
               var lGridList = [];
               for (i = 0; i < gridobj[tcgrid].pdata.length; i++) {
                   lGridList.push({ "Id": gridobj[tcgrid].pdata[i].stepsID, "Keyword": gridobj[tcgrid].pdata[i].keyword});
               }
               var KeywordList = {};
               KeywordList.stepId = ui.rowIndx + 1;
               KeywordList.Grid = JSON.stringify(lGridList);
                var lPegStepId = 0;
               var lstepId = ui.rowIndx + 1;
               var keywordsList;
               for (i = 0; i < gridobj[tcgrid].pdata.length; i++)
               {
                   var item = gridobj[tcgrid].pdata[i];
                   if (item.keyword) {

                            if (item.keyword.toLowerCase() == "pegwindow" && lPegStepId == 0) {
                                lPegStepId = i + 1;
                                break;

                        }
                    }

                    i++;
               }
               if (lstepId == 1 || lstepId < lPegStepId || lPegStepId == 0) {
                   keywordsList = @Html.Raw(ViewBag.KeywordsPegwindowList);

               }
               else {
                   keywordsList = @Html.Raw(ViewBag.KeywordsList);
               }
               keywords.push({ "value": "", "text": "" });
               $.each(keywordsList, function (key, value) {
                   keywords.push({ "value": value.KeywordName, "text": value.KeywordName });
               });
               List = keywords;
               keywords = [];
               //$.ajax({
               //    url: "/TestCase/GetKeywordsList",
               //    type: "POST",
               //   // data: { stepId: ui.rowIndx + 1, lGrid: JSON.stringify(lGridList) },
               //    data: '{KeywordList: ' + JSON.stringify(KeywordList) + '}',
               //    contentType: "application/json;charset=utf-8",
               //    dataType: "json",
               //    async: false,
               //    success: function (result) {
               //        if (result.status == 1) {
               //            if (result.data != null && result.data.length > 0) {
               //                keywords.push({ "value": "", "text": "" });
               //                keywordValidate.push("");
               //                for (var i = 0; i < result.data.length; i++) {
               //                    keywords.push({ "value": result.data[i].KeywordName, "text": result.data[i].KeywordName });
               //                    keywordValidate.push(result.data[i].KeywordName);
               //                }
               //                List = keywords;
               //                keywords = [];
               //            }
               //        }
               //        else if (result.status == 0) {
               //            swal.fire({
               //                "title": "",
               //                "text": result.message,
               //                "icon": "error",
               //                "onClose": function (e) {
               //                    console.log('on close event fired!');
               //                }
               //            });
               //        }
               //    },
               //    error(a, b, c) {
               //    }
               //});
               return List;
           }
       },
       editable: function (ui) {
           if (ui.rowData != undefined) {
               if (ui.rowData.pq_rowcls == "collapseBorder") {
                   return false;
               } else {
                   return true;
               }
           }
           else {
               return true;
           }
       },
       //validations: [
       //    { type: 'minLen', value: 1, msg: "Required" },

       //],
       filter: { crules: [{ condition: 'range' }] }
   });
   //------------------------------------------

   //------------------------------------------
   // Object Column
   //------------------------------------------
   dt.push({
     title: "Object", dataIndx: "object", dataType: "string", align: "left", menuInHide: true, halign: "center", sortable: false, resizable: true, nodrag: true, nodrop: true, width: @ViewBag.objectwidth, minWidth: 20,
       editor:
       {
           type: 'select',
           valueIndx: "value",
           init: function (ui) {
               var lchangedRowIndex = ui.rowIndx;
               ui.$cell.find("select").pqSelect();
               ui.$editor.on('change', function () {
                   var lflagblank = false;
                   for (var k = 0; gridobj[tcgrid].pdata.length > k; k++){
                       if (lchangedRowIndex == k) {
                           if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() == "pegwindow") {
                               lflagblank = true;
                           }
                       }

                       if (lchangedRowIndex < k) {
                           if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() == "pegwindow") {
                               lflagblank = false;
                           }

                           if (lflagblank) {
                               gridobj[tcgrid].updateRow({
                                   rowIndx: k,
                                   newRow: { 'object': '' }
                               });
                           }
                       }
               }

               });
           },
           labelIndx: "text",
           options: function (ui) {
               var List = [];
               var lGridList = [];
               for (i = 0; i < gridobj[tcgrid].pdata.length; i++) {
                   lGridList.push({ "Id": i + 1,"StepId": gridobj[tcgrid].pdata[i].stepsID, "Keyword": gridobj[tcgrid].pdata[i].keyword, "Object": gridobj[tcgrid].pdata[i].object });
               }

               if (ui.rowData.keyword == "PegWindow") {
                   var objectlist = @Html.Raw(ViewBag.ObjectList);
                   objects.push({ "value": "", "text": "" });
                   objectValidate.push("");
                   $.each(objectlist, function (key, value) {
                       objects.push({ "value": value.ObjectName, "text": value.ObjectName });
                       objectValidate.push(value.ObjectName);
                   });

                   List = objects;
                   objects = [];
               } else {
                   var ObjectList = {};
                   ObjectList.stepId = ui.rowIndx + 1;
                   ObjectList.Grid = JSON.stringify(lGridList);
                   ObjectList.TestCaseId = tcid;
                   $.ajax({
                       url: "/TestCase/GetObjectsList",
                       type: "POST",
                       data: '{ObjectList: ' + JSON.stringify(ObjectList) + '}',
                       contentType: "application/json;charset=utf-8",
                       dataType: "json",
                       async: false,
                       success: function (result) {
                           if (result.status == 1) {
                               if (result.data != null && result.data.length > 0) {
                                   objects.push({ "value": "", "text": "" });
                                   objectValidate.push("");
                                   for (var i = 0; i < result.data.length; i++) {
                                       objects.push({ "value": result.data[i].ObjectName, "text": result.data[i].ObjectName });
                                       objectValidate.push(result.data[i].ObjectName);
                                   }
                                   List = objects;
                                   objects = [];
                               }
                           }
                           else if (result.status == 0) {
                               swal.fire({
                                   "title": "",
                                   "text": result.message,
                                   "icon": "error",
                                   "onClose": function (e) {
                                       console.log('on close event fired!');
                                   }
                               });

                           }
                       },
                       error(a, b, c) {
                       }
                   });
               }

               return List;
           }
       },
       editable: function (ui) {

           if (ui.rowData != undefined) {
               if (ui.rowData.pq_rowcls == "collapseBorder") {
                   return false;
               } else {
                   return true;
               }
           } else {
               return true;
           }
       },
       filter: { crules: [{ condition: 'contain' }] },

   });
            dt.push({
                title: "Parameters", menuInHide: true, align: "left", halign: "center", sortable: false, nodrag: true, width: @ViewBag.parameterswidth, minWidth: 20, nodrop: true, dataIndx: "parameters", filter: { crules: [{ condition: 'contain' }] }, resizable: true, editable: function (ui) {
                    if (ui.rowData != undefined) {
                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                            return false;
                        } else {
                            return true;
                        }
                    } else {
                        return true;
                    }
                },
            });
        dt.push({
            title: "Comment", dataType: "string", align: "left", halign: "center", sortable: false, dataIndx: "comment", width: @ViewBag.commentwidth, minWidth: 20, nodrag: true, nodrop: true, menuInHide: true, resizable: true,
            editable: function (ui) {
                if (ui.rowData != undefined) {
                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                        return false;
                    } else {
                        return true;
                    }
                } else {
                    return true;
                }
            },
            filter: { crules: [{ condition: 'contain' }] },
            resizable: true
        });
                dt.push({
                    title: "hdnVersionId", copy: false,dataType: "int", dataIndx: "VERSION", hidden: true, menuInHide: true, sortable: false
                });
                dt.push({
                    title: "hdnISAVAILABLE", copy: false,dataType: "int", dataIndx: "ISAVAILABLE", hidden: true, menuInHide: true, sortable: false
                });

              $.ajax({
                  url: "/TestCase/GetTestCaseDetails",
                  type: "GET",
                  data: {
                      testcaseId: tcid,
                      dataset: Visibledatasetname
                  },
                        contentType: "application/json;charset=utf-8",
                        async: false,
                        dataType: "json",
                        success: function (result) {
                            if (result.status == 1 ) {
                                result.data = JSON.parse(result.data);

                                if (result.data.length > 0) {

                                    var datasetname = result.data[0].DATASETNAME;//.replace(/\s+/g, '_');--cherish
                                    var datasetDesc = result.data[0].DATASETDESCRIPTION;
                                var datasetnames = [];
                                if (datasetname != null) {
                                    datasetname = datasetname.replace(/\\/g, "\\\\");
                                    //datasetname = datasetname.replace(",", "%%%");
                                    datasetnames = datasetname.split(',');
                                }

                                var datasetdescs = [];
                                if (datasetDesc != null) {
                                    datasetdescs = datasetDesc.split(',');
                                }

                                var datasetIds = result.data[0].DATASETIDS;
                                var datasetid = [];
                                if (datasetIds != null) {
                                    datasetid = datasetIds.split(',');
                                }

                                for (var k = 0; k < datasetnames.length; k++) {
                                    var l = 4;
                                    datasetnames[k] = datasetnames[k].replace(/___/g, ',');
                                    //*********************************************************************
                                    // START - DYNAMIC - Define Headers for the PQGrid and Create JSON
                                    //*********************************************************************
                                    ExistDataSetRenameList.push({ TestCaseId:tcid, oldColumn: datasetnames[k], newColumn: datasetnames[k], detail: datasetdescs[k], datasetid: datasetid[k] });

                                    var lTitle = datasetnames[k];
                                    var OTitle = datasetnames[k];
                                    lTitle = lTitle.replace(/___/g, ',');
                                    if (datasetdescs[k] != null && datasetdescs[k].trim() != "") {
                                        lTitle = '<span title="' + datasetdescs[k] + '">' + datasetnames[k] + '</span>';
                                    }

                                    var pDatasetName = Visibledatasetname;

                                    var IsHidden = false;
                                    if (pDatasetName != "" && pDatasetName != null) {
                                        IsHidden = true;
                                    }
                                    if (pDatasetName != "") {
                                        if (OTitle.toUpperCase() == pDatasetName.toUpperCase()) {
                                            IsHidden = false;
                                        }
                                    }

                                    dt.push({
                                        title: lTitle, clsHead: datasetid[k], menuInClose: true, sortable: false, resizable: true, hidden: IsHidden, minWidth: 50, width: 250,
                                        align: "center", colModel: [{
                                            title: "", width: "2%", dataType: "bool", sortable: false,
                                            render: function (ui) {
                                                var rowData = ui.rowData,
                                                    dataIndx = ui.dataIndx;
                                                ldataIndx = datasetnames[k];

                                                rowData.pq_cellcls = rowData.pq_cellcls || {};
                                                if (rowData[dataIndx] == true) {
                                                    if (rowData.pq_cellcls[dataIndx] == undefined) {
                                                        rowData.pq_cellcls[dataIndx] = 'grey';
                                                    } else {
                                                        rowData.pq_cellcls[dataIndx] = 'grey ' + rowData.pq_cellcls[dataIndx].replace("grey", "");
                                                    }
                                                    return "<input  type='checkbox' " + (ui.cellData ? "checked='checked'" : "") + " />";
                                                }
                                                else {
                                                    if (rowData.pq_cellcls[dataIndx] == undefined) {
                                                        rowData.pq_cellcls[dataIndx] = '';
                                                    } else {
                                                        rowData.pq_cellcls[dataIndx] = rowData.pq_cellcls[dataIndx].replace("grey", "");
                                                    }
                                                    return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                                                }
                                            },
                                            align: "center",
                                            dataIndx: "skip_" + datasetnames[k],
                                            exportRender: false,
                                            editor: false,
                                            type: 'checkbox',
                                            nodrag: true,
                                            nodrop: true,
                                            cls: 'hideRightborder',
                                            editable: function (ui) {
                                                if (ui.rowData != undefined) {
                                                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                                                        return false;
                                                    } else {
                                                        return true;
                                                    }
                                                } else {
                                                    return true;
                                                }
                                            },
                                            //resizable: true
                                        },
                                        {
                                            title: "Data", sortable: false,
                                            minWidth: 20, width: 200,
                                            dataType: "string",
                                            dataIndx: datasetnames[k],
                                            cls: 'hideLeftborder',
                                            nodrag: true,
                                            nodrop: true,
                                            filter: { crules: [{ condition: 'contain' }] },
                                            resizable: true,
                                            render: function (ui) {
                                                var column = this.getColumn({ dataIndx: 'skip_' + ui.column.dataIndx }),
                                                    state = ui.rowData["skip_" + ui.dataIndx];
                                                if (column != undefined) {
                                                    //check = column.cb.check,
                                                    //    uncheck = column.cb.uncheck;
                                                    if (state) {
                                                        return { style: "background:#c0c0c0;" }
                                                    }
                                                    else  {
                                                        return { style: "" }
                                                    }
                                                }
                                            },
                                            editable: function (ui) {
                                                if (ui.rowData != undefined) {
                                                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                                                        return false;
                                                    } else {
                                                        return true;
                                                    }
                                                } else {
                                                    return true;
                                                }
                                            },
                                        },
                                        { title: "hdnId", dataType: "string",copy:false, dataIndx: "DataSettingId_" + datasetnames[k], hidden: true, menuInHide: true, sortable: false, }
                                        ]
                                    });


                                    IsHidden = true;
                                    l = l + 2;
                                }
                            }

                           gridobj[tcgrid].refreshCM(dt);
                             gridobj[tcgrid].refresh();
                             }
                            else if (result.status == 0) {
                                swal.fire({
                                    "title": "",
                                    "text": result.message,
                                    "icon": "error",
                                    "onClose": function (e) {
                                        console.log('on close event fired!');
                                    }
                                });
                            }

                        }
                    });
        }
        //#endregion

    function ReloadGrid(tcgrid, tcid, tsid, Visibledatasetname) {

            dt = [];
            data = [];
        jsonData = "[";
        dt.push({
            dataIndx: "state", copy: false, maxWidth: 30, minWidth: 30, align: "center", resizable: false, title: "", menuIcon: false, type: 'checkbox', sortable: false, editor: false, dataType: 'bool',
            render: function (ui) {
                var rowData = ui.rowData,
                    dataIndx = ui.dataIndx;
                rowData.pq_cellcls = rowData.pq_cellcls || {};
                if (ui.rowData != undefined) {
                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                        return "<input type='checkbox' disabled  " + (ui.cellData ? "checked='checked'" : "") + " />";
                    } else {
                        return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                    }
                } else {
                    return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                }

            }
               // return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";

        });
            dt.push({
                title: "", minWidth: 30, copy: false,maxWidth: 30, filter: { on: false, menuIcon: false }, menuIcon: false, menuInHide: true, align: "left", halign: "center", sortable: false, nodrag: true,
                nodrop: true, resizable: false, editable: false, render: function (ui) {
                    var rowIndx = ui.rowIndx,
                        grid = this,
                        $cell = gridobj[tcgrid].getCell(ui);
                    var lflagPegObject = false;
                    if (ui.rowData.keyword != undefined) {
                        if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                            lflagPegObject = true;
                        }
                    }
                    var lChildCount = 0;
                    if (lflagPegObject) {
                        //
                        var prowvisible = true;
                        var lDM = gridobj[tcgrid].option("dataModel");
                        ldata = lDM.data;
                        if ((rowIndx + 1) < lDM.data.length) {
                            if (ldata[rowIndx + 1].pq_hidden == true) {
                                prowvisible = false;
                            }
                        }
                        for (var k = 0; gridobj[tcgrid].pdata.length > k; k++) {
                            if (rowIndx < k) {

                                if (gridobj[tcgrid].pdata[k].keyword != undefined) {
                                    if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() != "pegwindow") {
                                        lChildCount = lChildCount + 1;
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                        if (prowvisible) {
                            return "<button type='button' class='ui-icon-collapse-Row'></button>";
                        } else {
                            return "<button type='button' class='ui-icon-expand-Row'></button>";
                        }
                    }
                },
                postRender: function (ui) {
                    var rowIndx = ui.rowIndx;
                    $cell = gridobj[tcgrid].getCell(ui);
                    if (ui.rowData.keyword != undefined) {
                        if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                            lflagPegObject = true;
                        }
                    }
                    var lrowvisible;

                    $cell.find("button")
                        .bind("click", function () {
                            var lDM = gridobj[tcgrid].option("dataModel");
                            ldata = lDM.data;
                            if (ldata[rowIndx + 1].pq_hidden == true && lrowvisible == null) {
                                lrowvisible = true;
                            }
                            for (var k = 0; gridobj[tcgrid].pdata.length > k; k++) {

                                if (rowIndx < k) {
                                    var lflagblank = true;
                                    if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() == "pegwindow") {
                                        lflagblank = false;
                                        break;
                                    }

                                    if (lflagblank) {
                                        var DM = gridobj[tcgrid].option("dataModel");
                                        data = DM.data;



                                        if (lrowvisible == true) {

                                            data[k].pq_hidden = false;
                                            gridobj[tcgrid].removeClass({ rowIndx: rowIndx, cls: 'collapseBorder' });
                                        }
                                        else {
                                            data[k].pq_hidden = true;
                                            gridobj[tcgrid].addClass({ rowIndx: rowIndx, cls: 'collapseBorder' });
                                        }
                                    }
                                    gridobj[tcgrid].refreshView();
                                }
                            }
                            lrowvisible = null;
                        });
                }

            });
            dt.push({
                title: "", editable: false, copy: false,minWidth: 40, maxWidth: 40, sortable: false, dataIndx: "IsDelete", menuInHide: true, menuIcon: false, sortable: false, filter: { on: false, menuIcon: false },
                render: function (ui) {
                    if (ui.rowData != undefined) {
                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                            return "<button type='button' class='delete_btn' disabled style='color:red;'></button>";
                        } else {
                            return "<button type='button' class='delete_btn' style='color:red;'></button>";
                        }
                    } else {
                        return "<button type='button' class='delete_btn' style='color:red;'></button>";
                    }
                 //   return "<button type='button' class='delete_btn' style='color:red;'></button>";
                },
                postRender: function (ui) {
                    var rowIndx = ui.rowIndx,
                        grid = this,
                        $cell = gridobj[tcgrid].getCell(ui);
                    var lflagPegObject = false;
                    if (ui.rowData.keyword != undefined) {
                        if (ui.rowData.keyword.toLowerCase() == "pegwindow") {
                            lflagPegObject = true;
                        }
                    }
                    $cell.find("button").button({ icons: { primary: 'ui-icon-close' } })
                        .bind("click", function () {

                            gridobj[tcgrid].addClass({ rowIndx: ui.rowIndx, cls: 'pq-row-delete' });


                            //swal.fire({
                            //    title: 'Delete',
                            //    text: "Are you sure to delete this row No " + (rowIndx + 1) + "?",
                            //    type: 'warning',
                            //    showCancelButton: true,
                            //    confirmButtonText: 'Yes, delete it!'
                            //}).then(function (result) {
                               // if (result.value == true) {
                                    ans = true;
                                    gridobj[tcgrid].removeClass({ rowIndx: rowIndx, cls: 'pq-row-delete' });
                                    if (ans) {
                                        gridobj[tcgrid].deleteRow({ rowIndx: rowIndx });
                                        delete newsteps[rowIndx];
                                        if (lflagPegObject) {
                                            var ldeletedRowIndex = rowIndx;
                                            var lflagblank = true;
                                            for (var k = 0; gridobj[tcgrid].pdata.length > k; k++) {
                                                if (ldeletedRowIndex <= k) {
                                                    if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() == "pegwindow") {
                                                        lflagblank = false;
                                                    }

                                                    if (lflagblank) {
                                                        gridobj[tcgrid].updateRow({
                                                            rowIndx: k,
                                                            newRow: { 'object': '' }
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                //} else {
                                  //  gridobj[tcgrid].removeClass({ rowIndx: rowIndx, cls: 'pq-row-delete' });
                                //}
                           // });
                        });
                }
            });
            dt.push({
                title: "StepsID", copy: false, hidden: true, menuInHide: true, sortable: false, dataType: "int", dataIndx: "stepsID", align: "center",
            });
            dt.push({
                title: "RUN_ORDER", copy: false, hidden: true, dataType: "int", dataIndx: "RUN_ORDER", align: "center", menuInHide: false, sortable: false,
            });

        //dt.push({ title: "KeywordId", dataIndx: 'KeywordId', hidden: true }),

            dt.push({
                title: "Keyword", dataIndx: "keyword", dataType: "string", align: "left", menuInHide: true, halign: "center", nodrag: true, nodrop: true, sortable: false, resizable: true, width: @ViewBag.keywordwidth, minWidth: 20,
                editable: function (ui) {
                    if (ui.rowData != undefined) {
                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                            return false;
                        } else {
                            return true;
                        }
                    } else {
                        return true;
                    }
                },
                editor:
                {
                    type: 'select',
                    valueIndx: "value",
                    init: function (ui) {
                        ui.$cell.find("select").pqSelect();
                        //  alert("1");
                    },
                    labelIndx: "text",
                    //mapIndices: { "text": "Keyword", "value": "KeywordId" },
                    options: function (ui) {
                        var List = [];
                        var lGridList = [];
                        for (i = 0; i < gridobj[tcgrid].pdata.length; i++) {
                            lGridList.push({ "Id": gridobj[tcgrid].pdata[i].stepsID, "Keyword": gridobj[tcgrid].pdata[i].keyword });
                        }
                        var KeywordList = {};
                        KeywordList.stepId = ui.rowIndx + 1;
                        KeywordList.Grid = JSON.stringify(lGridList);
                        var lPegStepId = 0;
               var lstepId = ui.rowIndx + 1;
               var keywordsList;
               for (i = 0; i < gridobj[tcgrid].pdata.length; i++)
               {
                   var item = gridobj[tcgrid].pdata[i];
                   if (item.keyword) {

                            if (item.keyword.toLowerCase() == "pegwindow" && lPegStepId == 0) {
                                lPegStepId = i + 1;
                                break;
                         }
                        }


                    i++;
               }
               if (lstepId == 1 || lstepId < lPegStepId || lPegStepId == 0) {
                   keywordsList = @Html.Raw(ViewBag.KeywordsPegwindowList);

               }
               else {
                   keywordsList = @Html.Raw(ViewBag.KeywordsList);
               }
               keywords.push({ "value": "", "text": "" });
               $.each(keywordsList, function (key, value) {
                   keywords.push({ "value": value.KeywordName, "text": value.KeywordName });
               });
               List = keywords;
               keywords = [];
                        //$.ajax({
                        //    url: "/TestCase/GetKeywordsList",
                        //    type: "POST",
                        //    // data: { stepId: ui.rowIndx + 1, lGrid: JSON.stringify(lGridList) },
                        //    data: '{KeywordList: ' + JSON.stringify(KeywordList) + '}',
                        //    contentType: "application/json;charset=utf-8",
                        //    dataType: "json",
                        //    async: false,
                        //    success: function (result) {
                        //        if (result.status == 1) {
                        //            if (result.data != null && result.data.length > 0) {
                        //                keywords.push({ "value": "", "text": "" });
                        //                keywordValidate.push("");
                        //                for (var i = 0; i < result.data.length; i++) {
                        //                    keywords.push({ "value": result.data[i].KeywordName, "text": result.data[i].KeywordName });
                        //                    keywordValidate.push(result.data[i].KeywordName);
                        //                }
                        //                List = keywords;
                        //                keywords = [];
                        //            }
                        //        }
                        //        else if (result.status == 0) {
                        //            swal.fire({
                        //                "title": "",
                        //                "text": result.message,
                        //                "icon": "error",
                        //                "onClose": function (e) {
                        //                    console.log('on close event fired!');
                        //                }
                        //            });
                        //        }
                        //    },
                        //    error(a, b, c) {
                        //    }
                        //});
                        return List;
                    }
                },
                //validations: [
                //    { type: 'minLen', value: 1, msg: "Required" },

                //],
                filter: { crules: [{ condition: 'range' }] }
            });
            //------------------------------------------

            //------------------------------------------
            // Object Column
            //------------------------------------------
            dt.push({
                title: "Object", dataIndx: "object", dataType: "string", align: "left", menuInHide: true, halign: "center", sortable: false, resizable: true, nodrag: true, nodrop: true, width: @ViewBag.objectwidth, minWidth: 20,
                editable: function (ui) {
                    if (ui.rowData != undefined) {
                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                            return false;
                        } else {
                            return true;
                        }
                    } else {
                        return true;
                    }
                },
                editor:
                {
                    type: 'select',
                    valueIndx: "value",
                    init: function (ui) {
                        var lchangedRowIndex = ui.rowIndx;
                        ui.$cell.find("select").pqSelect();
                        ui.$editor.on('change', function () {
                            var lflagblank = false;
                            for (var k = 0; gridobj[tcgrid].pdata.length > k; k++) {
                                if (lchangedRowIndex == k) {
                                    if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() == "pegwindow") {
                                        lflagblank = true;
                                    }
                                }

                                if (lchangedRowIndex < k) {
                                    if (gridobj[tcgrid].pdata[k].keyword.toLowerCase() == "pegwindow") {
                                        lflagblank = false;
                                    }

                                    if (lflagblank) {
                                        gridobj[tcgrid].updateRow({
                                            rowIndx: k,
                                            newRow: { 'object': '' }
                                        });
                                    }
                                }
                            }

                        });
                    },
                    labelIndx: "text",
                    options: function (ui) {
                        var List = [];
                        var lGridList = [];
                        for (i = 0; i < gridobj[tcgrid].pdata.length; i++) {
                            lGridList.push({ "Id": i + 1, "StepId": gridobj[tcgrid].pdata[i].stepsID, "Keyword": gridobj[tcgrid].pdata[i].keyword, "Object": gridobj[tcgrid].pdata[i].object });
                        }

                        if (ui.rowData.keyword == "PegWindow") {
                            var objectlist = @Html.Raw(ViewBag.ObjectList);
                            objects.push({ "value": "", "text": "" });
                            objectValidate.push("");
                            $.each(objectlist, function (key, value) {
                                objects.push({ "value": value.ObjectName, "text": value.ObjectName });
                                objectValidate.push(value.ObjectName);
                            });

                            List = objects;
                            objects = [];
                        } else {
                            var ObjectList = {};
                            ObjectList.stepId = ui.rowIndx + 1;
                            ObjectList.Grid = JSON.stringify(lGridList);
                            ObjectList.TestCaseId = tcid;
                            $.ajax({
                                url: "/TestCase/GetObjectsList",
                                type: "POST",
                                data: '{ObjectList: ' + JSON.stringify(ObjectList) + '}',
                                contentType: "application/json;charset=utf-8",
                                dataType: "json",
                                async: false,
                                success: function (result) {
                                    if (result.status == 1) {
                                        if (result.data != null && result.data.length > 0) {
                                            objects.push({ "value": "", "text": "" });
                                            objectValidate.push("");
                                            for (var i = 0; i < result.data.length; i++) {
                                                objects.push({ "value": result.data[i].ObjectName, "text": result.data[i].ObjectName });
                                                objectValidate.push(result.data[i].ObjectName);
                                            }
                                            List = objects;
                                            objects = [];
                                        }
                                    }
                                    else if (result.status == 0) {
                                        swal.fire({
                                            "title": "",
                                            "text": result.message,
                                            "icon": "error",
                                            "onClose": function (e) {
                                                console.log('on close event fired!');
                                            }
                                        });
                                    }
                                },
                                error(a, b, c) {
                                }
                            });
                        }


                        return List;
                    }
                },
                filter: { crules: [{ condition: 'contain' }] },

            });
            dt.push({
                title: "Parameters", menuInHide: true, align: "left", halign: "center", sortable: false, width: @ViewBag.parameterswidth, minWidth: 20, nodrag: true, nodrop: true, dataIndx: "parameters", filter: { crules: [{ condition: 'contain' }] }, resizable: true,
                editable: function (ui) {
                    if (ui.rowData != undefined) {
                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                            return false;
                        } else {
                            return true;
                        }
                    } else {
                        return true;
                    }
                }});
            dt.push({
              title: "Comment", dataType: "string", align: "left", halign: "center", sortable: false, dataIndx: "comment", nodrag: true, nodrop: true, width: @ViewBag.commentwidth, minWidth: 20, menuInHide: true, resizable: true,
                filter: { crules: [{ condition: 'contain' }] },
                editable: function (ui) {
                    if (ui.rowData != undefined) {
                        if (ui.rowData.pq_rowcls == "collapseBorder") {
                            return false;
                        } else {
                            return true;
                        }
                    } else {
                        return true;
                    }
                },
                resizable: true
            });
            dt.push({
                title: "hdnVersionId", copy: false,dataType: "int", dataIndx: "VERSION", hidden: true, menuInHide: true, sortable: false
            });
            dt.push({
                title: "hdnISAVAILABLE", copy: false,dataType: "int", dataIndx: "ISAVAILABLE", hidden: true, menuInHide: true, sortable: false
            });

            $.ajax({
                url: "/TestCase/GetTestCaseDetails",
                type: "GET",
                data: {
                    testcaseId: tcid,
                    dataset: Visibledatasetname
                },
                contentType: "application/json;charset=utf-8",
                async: false,
                dataType: "json",
                success: function (result) {

                    if (result.status == 1) {
                        result.data = JSON.parse(result.data);
                    //result = result.Table;

                        if (result.data.length > 0) {

                            var datasetname = result.data[0].DATASETNAME;//.replace(/\s+/g, '_');--cherish
                        console.log(datasetname)
                            var datasetDesc = result.data[0].DATASETDESCRIPTION;
                        var datasetnames = [];
                        if (datasetname != null) {
                            datasetname = datasetname.replace(/\\/g, "\\\\");
                            datasetnames = datasetname.split(',');
                        }

                        var datasetdescs = [];
                        if (datasetDesc != null) {
                            datasetdescs = datasetDesc.split(',');
                        }

                            var datasetIds = result.data[0].DATASETIDS;
                        var datasetid = [];
                        if (datasetIds != null) {
                            datasetid = datasetIds.split(',');
                        }
                        console.log(datasetnames)
                        console.log("8:"); console.log(ExistDataSetRenameList);
                        for (var k = 0; k < datasetnames.length; k++) {
                            var l = 4;
                            datasetnames[k] = datasetnames[k].replace(/___/g, ',');
                            //*********************************************************************
                            // START - DYNAMIC - Define Headers for the PQGrid and Create JSON
                            //*********************************************************************
                            ExistDataSetRenameList.push({ TestCaseId:tcid,oldColumn: datasetnames[k], newColumn: datasetnames[k], detail: datasetdescs[k], datasetid: datasetid[k] });
                            console.log("9:"); console.log(ExistDataSetRenameList);
                            var lTitle = datasetnames[k];
                            var OTitle = datasetnames[k];
                            lTitle = lTitle.replace(/___/g, ',');
                            if (datasetdescs[k] != null && datasetdescs[k].trim() != "") {
                                lTitle = '<span title="' + datasetdescs[k] + '">' + datasetnames[k] + '</span>';
                            }

                            var pDatasetName = Visibledatasetname;

                            var IsHidden = false;
                            if (pDatasetName != "" && pDatasetName != null) {
                                IsHidden = true;
                            }
                            if (pDatasetName != "") {
                                if (OTitle.toUpperCase() == pDatasetName.toUpperCase()) {
                                    IsHidden = false;
                                }
                            }

                            dt.push({
                                title: lTitle, clsHead: datasetid[k], menuInClose: true, sortable: false, resizable: true, hidden: IsHidden, minWidth: 50, width: 250,

                                align: "center", colModel: [{
                                    title: "", width: "2%", dataType: "bool", sortable: false,
                                    render: function (ui) {
                                        debugger;
                                        var rowData = ui.rowData,
                                            dataIndx = ui.dataIndx;
                                        ldataIndx = datasetnames[k];

                                        rowData.pq_cellcls = rowData.pq_cellcls || {};
                                        if (rowData[dataIndx] == true) {
                                            if (rowData.pq_cellcls[dataIndx] == undefined) {
                                                rowData.pq_cellcls[dataIndx] = 'grey';
                                            } else {
                                                rowData.pq_cellcls[dataIndx] = 'grey ' + rowData.pq_cellcls[dataIndx].replace("grey", "");
                                            }
                                            return "<input  type='checkbox' " + (ui.cellData ? "checked='checked'" : "") + " />";
                                        }
                                        else {
                                            if (rowData.pq_cellcls[dataIndx] == undefined) {
                                                rowData.pq_cellcls[dataIndx] = '';
                                            } else {
                                                rowData.pq_cellcls[dataIndx] = rowData.pq_cellcls[dataIndx].replace("grey", "");
                                            }
                                            return "<input type='checkbox'   " + (ui.cellData ? "checked='checked'" : "") + " />";
                                        }
                                    },
                                    align: "center",
                                    dataIndx: "skip_" + datasetnames[k],
                                    exportRender: false,
                                    editor: false,
                                    type: 'checkbox',
                                    nodrag: true,
                                    nodrop: true,
                                    cls: 'hideRightborder',
                                    editable: function (ui) {
                                        if (ui.rowData != undefined) {
                                            if (ui.rowData.pq_rowcls == "collapseBorder") {
                                                return false;
                                            } else {
                                                return true;
                                            }
                                        } else {
                                            return true;
                                        }
                                    },
                                   // resizable: true
                                },
                                {
                                    title: "Data", sortable: false,
                                    minWidth: 20, width: 200,
                                    dataType: "string",
                                    dataIndx: datasetnames[k],
                                    cls: 'hideLeftborder',
                                    nodrag: true,
                                    nodrop: true,
                                    filter: { crules: [{ condition: 'contain' }] },
                                    resizable: true,
                                    render: function (ui) {
                                        var column = this.getColumn({ dataIndx: 'skip_' + ui.column.dataIndx }),
                                            state = ui.rowData["skip_" + ui.dataIndx];
                                        if (column != undefined) {
                                            //check = column.cb.check,
                                            //    uncheck = column.cb.uncheck;
                                            if (state) {
                                                return { style: "background:#c0c0c0;" }
                                            }
                                            else {
                                                return { style: "" }
                                            }
                                        }
                                    },
                                    editable: function (ui) {
                                        if (ui.rowData != undefined) {
                                            if (ui.rowData.pq_rowcls == "collapseBorder") {
                                                return false;
                                            } else {
                                                return true;
                                            }
                                        } else {
                                            return true;
                                        }
                                    },
                                },
                                { title: "hdnId", dataType: "string",copy:false, dataIndx: "DataSettingId_" + datasetnames[k], hidden: true, menuInHide: true, sortable: false, }
                                ]
                            });


                            IsHidden = true;
                            l = l + 2;
                        }
                    }
                    newsteps = [];
                    for (var i = 0; i < result.data.length; i++) {
                        if (i != 0) {
                            jsonData += ",";
                        }
                        var datasetvalue = result.data[i].DATASETVALUE;
                        if (datasetvalue != null) {
                            datasetvalue = datasetvalue.replace(/&amp;/g, "&").replace("&lt;", "<").replace("&gt;", ">").replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace("&apos;", "'").replace(/"/g, "\\\"")/*.replace(",","##")*/;/*.replace(/\\\\/g, '\\')*//*.replace(/\\/g, '\\\\');*///.replace(/\\\\/g, '\\');
                        }
                        datasetvalues = [];
                        if (datasetvalue != null) {
                            datasetvalues = datasetvalue.split(',');

                        }

                        var DataSettingIds = [];
                            if (result.data[i].Data_Setting_Id != null) {
                                DataSettingIds = result.data[i].Data_Setting_Id.split(',');

                        }
                            var datasetskip = result.data[i].SKIP;
                        var datasetskipsTest = [];
                        var datasetskips = [];
                        if (datasetskip != null) {
                            datasetskipsTest = datasetskip.split(',');
                            for (var m = 0; m <= datasetskipsTest.length; m++) {
                                if (datasetskipsTest[m] == "4") {
                                    datasetskips.push(true);
                                }
                                else {
                                    datasetskips.push(false);
                                }
                            }
                        }
                        var objvalue = "";
                        var parametervalue = "";
                        var commentvalue = "";
                            if (result.data[i].object_happy_name != null) {
                                objvalue = result.data[i].object_happy_name;
                        }
                            if (result.data[i].parameter != null) {
                                parametervalue = result.data[i].parameter;
                            if (parametervalue != null) {
                                parametervalue = parametervalue.replace(/&amp;/g, "&").replace(/\n/g, "\\n").replace(/\\/g, "\\\\").replace(/\t/g, "\\t").replace("&lt;", "<").replace("&gt;", ">").replace(/"/g, "\\\"");/*.replace(/\\/g, '\\\\')*/;//replace(/"/g, '\\"');
                            }

                        }
                            if (result.data[i].COMMENT != null) {
                                commentvalue = result.data[i].COMMENT;
                            if (commentvalue != null) {
                                commentvalue = commentvalue.replace(/&amp;/g, "&").replace(/\n/g, "\\n").replace(/\\/g, "\\\\").replace(/\t/g, "\\t").replace("&lt;", "<").replace("&gt;", ">").replace(/"/g, "\\\"");
                            }
                        }

                        //*********************************************************************
                        // START - DYNAMIC - Define DATA for the PQGrid and Create JSON
                        //*********************************************************************
                            jsonData += '{"stepsID":"' + result.data[i].STEPS_ID + '", "keyword":"' + result.data[i].key_word_name + '", "object":"' + objvalue + '", "parameters":"'
                                + parametervalue + '", "comment":"' + commentvalue + '", "RUN_ORDER":"' + result.data[i].RUN_ORDER + '", "hdnVERSION":"' + result.data[i].VERSION + '", "hdnISAVAILABLE":"' + result.data[i].ISAVAILABLE + '"';

                        if (Version == 0) {
                            Version = result.data[i].VERSION;
                        }
                        if (IsAvailable == 0) {
                            IsAvailable = result.data[i].ISAVAILABLE;
                        }
                            EditedUserName = result.data[i].EditingUserName;
                        if (datasetvalues.length > 0 && datasetskips.length > 0) {
                            for (var j = 0; j < datasetnames.length; j++) {

                                if (datasetnames[j] != undefined) {
                                    var lSkip = false;
                                    var lvalue = "";
                                    if (datasetskips[j] != undefined) {
                                        lSkip = datasetskips[j];
                                    }
                                    if (datasetvalues[j] != undefined) {
                                        lvalue = datasetvalues[j];
                                        lvalue = lvalue.replace(/##/g, ",");
                                    }

                                    if (DataSettingIds[j] != undefined) {
                                        lsettingId = DataSettingIds[j];
                                    } else {
                                        lsettingId = "";
                                    }
                                    datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                    jsonData += ', "skip_' + datasetnames[j] + '":' + lSkip + ', "' + datasetnames[j] + '":"' + lvalue + '","DataSettingId_' + datasetnames[j] + '":"' + lsettingId + '"';
                                }
                            }
                        }
                        else if (datasetvalues.length == 0 && datasetskips.length > 0) {
                            for (var j = 0; j < datasetskips.length; j++) {
                                if (datasetnames[j] != undefined) {
                                    datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                    jsonData += ', "skip_' + datasetnames[j] + '":' + datasetskips[j] + ', "' + datasetnames[j] + '":' + '"", "DataSettingId_' + datasetnames[j] + '":"' + DataSettingIds[j] + '"';
                                }
                            }
                        }
                        else if (datasetvalues.length > 0 && datasetskips.length == 0) {
                            for (var j = 0; j < datasetvalues.length; j++) {
                                if (datasetnames[j] != undefined) {
                                    datasetnames[j] = datasetnames[j].replace(/___/g, ',');
                                    jsonData += ',"skip_' + datasetnames[j] + '": false , "' + datasetnames[j] + '":"' + datasetvalues[j] + '","DataSettingId_' + datasetnames[j] + '":"' + DataSettingIds[j] + '"';
                                }
                            }
                        }

                        // initialize the steps and run order array
                            newsteps.push({ "stepsid": result.data[i].STEPS_ID, "RUN_ORDER": i + 1, "RUN_ORDER_OLD": i + 1 });

                        jsonData += "}";
                        //*********************************************************************
                        // START - DYNAMIC - Define DATA for the PQGrid and Create JSON
                        //*********************************************************************

                    }
                    jsonData += "]";


                    // setTimeout(function () {
                    data = JSON.parse(jsonData);
                    gridobj[tcgrid].refreshCM(dt);
                    gridobj[tcgrid].refresh();
                    gridobj[tcgrid].option("dataModel.data", data);
                    gridobj[tcgrid].refreshDataAndView();
      }
                else if(result.status == 0) {
            swal.fire({
                "title": "",
                "text": result.message,
                "icon": "error",
                "onClose": function (e) {
                    console.log('on close event fired!');
                }
            });
        }
                }
            });
        }

   //*********************************************************************
   // START - Get Test Case Details from API
   //*********************************************************************
   function OpenValidateMsg() {
       $("#ValidateMsgModel").modal("toggle");
   }
   function filterhandler()
   {
       var $toolbar = this.toolbar(),
       $value = $toolbar.find(".filterValue"),
       value = $value.val(),
       condition = $toolbar.find(".filterCondition").val(),
       dataIndx = $toolbar.find(".filterColumn").val(),
       filterRules;
       if (dataIndx == "")
       {
           filterRules = this.getColModel().map(function (column) {
               return { dataIndx: column.dataIndx, condition: condition, value: value };
           });
       }
       else {//search through selected field.
           filterRules = [{ dataIndx: dataIndx, condition: condition, value: value }];
       }
       //call to grid filter method.
       this.filter({
           oper: 'replace',
           rules: filterRules
       });
   }

   function validateTC(tcgrid,tcid,tsid)
   {
       startloader();
       gridobj[tcgrid].reset({ filter: true });
            var lReqVal = $(tcgrid).find(".pq-cell-red-tr");
       var flagkeyword = false;
       gridobj[tcgrid].setSelection(null);
       for (i = 0; i < gridobj[tcgrid].pdata.length; i++) {

           if (gridobj[tcgrid].pdata[i].keyword == undefined || gridobj[tcgrid].pdata[i].keyword == "" || gridobj[tcgrid].pdata[i].keyword == "null") {
               gridobj[tcgrid].setSelection({ rowIndx: i, focus: true });
               flagkeyword = true;
           }

       }
       if (flagkeyword) {
           stoploader();
           swal.fire({
               "title": "",
               "text": "Keyword is required field.",
               "icon": "error",
               "onClose": function (e) {
                   console.log('on close event fired!');
               }
           });
           return false;
       }

       if (gridobj[tcgrid].saveEditCell() === false || lReqVal.length > 0) {
           stoploader();
           swal.fire({
               "title": "",
               "text": "Keyword column is required.",
               "icon": "error",
               "onClose": function (e) {
                   console.log('on close event fired!');
               }
           });
           return false;
       }

       newsteps = [];
       for (i = 0; i < gridobj[tcgrid].pdata.length; i++) {
           if (gridobj[tcgrid].pdata[i].stepsID != undefined) {
               newsteps.push({ "stepsid": gridobj[tcgrid].pdata[i].stepsID, "RUN_ORDER": i + 1 });
           } else {
               newsteps.push({ "stepsid": newstepsid - 1, "RUN_ORDER": i + 1 });
               newstepsid = newstepsid - 1;
           }
       }

       changes = gridobj[tcgrid].getChanges({ format: "byVal" });
       //var lDeleteColumnsListLength = 0
       var tcDeleteColumnsList = [];
       for (var ii = 0; ii < DeleteColumnsList.length; ii++) {
           if (DeleteColumnsList[ii]["TestCaseId"] == tcid) {
               tcDeleteColumnsList.push(DeleteColumnsList[ii]);
              //  lDeleteColumnsListLength = lDeleteColumnsListLength + 1;
            }
       }

       if (gridobj[tcgrid].isDirty() || tcDeleteColumnsList.length > 0 || newsteps.length > 0) {

           for (var i = 0; i < changes.updateList.length; i++) {
               var a = JSON.stringify(changes.updateList[i]);
               var title = a.substring(a.lastIndexOf('">') + 2, a.lastIndexOf("</"));
               var full = a.substring(a.lastIndexOf('<span'), a.lastIndexOf("</span>") + 7);
               if (title != "{") {
                   a = a.replace(full, title);
                   changes.updateList[i] = JSON.parse(a);
               }
           }
           var lIfElseflag = false;
           var lPegWindowNo = 0;
           var SPegWindowNo = 0;
           var lIfNo = 0;
           var lElseNo = 0;
           var lIfendNo = 0;
           var CIf = 0;
           var CElse = 0;
           var CIfEnd = 0;

           var lgrid = gridobj[tcgrid].pdata;

           for (i = 0; i < lgrid.length; i++) {
               if (lgrid[i].keyword.toUpperCase() == "PEGWINDOW") {
                   lPegWindowNo = i;
               }
               if (lPegWindowNo != 0 && SPegWindowNo == 0) {
                   SPegWindowNo = lPegWindowNo;
               }
               if (lgrid[i].keyword.toUpperCase() == "IF") {
                   lIfNo = i;
                   CIf++;
               }
               if (lgrid[i].keyword.toUpperCase() == "ELSE") {
                   lElseNo = i;
                   CElse++;
               }
               if (lgrid[i].keyword.toUpperCase() == "IFEND") {
                   lIfendNo = i;
                   CIfEnd++
               }

               if (lElseNo < lIfNo && lElseNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lElseNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lElseNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lElseNo = 0;
                   lIfElseflag = true;
                   console.log("IF-ELSE-IFEND in incorrect order" + i);
               }

               if (lIfendNo < lIfNo && lIfendNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfendNo = 0;
                   lIfElseflag = true;
                   console.log("IF-ELSE-IFEND in incorrect order" + i);
               }

               if (lIfendNo < lElseNo && lIfendNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfendNo = 0;
                   lIfElseflag = true;
                   console.log("IF-ELSE-IFEND in incorrect order" + i);
               }

               if (lIfNo < lIfendNo && lIfendNo != 0 && lIfNo != 0 && lElseNo == 0) {
                   lIfendNo = 0;
                   lIfNo = 0;
               }

               if (lIfNo < lElseNo && lElseNo < lIfendNo && lIfendNo != 0 && lIfNo != 0 && lElseNo != 0) {
                   lIfendNo = 0;
                   lIfNo = 0;
                   lElseNo = 0;
               }

           }

           if (lElseNo != 0 || lIfNo != 0 || lIfendNo != 0) {
               if (lElseNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lElseNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lElseNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfElseflag = true;
               }
               if (lIfNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lIfNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lIfNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfElseflag = true;
               }
               if (lIfendNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfElseflag = true;
               }

               console.log("IF-ELSE-IFEND in incorrect order");
           }

           var IfValdaition = "<span>";
           var lIfflag = false;
           if (CIf != CIfEnd) {
               lIfflag = true;
               IfValdaition = IfValdaition + "IF-ELSE-IFEND in incorrect order";
               lIfElseflag = true;
           } else if (CElse > 0) {
               if (CIf != CElse || CIf != CIfEnd) {
                   lIfflag = true;
                   IfValdaition = IfValdaition + "IF-ELSE-IFEND in incorrect order";
                   lIfElseflag = true;
               }
           }
           IfValdaition = IfValdaition + "<span>";
           if (lIfflag) {
               displayValidation(IfValdaition);
           }

           if (lIfElseflag) {
               stoploader();
               return false;
           }

           var rows = gridobj[tcgrid].getTotalRows();
           var cols = Object.keys(gridobj[tcgrid].columns);
           var skips = '{';
           for (var i = 0; i < rows; i++) {
               var rowjson = '{';
               if (i > 0) {
                   skips += ',';
               }
               for (var j = 7; j < cols.length; j = j + 2) {
                   if (j > 7) {
                       rowjson += ',';
                   }
                   var trfl = '0';
                   if ($("#pq-body-cell-u0-" + i + "-" + j + "-right").find("input").prop("checked") == true) {
                       trfl = '4';
                   }
                   var Skipcol = cols[j].toString();
                   if (Skipcol.indexOf("span") > -1) {
                       Skipcol = "skip_" + Skipcol.substring(Skipcol.lastIndexOf('"') + 2, Skipcol.lastIndexOf("</"));
                   }

                   rowjson += '"' + Skipcol + '": "' + trfl + '"';
               }
               rowjson += '}';
               skips += '"' + i + '":[' + rowjson + ']';
           }
           skips += "}";

           var pKeywordObjectArray = [];
           $.each(gridobj[tcgrid].pdata, function (key, value) {
               if (value.keyword != undefined) {
                   var lObject = "";
                   if (value.object != undefined) {
                       lObject = value.object;
                   }
                   pKeywordObjectArray.push({ "pq_ri": key, "Keyword": value.keyword, "Object": lObject });
               }
           });

           var tcExistDataSetRenameList = [];
           for (var ii = 0; ii < ExistDataSetRenameList.length; ii++) {
               if (ExistDataSetRenameList[ii]["TestCaseId"] == tcid) {
                   tcExistDataSetRenameList.push(DeleteColumnsList[ii]);
                   //  lDeleteColumnsListLength = lDeleteColumnsListLength + 1;
               }
           }

            $.ajax({
               dataType: "json",
               type: "POST",
               async: true,
               beforeSend: function (jqXHR, settings) {
                   //gridobj[tcgrid].showLoading("Saving Data");
               },
                 url: "/TestCase/ValidateTestCase",
                data: {
                    lJson: JSON.stringify(changes), testCaseId: tcid, testSuiteId: tsid, steps: JSON.stringify(newsteps),
                    DeleteColumnsList: JSON.stringify(tcDeleteColumnsList), SkipColumns: skips, ExistDataSetRenameList: JSON.stringify(tcExistDataSetRenameList),
                    pKeywordObject: JSON.stringify(pKeywordObjectArray)
                },
               success: function (changes) {
                   if (changes.status == 1) {
                   if (changes.data == "[]") {

                       swal.fire({
                           "title": "",
                           "text": changes.message,
                           "icon": "success",
                           "onClose": function (e) {
                               console.log('on close event fired!');
                           }
                       });

                       gridobj[tcgrid].setSelection(null)
                   }
                   else {
                       var validationmsgs = "<table cellborder='0' cellspacing='2' cellpadding='4'>";
                       var lobject = JSON.parse(changes.data);
                       $("#ValidationMessageLabel").html("");
                       for (var i = 0; i < lobject.length; i++) {
                           var lrowid = lobject[i].ID;
                           gridobj[tcgrid].setSelection({ rowIndx: lrowid, focus: true });
                           gridobj[tcgrid].Range({ r1: lrowid, r2: lrowid }).comment(lobject[i].VALIDATIONMSG);
                           validationmsgs += "<tr><td style='width: 80px;'>Row: " + (lrowid + 1) + "</td><td align='left'>" + lobject[i].VALIDATIONMSG + "</td></tr>";
                       }
                       validationmsgs += "</table>";
                       $("#ValidationMessageLabel").html(validationmsgs);
                       $("#ValidateMsgModel").modal("toggle");
                   }
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
               },
                complete: function (changes) {
                    stoploader();
                   //gridobj[tcgrid].hideLoading();
                   if (changes.responseText == "Success") {
                       swal.fire({
                           "title": "",
                           "text": "Test Case validated successfully.",
                           "icon": "success",
                           "onClose": function (e) {
                               console.log('on close event fired!');
                           }
                       });


                   } else {
                       var validationmsgs = "<table cellborder='0' cellspacing='2' cellpadding='5'>";
                       var lobject = JSON.parse(changes);
                       $("#ValidationMessageLabel").html("");
                       for (var i = 0; i < lobject.length; i++) {
                           var lrowid = lobject[i].ID;
                           gridobj[tcgrid].setSelection({ rowIndx: lrowid, focus: true });
                           gridobj[tcgrid].Range({ r1: lrowid, r2: lrowid }).comment(lobject[i].VALIDATIONMSG);
                           if (gridobj[tcgrid].getRow({ rowIndx: lrowid })[0] != undefined) {
                               gridobj[tcgrid].getRow({ rowIndx: lrowid })[0].title = lobject[i].VALIDATIONMSG;
                           }
                           validationmsgs += "<tr><td style='width: 80px;'>Row: " + (lrowid + 1) + "</td><td align='left'>" + lobject[i].VALIDATIONMSG + "</td></tr>";
                       }
                       validationmsgs += "</table>";
                       $("#ValidationMessageLabel").html(validationmsgs);
                       $("#ValidateMsgModel").modal("toggle");
                   }
               }
           });
       }
       else {
           stoploader();
           swal.fire({
               "title": "",
               "text": "There is no change to save.",
               "icon": "warning",
               "onClose": function (e) {
                   console.log('on close event fired!');
               }
           });
       }
   }


      function exportTestcase(tcgrid, tcid, tsid)
      {
       if (gridobj[tcgrid].isDirty() && gridobj[tcgrid].isValidChange({ focusInvalid: true }).valid) {
           swal.fire({
               title: 'Export',
               text: "There are unsaved changes. Export will not contain these changes. Please confirm or cancel export.",
               icon: 'warning',
               showCancelButton: true,
               confirmButtonText: 'Yes'
           }).then(function (result) {
               if (result.value == true) {
                   $.ajax({
                       url: '/TestCase/ExportTestCase', //call your controller and action
                       contentType: "application/json; charset=utf-8",
                       dataType: "json",
                       data: {
                           TestCaseId: tcid,
                           TestSuiteId: tsid
                       },
                   }).done(function (result) {
                       stoploader();
                       //if (result.status == 1) {
                           window.location = "/TestSuite/DownloadExcel?FileName=" + result;
                       //} else if (result.status == 0) {
                       //    swal.fire({
                       //        "title": "",
                       //        "text": result.message,
                       //        "type": "error",
                       //        "onClose": function (e) {
                       //            console.log('on close event fired!');
                       //        }
                       //    });
                       //}
                   });
                 //  window.open('@Url.Action("ExportTestCase", "TestCase")?TestCaseId=' + tcid + '&TestSuiteId=' + tsid, '_blank');
               }
           });
       }
       else {
           $.ajax({
               url: '/TestCase/ExportTestCase', //call your controller and action
               contentType: "application/json; charset=utf-8",
               dataType: "json",
               data: {
                   TestCaseId: tcid,
                   TestSuiteId: tsid
               },
           }).done(function (result) {
               stoploader();
               //if (result.status == 1) {
                   window.location = "/TestSuite/DownloadExcel?FileName=" + result;
               //} else if (result.status == 0) {
               //    swal.fire({
               //        "title": "",
               //        "text": result.message,
               //        "type": "error",
               //        "onClose": function (e) {
               //            console.log('on close event fired!');
               //        }
               //    });
               //}
           });
           //window.open('@Url.Action("ExportTestCase", "TestCase")?TestCaseId='+tcid+'&TestSuiteId=' + tsid, '_blank');
       }
   }



   var changes;

        function RecursiveRemoveSpanForupdateList(a, i) {
                if (JSON.stringify(changes.updateList[i]).indexOf("span") > -1) {
                    var title = a.substring(a.lastIndexOf('">') + 2, a.lastIndexOf("</"));
                    var full = a.substring(a.lastIndexOf('<span'), a.lastIndexOf("</span>") + 7);
                    if (title != "{") {
                        a = a.replace(full, title);
                        changes.updateList[i] = JSON.parse(a);
                    }
                    RecursiveRemoveSpanForupdateList(JSON.stringify(changes.updateList[i]), i)
                }

       a = JSON.stringify(changes.updateList[i], function (key, value)
       {
           return (value === undefined) ? "" : value
       })
       changes.updateList[i] = JSON.parse(a);

       return true;
   }

        function RecursiveRemoveSpanForaddList(a, i) {
       if (JSON.stringify(changes.addList[i]).indexOf("span") > -1) {
           var title = a.substring(a.lastIndexOf('">') + 2, a.lastIndexOf("</"));
           var full = a.substring(a.lastIndexOf('<span'), a.lastIndexOf("</span>") + 7);
           if (title != "{") {
               a = a.replace(full, title);
               changes.addList[i] = JSON.parse(a);
           }
           RecursiveRemoveSpanForaddList(JSON.stringify(changes.addList[i]), i);
       }

       a = JSON.stringify(changes.addList[i], function (key, value) { return (value === undefined) ? "" : value })
       changes.addList[i] = JSON.parse(a);
       return true;
   }


   function RecursiveRemoveSpanFordeleteList(a, i) {
       if (JSON.stringify(changes.deleteList[i]).indexOf("span") > -1) {
           var title = a.substring(a.lastIndexOf('">') + 2, a.lastIndexOf("</"));
           var full = a.substring(a.lastIndexOf('<span'), a.lastIndexOf("</span>") + 7);
           if (title != "{") {
               a = a.replace(full, title);
               changes.deleteList[i] = JSON.parse(a);
           }
           RecursiveRemoveSpanFordeleteList(JSON.stringify(changes.deleteList[i]), i)
       }


       a = JSON.stringify(changes.deleteList[i], function (key, value) { return (value === undefined) ? "" : value })
       changes.deleteList[i] = JSON.parse(a);
       return true;
   }

    function RecursiveRemoveundefinedDetails(a, i) {

            if (JSON.stringify(ExistDataSetRenameList[i]).indexOf("span") > -1) {
                var title = a.substring(a.lastIndexOf('">') + 2, a.lastIndexOf("</"));
                var full = a.substring(a.lastIndexOf('<span'), a.lastIndexOf("</span>") + 7);
                if (title != "{") {
                    a = a.replace(full, title);
                    ExistDataSetRenameList[i] = JSON.parse(a);
                }
                RecursiveRemoveundefinedDetails(JSON.stringify(ExistDataSetRenameList[i]), i)
            }


            a = JSON.stringify(ExistDataSetRenameList[i], function (key, value) { return (value === undefined) ? "" : value })
            ExistDataSetRenameList[i] = JSON.parse(a);


            return true;
        }

    function saveChangesTC(tcgrid, tcid, tsid) {
        console.time("step 1");
        startloader();
        //gridobj[tcgrid].reset({ filter: true });
        //for (var k = 0; gridobj[tcgrid].pdata.length > k; k++) {
        //       var DM = gridobj[tcgrid].option("dataModel");
        //       data = DM.data;

        //    data[k].pq_hidden = false;
        //    gridobj[tcgrid].removeClass({ rowIndx: k, cls: 'collapseBorder' });
        //    gridobj[tcgrid].refreshView();
        //}

       var flagkeyword = false;
       gridobj[tcgrid].setSelection(null);

       for (i = 0; i < gridobj[tcgrid].pdata.length; i++) {
           if (gridobj[tcgrid].pdata[i].keyword == undefined || gridobj[tcgrid].pdata[i].keyword == "" || gridobj[tcgrid].pdata[i].keyword == "null") {
               gridobj[tcgrid].setSelection({ rowIndx: i, focus: true });
               flagkeyword = true;
           }
       }
        if (flagkeyword) {
            stoploader();
            validflag = true;
           swal.fire({
               "title": "",
               "text": "Keyword column is required.",
               "icon": "error",
               "onClose": function (e) {
                   console.log('on close event fired!');
               }
           });
           return false;
        }
        console.timeEnd("step 1");

        console.time("step 2");

        changes = gridobj[tcgrid].getChanges();
       var tcDeleteColumnsList = [];
       for (var ii = 0; ii < DeleteColumnsList.length; ii++) {
           if (DeleteColumnsList[ii]["TestCaseId"] == tcid) {
               tcDeleteColumnsList.push(DeleteColumnsList[ii]);
            }
        }

           for (var i = 0; i < changes.updateList.length; i++) {
              RecursiveRemoveSpanForupdateList(JSON.stringify(changes.updateList[i]), i);
           }

           for (var i = 0; i < changes.addList.length; i++) {
               RecursiveRemoveSpanForaddList(JSON.stringify(changes.addList[i]), i);
           }

           for (var i = 0; i < changes.deleteList.length; i++) {
               RecursiveRemoveSpanFordeleteList(JSON.stringify(changes.deleteList[i]), i);
           }

           var lIfElseflag = false;
           var lPegWindowNo = 0;
           var SPegWindowNo = 0;
           var lIfNo = 0;
           var lElseNo = 0;
           var lIfendNo = 0;
           var CIf = 0;
           var CElse = 0;
           var CIfEnd = 0;

           var lgrid = gridobj[tcgrid].pdata;

           for (i = 0; i < lgrid.length; i++ )
           {
               if (lgrid[i].keyword.toUpperCase() == "PEGWINDOW")
               {
                   lPegWindowNo = i;
               }
               if (lPegWindowNo != 0 && SPegWindowNo == 0) {
                   SPegWindowNo = lPegWindowNo;
               }
               if (lgrid[i].keyword.toUpperCase() == "IF") {
                   lIfNo = i;
                   CIf++;
               }
               if (lgrid[i].keyword.toUpperCase() == "ELSE") {
                   lElseNo = i;
                   CElse++;
               }
               if (lgrid[i].keyword.toUpperCase() == "IFEND") {
                   lIfendNo = i;
                   CIfEnd++
               }

               if (lElseNo < lIfNo && lElseNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lElseNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lElseNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lElseNo = 0;
                   lIfElseflag = true;
                   console.log("IF-ELSE-IFEND in incorrect order" + i);
               }

               if (lIfendNo < lIfNo && lIfendNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfendNo = 0;
                   lIfElseflag = true;
                   console.log("IF-ELSE-IFEND in incorrect order" + i);
               }

               if (lIfendNo < lElseNo && lIfendNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfendNo = 0;
                   lIfElseflag = true;
                   console.log("IF-ELSE-IFEND in incorrect order" + i);
               }

               if (lIfNo < lIfendNo && lIfendNo != 0 && lIfNo != 0 && lElseNo == 0) {
                   lIfendNo = 0;
                   lIfNo = 0;
               }

               if (lIfNo < lElseNo && lElseNo < lIfendNo && lIfendNo != 0 && lIfNo != 0 && lElseNo != 0) {
                   lIfendNo = 0;
                   lIfNo = 0;
                   lElseNo = 0;
               }

           }

           if (lElseNo != 0 || lIfNo != 0 || lIfendNo != 0) {
               if (lElseNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lElseNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lElseNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfElseflag = true;
               }
               if (lIfNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lIfNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lIfNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfElseflag = true;
               }
               if (lIfendNo != 0) {
                   gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                   gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                   lIfElseflag = true;
               }

               console.log("IF-ELSE-IFEND in incorrect order");
           }

           var IfValdaition = "<span>";
           var lIfflag = false;
           if (CIf != CIfEnd) {
               lIfflag = true;
               IfValdaition = IfValdaition + "IF-ELSE-IFEND in incorrect order";
               lIfElseflag = true;
           } else if (CElse > 0) {
               if (CIf != CElse || CIf != CIfEnd) {
                   lIfflag = true;
                   IfValdaition = IfValdaition + "IF-ELSE-IFEND in incorrect order";
                   lIfElseflag = true;
               }
           }
           IfValdaition = IfValdaition + "<span>";
           if (lIfflag) {
               displayValidation(IfValdaition);
           }

           if (lIfElseflag) {
             stoploader();
              return false;
           }


           if (gridobj[tcgrid].pdata.length == 0) {
               Version = 1;
        }

        console.timeEnd("step 2");
        console.time("step 3");
           var pKeywordObjectArray = [];
           $.each(gridobj[tcgrid].pdata, function (key, value) {
               if (value.keyword != undefined) {
                   var lObject = "";
                   if (value.object != undefined) {
                       lObject = value.object;
                   }
                   Version = value.hdnVERSION;
                   pKeywordObjectArray.push({ "pq_ri": key, "Keyword": value.keyword, "Object": lObject });
               }
           });
        console.timeEnd("step 3");


        console.time("step 5");
           $.ajax({
               dataType: "json",
               type: "POST",
               async: true,
               beforeSend: function (jqXHR, settings) {
                   //gridobj[tcgrid].showLoading("Saving Data");
               },

              url: "/TestCase/SaveTestCase",
               data: {
                   lGrid: JSON.stringify(gridobj[tcgrid].pdata), lChanges: JSON.stringify(changes), lTestCaseId: tcid,
                   lTestSuiteId: tsid, lDeleteColumnsList: JSON.stringify(tcDeleteColumnsList),
                   lVersion: Version
               },
               success: function (result) {
               if (result.status == 1) {
                   console.timeEnd("step 5");
                   console.time("step 4");
                   if (result.data == "success") {
                       swal.fire({
                           "title": "",
                           "text": result.message,
                           "icon": "success",
                           "onClose": function (e) {
                               console.log('on close event fired!');
                           }
                       });

                       gridobj[tcgrid].commit({ type: 'add', rows: changes.addList });
                       gridobj[tcgrid].commit({ type: 'update', rows: changes.updateList });
                       gridobj[tcgrid].commit({ type: 'delete', rows: changes.deleteList });

                       gridobj[tcgrid].history({ method: 'reset' });

                       var prj = $("#projectidtc").val();
                       var ts = $("#testsuiteidtc").val();
                       $.ajax({
                           url: "/TestCase/GetDataSetCount",
                           data: JSON.stringify({ ProjectId: prj, TestSuiteId: ts, TestCaseId: tcid }),
                           type: "POST",
                           contentType: "application/json;charset=utf-8",

                           dataType: "json",
                           success: function (result) {
                               if (result.status == 1) {
                                   var datasetcount;
                                   if (result.data.length > 0) {
                                       for (i = 0; i < result.data.length; i++) {
                                           datasetcount = result.data[i].DataSetCount;
                                       }
                                   }
                                   //alert(result);
                                   var obj = datasetobj;
                                   //var lcountTC = $(obj).children(".kt-menu__link-text").children(".tccount")[0].innerHTML;
                                   $(obj).children().text('(' + datasetcount + ')')
                               }
                               else if (result.status == 0) {
                                   swal.fire({
                                       "title": "",
                                       "text": result.message,
                                       "icon": "error",
                                       "onClose": function (e) {
                                           console.log('on close event fired!');
                                       }
                                   });
                               }
                           }
                       });
                       //stoploader();

                       var lDeletedColLength = 0;
                       var lExistDataSetLength = 0;
                       lDeletedColLength = DeleteColumnsList.length;
                       lExistDataSetLength = ExistDataSetRenameList.length;
                       while (lDeletedColLength--) {
                           if (DeleteColumnsList[lDeletedColLength]["TestCaseId"] == tcid) {
                               DeleteColumnsList.splice(lDeletedColLength, 1);
                           }
                       }

                       while (lExistDataSetLength--) {
                           if (ExistDataSetRenameList[lExistDataSetLength]["TestCaseId"] == tcid) {
                               ExistDataSetRenameList.splice(lExistDataSetLength, 1);
                           }
                       }


                       Version = 0;
                       IsAvailable = 0;
                       dt = [];


                       ReloadGrid(tcgrid, tcid, tsid, "");
                       validflag = false;
                       msgflag = false;
                   }

                   else if (result.message.indexOf("Another User Edited this Test Case") > -1) {
                       //stoploader();
                       swal.fire({
                           "title": "",
                           "text": result.message,
                           "icon": "warning",
                           "onClose": function (e) {
                               console.log('on close event fired!');
                           }
                       });
                   }
                   else if (result.message == "error") {
                       swal.fire({
                           "title": "",
                           "text": "Please check log file for more information",
                           "icon": "error",
                           "onClose": function (e) {
                               console.log('on close event fired!');
                           }
                       });
                   }
                   else if (result.message == "No change in Testcase" || result.message == "You can not delete all steps.") {
                       swal.fire({
                           "title": "",
                           "text": result.message,
                           "icon": "warning",
                           "onClose": function (e) {
                               console.log('on close event fired!');
                           }
                       });
                   }
                   else {
                       msgflag = true;
                       var validationmsgs = "<table cellborder='0' cellspacing='2' cellpadding='5'>";
                       var lobject = JSON.parse(result.data);
                       $("#ValidationMessageLabel").html("");
                       for (var i = 0; i < lobject.length; i++) {
                           var lrowid = lobject[i].ID;
                           gridobj[tcgrid].setSelection({ rowIndx: lrowid, focus: true });
                           gridobj[tcgrid].Range({ r1: lrowid, r2: lrowid }).comment(lobject[i].VALIDATIONMSG);
                           validationmsgs += "<tr><td style='width: 80px;'>Row: " + (lrowid + 1) + "</td><td align='left'>" + lobject[i].VALIDATIONMSG + "</td></tr>";
                       }
                       validationmsgs += "</table>";
                       $("#ValidationMessageLabel").html(validationmsgs);
                       $("#ValidateMsgModel").modal("toggle");
                   }
               }
               else if (result.status == 0) {
                   swal.fire({
                       "title": "",
                       "text": result.message,
                       "icon": "error",
                       "onClose": function (e) {
                           console.log('on close event fired!');
                       }
                   });
               }
                   newstepsid = 0;

                   console.timeEnd("step 4");
               },
                   complete: function (result) {
                   stoploader();
                   //gridobj[tcgrid].hideLoading();
               }
           });
       }






   function filterRenderTC(ui)
   {
       var val = ui.cellData,
       filter = ui.column.filter,
       crules = (filter || { }).crules;

   if (filter && filter.on && crules && crules[0].value)
   {
       var condition = crules[0].condition,
           valUpper = val.toUpperCase(),
           txt = crules[0].value,
           txt = (txt == null) ? "" : txt.toString(),
           txtUpper = txt.toUpperCase(),
           indx = -1;
       if (condition == "end")
       {
           indx = valUpper.lastIndexOf(txtUpper);
           if (indx + txtUpper.length != valUpper.length)
           {
               indx = -1;
           }
       }
       else if (condition == "contain")
       {
           indx = valUpper.indexOf(txtUpper);
       }
       else if (condition == "begin")
       {
           indx = valUpper.indexOf(txtUpper);
           if (indx > 0)
           {
               indx = -1;
           }
       }
       if (indx >= 0)
       {
           var txt1 = val.substring(0, indx);
           var txt2 = val.substring(indx, indx + txt.length);
           var txt3 = val.substring(indx + txt.length);
           return txt1 + "<span style='background:yellow;color:#333;'>" + txt2 + "</span>" + txt3;
       }
       else
       {
           return val;
       }
   }
   else
   {
       return val;
   }
        }

        function saveChangesTCForCopyDataset(tcgrid, tcid, tsid) {
            console.time("step 1");
            startloader();
            var flagkeyword = false;
            gridobj[tcgrid].setSelection(null);

            for (i = 0; i < gridobj[tcgrid].pdata.length; i++) {
                if (gridobj[tcgrid].pdata[i].keyword == undefined || gridobj[tcgrid].pdata[i].keyword == "" || gridobj[tcgrid].pdata[i].keyword == "null") {
                    gridobj[tcgrid].setSelection({ rowIndx: i, focus: true });
                    flagkeyword = true;
                }
            }
            if (flagkeyword) {
                stoploader();
                validflag = true;
                swal.fire({
                    "title": "",
                    "text": "Keyword column is required.",
                    "icon": "error",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
                return false;
            }
            console.timeEnd("step 1");
            console.time("step 2");

            //changes = gridobj[tcgrid].getChanges({ format: "byVal" });
            changes = gridobj[tcgrid].getChanges();
            var tcDeleteColumnsList = [];
            for (var ii = 0; ii < DeleteColumnsList.length; ii++) {
                if (DeleteColumnsList[ii]["TestCaseId"] == tcid) {
                    tcDeleteColumnsList.push(DeleteColumnsList[ii]);
                }
            }



            for (var i = 0; i < changes.updateList.length; i++) {
                RecursiveRemoveSpanForupdateList(JSON.stringify(changes.updateList[i]), i);
            }

            for (var i = 0; i < changes.addList.length; i++) {
                RecursiveRemoveSpanForaddList(JSON.stringify(changes.addList[i]), i);
            }

            for (var i = 0; i < changes.deleteList.length; i++) {
                RecursiveRemoveSpanFordeleteList(JSON.stringify(changes.deleteList[i]), i);
            }

            var lIfElseflag = false;
            var lPegWindowNo = 0;
            var SPegWindowNo = 0;
            var lIfNo = 0;
            var lElseNo = 0;
            var lIfendNo = 0;
            var CIf = 0;
            var CElse = 0;
            var CIfEnd = 0;

            var lgrid = gridobj[tcgrid].pdata;

            for (i = 0; i < lgrid.length; i++) {
                if (lgrid[i].keyword.toUpperCase() == "PEGWINDOW") {
                    lPegWindowNo = i;
                }
                if (lPegWindowNo != 0 && SPegWindowNo == 0) {
                    SPegWindowNo = lPegWindowNo;
                }
                if (lgrid[i].keyword.toUpperCase() == "IF") {
                    lIfNo = i;
                    CIf++;
                }
                if (lgrid[i].keyword.toUpperCase() == "ELSE") {
                    lElseNo = i;
                    CElse++;
                }
                if (lgrid[i].keyword.toUpperCase() == "IFEND") {
                    lIfendNo = i;
                    CIfEnd++
                }

                if (lElseNo < lIfNo && lElseNo != 0) {
                    gridobj[tcgrid].setSelection({ rowIndx: lElseNo, focus: true });
                    gridobj[tcgrid].getRow({ rowIndx: lElseNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                    lElseNo = 0;
                    lIfElseflag = true;
                    console.log("IF-ELSE-IFEND in incorrect order" + i);
                }

                if (lIfendNo < lIfNo && lIfendNo != 0) {
                    gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                    gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                    lIfendNo = 0;
                    lIfElseflag = true;
                    console.log("IF-ELSE-IFEND in incorrect order" + i);
                }

                if (lIfendNo < lElseNo && lIfendNo != 0) {
                    gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                    gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                    lIfendNo = 0;
                    lIfElseflag = true;
                    console.log("IF-ELSE-IFEND in incorrect order" + i);
                }

                if (lIfNo < lIfendNo && lIfendNo != 0 && lIfNo != 0 && lElseNo == 0) {
                    lIfendNo = 0;
                    lIfNo = 0;
                }

                if (lIfNo < lElseNo && lElseNo < lIfendNo && lIfendNo != 0 && lIfNo != 0 && lElseNo != 0) {
                    lIfendNo = 0;
                    lIfNo = 0;
                    lElseNo = 0;
                }

            }

            if (lElseNo != 0 || lIfNo != 0 || lIfendNo != 0) {
                if (lElseNo != 0) {
                    gridobj[tcgrid].setSelection({ rowIndx: lElseNo, focus: true });
                    gridobj[tcgrid].getRow({ rowIndx: lElseNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                    lIfElseflag = true;
                }
                if (lIfNo != 0) {
                    gridobj[tcgrid].setSelection({ rowIndx: lIfNo, focus: true });
                    gridobj[tcgrid].getRow({ rowIndx: lIfNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                    lIfElseflag = true;
                }
                if (lIfendNo != 0) {
                    gridobj[tcgrid].setSelection({ rowIndx: lIfendNo, focus: true });
                    gridobj[tcgrid].getRow({ rowIndx: lIfendNo })[0].title = "IF-ELSE-IFEND in incorrect order";
                    lIfElseflag = true;
                }

                console.log("IF-ELSE-IFEND in incorrect order");
            }

            var IfValdaition = "<span>";
            var lIfflag = false;
            if (CIf != CIfEnd) {
                lIfflag = true;
                IfValdaition = IfValdaition + "IF-ELSE-IFEND in incorrect order";
                lIfElseflag = true;
            } else if (CElse > 0) {
                if (CIf != CElse || CIf != CIfEnd) {
                    lIfflag = true;
                    IfValdaition = IfValdaition + "IF-ELSE-IFEND in incorrect order";
                    lIfElseflag = true;
                }
            }
            IfValdaition = IfValdaition + "<span>";
            if (lIfflag) {
                displayValidation(IfValdaition);
            }

            if (lIfElseflag) {
                stoploader();
                return false;
            }


            if (gridobj[tcgrid].pdata.length == 0) {
                Version = 1;
            }

            console.timeEnd("step 2");
            console.time("step 3");
            var pKeywordObjectArray = [];
            $.each(gridobj[tcgrid].pdata, function (key, value) {
                if (value.keyword != undefined) {
                    var lObject = "";
                    if (value.object != undefined) {
                        lObject = value.object;
                    }
                    Version = value.hdnVERSION;
                    pKeywordObjectArray.push({ "pq_ri": key, "Keyword": value.keyword, "Object": lObject });
                }
            });
            console.timeEnd("step 3");


            console.time("step 5");
            $.ajax({
                dataType: "json",
                type: "POST",
                async: true,
                beforeSend: function (jqXHR, settings) {
                    //gridobj[tcgrid].showLoading("Saving Data");
                },

                url: "/TestCase/SaveTestCase",
                data: {
                    lGrid: JSON.stringify(gridobj[tcgrid].pdata), lChanges: JSON.stringify(changes), lTestCaseId: tcid,
                    lTestSuiteId: tsid, lDeleteColumnsList: JSON.stringify(tcDeleteColumnsList),
                    lVersion: Version
                },
                success: function (result) {
                    if (result.status == 1) {
                        console.timeEnd("step 5");
                        console.time("step 4");
                        if (result.data == "success") {

                        //swal.fire({
                        //    "title": "",
                        //    "text": "Test Case saved.",
                        //    "type": "success",
                        //    "onClose": function (e) {
                        //        console.log('on close event fired!');
                        //    }
                        //});

                            gridobj[tcgrid].commit({ type: 'add', rows: changes.addList });
                            gridobj[tcgrid].commit({ type: 'update', rows: changes.updateList });
                            gridobj[tcgrid].commit({ type: 'delete', rows: changes.deleteList });

                            gridobj[tcgrid].history({ method: 'reset' });

                            var prj = $("#projectidtc").val();
                            var ts = $("#testsuiteidtc").val();
                            $.ajax({
                                url: "/TestCase/GetDataSetCount",
                                data: JSON.stringify({ ProjectId: prj, TestSuiteId: ts, TestCaseId: tcid }),
                                type: "POST",
                                contentType: "application/json;charset=utf-8",

                                dataType: "json",
                                success: function (result) {
                                    if (result.status == 1) {
                                        var datasetcount;
                                        if (result.data.length > 0) {
                                            for (i = 0; i < result.data.length; i++) {
                                                datasetcount = result.data[i].DataSetCount;
                                            }
                                        }
                                        //alert(result);
                                        var obj = datasetobj;
                                        //var lcountTC = $(obj).children(".kt-menu__link-text").children(".tccount")[0].innerHTML;
                                        $(obj).children().text('(' + datasetcount + ')')
                                    }
                                    else if (result.status == 0) {
                                        swal.fire({
                                            "title": "",
                                            "text": result.message,
                                            "icon": "error",
                                            "onClose": function (e) {
                                                console.log('on close event fired!');
                                            }
                                        });
                                    }
                                }
                            });
                            //stoploader();

                            var lDeletedColLength = 0;
                            var lExistDataSetLength = 0;
                            lDeletedColLength = DeleteColumnsList.length;
                            lExistDataSetLength = ExistDataSetRenameList.length;
                            while (lDeletedColLength--) {
                                if (DeleteColumnsList[lDeletedColLength]["TestCaseId"] == tcid) {
                                    DeleteColumnsList.splice(lDeletedColLength, 1);
                                }
                            }

                            while (lExistDataSetLength--) {
                                if (ExistDataSetRenameList[lExistDataSetLength]["TestCaseId"] == tcid) {
                                    ExistDataSetRenameList.splice(lExistDataSetLength, 1);
                                }
                            }


                            Version = 0;
                            IsAvailable = 0;
                            dt = [];


                            ReloadGrid(tcgrid, tcid, tsid, "");
                            validflag = false;
                            msgflag = false;
                        }

                        else if (result.message.indexOf("Another User Edited this Test Case") > -1) {
                            //stoploader();
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "warning",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }
                        else if (result.message == "error") {
                            swal.fire({
                                "title": "",
                                "text": "Please check log file for more information",
                                "icon": "error",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }
                        else if (result.message == "No change in Testcase" || result.message == "You can not delete all steps.") {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "warning",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }
                        else {
                            msgflag = true;
                            var validationmsgs = "<table cellborder='0' cellspacing='2' cellpadding='5'>";
                            var lobject = JSON.parse(result.data);
                            $("#ValidationMessageLabel").html("");
                            for (var i = 0; i < lobject.length; i++) {
                                var lrowid = lobject[i].ID;
                                gridobj[tcgrid].setSelection({ rowIndx: lrowid, focus: true });
                                gridobj[tcgrid].Range({ r1: lrowid, r2: lrowid }).comment(lobject[i].VALIDATIONMSG);
                                validationmsgs += "<tr><td style='width: 80px;'>Row: " + (lrowid + 1) + "</td><td align='left'>" + lobject[i].VALIDATIONMSG + "</td></tr>";
                            }
                            validationmsgs += "</table>";
                            $("#ValidationMessageLabel").html(validationmsgs);
                            $("#ValidateMsgModel").modal("toggle");
                        }
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                    newstepsid = 0;

                    console.timeEnd("step 4");
                },
                complete: function (result) {
                    stoploader();
                    //gridobj[tcgrid].hideLoading();
                }
            });
        }



   function bodyItems(evt, ui) {

   }



   function displayValidation(message) {
       swal.fire({
           "title": "Validations",
           "html": message
       });
    }

        function ExecuteEngineTC(tcgrid, tcid, tsid, sid, sname) {
            debugger
            startloader();
            var gridlst = [];
            if (selectChange != "") {
                var sChange = selectChange.selection._areas;
                console.log('test', sChange);
            $.each(sChange, function (key, value) {
                debugger
                var index = value.firstR;
                var srow = gridobj[tcgrid].pdata[index];
                debugger
                if (srow.keyword != "PegWindow") {
                    var pgridlist = gridobj[tcgrid].pdata.filter(({ RUN_ORDER, keyword }) => RUN_ORDER < Number(srow.RUN_ORDER) && keyword === "PegWindow");
                    var pegwindowRow = pgridlist[pgridlist.length - 1];
                    var pegRowInselect = gridlst.find(({ RUN_ORDER }) => RUN_ORDER === pegwindowRow.RUN_ORDER);
                    if (pegRowInselect == undefined) {
                        gridlst.push(pegwindowRow);
                    }
                }
                gridlst.push(srow);
            });

            $.ajax({
                dataType: "json",
                type: "POST",
                async: true,
                beforeSend: function (jqXHR, settings) {
                },
                url: "/TestCase/ExecuteTestCase",
                data: { lGrid: JSON.stringify(gridlst), lTestCaseId: tcid, lTestSuiteId: tsid, storyboradId: sid, storyborad: sname },
                success: function (result) {
                    if (result.status == 1) {
                        $("#txtareacopy").val(result.data.TcJson);
                        $("#hdnExeTCguid").val(result.data.guid);
                        $("#hdnExeTCStoryboardId").val(sid);
                        $("#hdnExeTCStoryboardName").val(sname);

                        var ldrpString = "";
                        $.each(result.data.applications, function (key, value) {
                            ldrpString = ldrpString + "<option value=" + value.ApplicationId + "> " + value.ApplicationName + "</option>";
                        });
                        $("#drpExeAppTC").html("");
                        $("#drpExeAppTC").html(ldrpString);
                        $("#txtareacopy").css("display", "none");
                        $("#ExecutePopupTC").modal("toggle");
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                },
                complete: function (result) {
                     stoploader();
                }
            });
            } else {
                stoploader();
            swal.fire({
                "title": "",
                "text": "Please select Testcase row step.",
                "icon": "warning",
                "onClose": function (e) {
                    console.log('on close event fired!');
                }
            });
        }
    }

        function TCbodyItems(tcgrid, tcid, tsid, sid, sname, applist) {
            var applistobj = JSON.parse(applist.replaceAll('&quot;', '"'));
            var bodyItem = [];

            //startloader();
            var gridlst = [];
            var engineURI = "";
            var lLoginUser = "";
            var lDataBase = "";
            var lguid = "";
            if (selectChange != "") {
                var sChange = selectChange.selection._areas;
                $.each(sChange, function (key, value) {
                    var index = value.firstR;
                    var srow = gridobj[tcgrid].pdata[index];
                    if (srow != undefined) {
                        if (srow.keyword != "PegWindow") {
                            var pgridlist = gridobj[tcgrid].pdata.filter(({ RUN_ORDER, keyword }) => RUN_ORDER < Number(srow.RUN_ORDER) && keyword === "PegWindow");
                            var pegwindowRow = pgridlist[pgridlist.length - 1];
                            var pegRowInselect = gridlst.find(({ RUN_ORDER }) => RUN_ORDER === pegwindowRow.RUN_ORDER);
                            if (pegRowInselect == undefined) {
                                gridlst.push(pegwindowRow);
                            }
                        }
                        var RowInselect = gridlst.find(({ RUN_ORDER }) => RUN_ORDER === srow.RUN_ORDER);
                        if (RowInselect == undefined) {
                            gridlst.push(srow);
                        }
                    }
                });
                if (gridlst.length > 0) {
                    $.ajax({
                        dataType: "json",
                        type: "POST",
                        async: false,
                        url: "/TestCase/ExecuteTestCase",
                        data: { lGrid: JSON.stringify(gridlst), lTestCaseId: tcid, lTestSuiteId: tsid, storyboradId: sid, storyborad: sname },
                        success: function (result) {
                            if (result.status == 1) {
                                $("#txtareacopy").val(result.data.TcJson);
                                 lLoginUser = result.data.user;
                                 lDataBase = result.data.database;
                                 lguid = result.data.guid;
                            }
                            else if (result.status == 0) {
                                swal.fire({
                                    "title": "",
                                    "text": result.message,
                                    "icon": result.data == 0 ? "warning" : "error",
                                    "onClose": function (e) {
                                        console.log('on close event fired!');
                                    }
                                });
                            }
                        },
                        complete: function (result) {
                            //stoploader();
                        }
                    });

                }
                else {
                    //stoploader();
                    swal.fire({
                        "title": "",
                        "text": "Please select Testcase row step.",
                        "icon": "warning",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            } else {
                //stoploader();
                swal.fire({
                    "title": "",
                    "text": "Please select Testcase row step.",
                    "icon": "warning",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
                }


            $.each(applistobj, function (key, value) {
                var appobj = {
                    name: 'Execute temp steps...on ' + value.ApplicationName,
                    cls: 'VIEWTESTCASERoleHide',
                    action: function (evt, ui) {
                        engineURI = window.location.origin + '@MarsengineURL' + "?userName=" + lLoginUser + "&command=-FromClipboard&storyBoadName=" + sname + "&storyBoardId=" + sid + "&app=" + value.ApplicationId + "&guid=" + lguid + "&currentDB=" + lDataBase;
                        $("#txtareacopy").css("display", "block");
                        $("#txtareacopy")[0].select();
                        window.document.execCommand("Copy");
                        $("#txtareacopy").css("display", "none");
                        if (engineURI != "")
                            window.open(engineURI);
                    }
                };
                bodyItem.push(appobj);
            })
            return bodyItem;
        }

        function TCexecutestep(tcgrid, tcid, tsid, sid, sname, appnameid) {
            startloader();
            var gridlst = [];
            var engineURI = "";
            if (selectChange != "") {
                var sChange = selectChange.selection._areas;
                console.log('test', sChange);
                $.each(sChange, function (key, value) {
                    var index = value.firstR;
                    var srow = gridobj[tcgrid].pdata[index];
                    if (srow != undefined) {
                        if (srow.keyword != "PegWindow") {
                            var pgridlist = gridobj[tcgrid].pdata.filter(({ RUN_ORDER, keyword }) => RUN_ORDER < Number(srow.RUN_ORDER) && keyword === "PegWindow");
                            var pegwindowRow = pgridlist[pgridlist.length - 1];
                            var pegRowInselect = gridlst.find(({ RUN_ORDER }) => RUN_ORDER === pegwindowRow.RUN_ORDER);
                            if (pegRowInselect == undefined) {
                                gridlst.push(pegwindowRow);
                            }
                        }
                        var RowInselect = gridlst.find(({ RUN_ORDER }) => RUN_ORDER === srow.RUN_ORDER);
                        if (RowInselect == undefined) {
                            gridlst.push(srow);
                        }
                    }
                });
                if (gridlst.length > 0) {
                    $.ajax({
                        dataType: "json",
                        type: "POST",
                        async: true,
                        url: "/TestCase/ExecuteTestCase",
                        data: { lGrid: JSON.stringify(gridlst), lTestCaseId: tcid, lTestSuiteId: tsid, storyboradId: sid, storyborad: sname },
                        success: function (result) {
                            if (result.status == 1) {
                                $("#txtareacopy").val(result.data.TcJson);
                                stoploader();
                                //$("#txtareacopy").css("display", "block");
                                //$("#txtareacopy")[0].select();
                                //window.document.execCommand("Copy");

                                var lLoginUser = result.data.user;
                                var lDataBase = result.data.database;
                                var lguid = result.data.guid;
                                //$("#txtareacopy").css("display", "none");
                                engineURI = window.location.origin + '@MarsengineURL' + "?userName=" + lLoginUser + "&command=-FromClipboard&storyBoadName=" + sname + "&storyBoardId=" + sid + "&app=" + appnameid + "&guid=" + lguid + "&currentDB=" + lDataBase;
                            }
                            else if (result.status == 0) {
                                swal.fire({
                                    "title": "",
                                    "text": result.message,
                                    "icon": result.data == 0 ? "warning" : "error",
                                    "onClose": function (e) {
                                        console.log('on close event fired!');
                                    }
                                });
                            }
                        },
                        complete: function (result) {
                            stoploader();
                        }
                    });

                }
                else {
                    stoploader();
                    swal.fire({
                        "title": "",
                        "text": "Please select Testcase row step.",
                        "icon": "warning",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            } else {
                stoploader();
                swal.fire({
                    "title": "",
                    "text": "Please select Testcase row step.",
                    "icon": "warning",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
            }
        }
        function UpdateValuesInTestCaseSession(propertyName, propertyValue, stepId, isSkipChange, skipValue) {
            if ((propertyValue != "" && propertyValue != undefined && propertyValue != null) || isSkipChange == true) {
                $.ajax({
                    url: "/TestCase/UpdateTestcaseValueInSession",
                    type: "GET",
                    data: {
                        PropertyName: propertyName,
                        PropertyValue: propertyValue,
                        stepId: stepId,
                        testCaseId: @ViewBag.TestcaseId,
                        isSkipChange: isSkipChange,
                        skipValue: skipValue
                    },
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                    }
                });
            }
        }
        function DeleteTestCaseRowInSession(stepId, runOrder) {
            $.ajax({
                url: "/TestCase/DeleteTestCaseRowInSession",
                type: "GET",
                data: {
                    stepId: stepId,
                    runOrder: runOrder,
                    testCaseId: @ViewBag.TestcaseId,
                },
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                }
            });
        }
        function AddNewRowTestCaseInSession(oldRunOrder, NewRowRunOrder) {
            $.ajax({
                url: "/TestCase/AddNewRowTestCaseInSession",
                type: "GET",
                data: {
                    oldRunOrder: oldRunOrder,
                    NewRowRunOrder: NewRowRunOrder,
                    testCaseId: @ViewBag.TestcaseId,
                },
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                }
            });
        }
    </script>
}
@{

    var BProjectId = "aProject" + ViewBag.TestcaseId;
    var BTSId = "aTestSuite" + ViewBag.TestcaseId;
    var BTCId = "aTestCase" + ViewBag.TestcaseId;
}
<div class="kt-subheader   kt-grid__item" id="kt_subheader" style="left: @ViewBag.width;">
    <div class="kt-container  kt-container--fluid ">
        <div class="kt-subheader__main">
            <input type="hidden" id="hdnProjectId" value="@ViewBag.ProjectId" />
            <input type="hidden" id="hdnTestsuiteId" value="@ViewBag.TestsuiteId" />
            <input type="hidden" id="hdnTestcaseId" value="@ViewBag.TestcaseId" />
            <span class="kt-subheader__separator kt-hidden"></span>
            <div class="kt-subheader__breadcrumbs">
                @*<a href="#" class="kt-subheader__breadcrumbs-home">
                        <i class="flaticon2-shelter" style="color:#1c6081;"></i>
                    </a>*@
                <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081;display:none;" id="@BProjectId">
                </a>
                <i class="fa fa-angle-double-right" style="color:#1c6081;display:none;">&nbsp;</i>
                <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081;display:none;" id="@BTSId">
                    &nbsp;   Test Suites
                </a>
                <i class="fa fa-angle-double-right" style="color:#1c6081;display:none;">&nbsp;</i>
                <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081;display:none;" id="@BTCId">
                    &nbsp;  FX Spot Verify
                </a>
            </div>
        </div>
        <div class="kt-subheader__toolbar">
        </div>
    </div>
</div>
<div class="kt-portlet__body">
    <div id="grid" class="@lclassgrid" style="margin:auto;padding:0px 10px;"></div>
</div>


@*<script>
       $(document).ready(function () {
           var lProjectId = $("#hdnProjectId").val();
           var lTestSuiteId = $("#hdnTestsuiteId").val() ;
           var lTestCaseId = $("#hdnTestcaseId").val();
              $.ajax({
                  dataType: "json",
                  type: "POST",
                  headers: { "Authorization": '@ViewBag.Accesstoken' },
                  url: "@ViewBag.WebAPIURL" + "api/GetTcName?lProjectId=@ViewBag.ProjectId&lTestSuiteId=@ViewBag.TestsuiteId&lTestCaseId=@ViewBag.TestcaseId",
                  success: function (result) {
                      if (result.length > 2) {
                          var lProjectName = result.split("#")[0];
                          var lTestCaseName = result.split("#")[1];
                          var lTestSuiteName = result.split("#")[2];

                          var BProjectId = "aProject" + @ViewBag.TestcaseId;
                          var BTSId = "aTestSuite" + @ViewBag.TestcaseId;
                          var BTCId = "aTestCase" + @ViewBag.TestcaseId;

                          $("#" + BProjectId)[0].innerHTML = lProjectName;
                          $("#" + BTSId)[0].innerHTML = lTestSuiteName;
                          $("#" + BTCId)[0].innerHTML = lTestCaseName;
                        $("#hdnTestsuiteId").val(@ViewBag.TestsuiteId);
                          $("#" + BProjectId).css("display", "block");
                          $("#" + BTSId).css("display", "block");
                          $("#" + BTCId).css("display", "block");
                          $("#" + BProjectId).prev().css("display", "block");
                          $("#" + BTSId).prev().css("display", "block");
                          $("#" + BTCId).prev().css("display", "block");
                      }
                  }
              });
       })
    </script>*@
