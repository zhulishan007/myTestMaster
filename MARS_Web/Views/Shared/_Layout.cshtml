@using MARS_Web.Helper;
@using MARS_Repository.ViewModel;
@{
    var PrivilegeList = Session["PrivilegeList"] as List<PrivilegeViewModel>;
    var RoleList = Session["RoleList"] as List<RoleViewModel>;
    var RESULTSHOWLabel = "none";
    var VIEWTESTCASELabel = "none";
    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("View Result Data"))
    {
        RESULTSHOWLabel = "block";
    }

    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("View TestCase"))
    {
        VIEWTESTCASELabel = "block";
    }

    var RENAMEDATASETROLEStyle = "none";
    var COPYDATASETROLEStyle = "none";
    var DELETEDATASETROLEStyle = "none";
    var ADDDATASETROLEStyle = "none";
    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename Dataset"))
    {
        RENAMEDATASETROLEStyle = "block";
    }

    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Copy Dataset"))
    {
        COPYDATASETROLEStyle = "block";
    }

    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete Dataset"))
    {
        DELETEDATASETROLEStyle = "block";
    }

    if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Add Dataset"))
    {
        ADDDATASETROLEStyle = "block";
    }
}

<!DOCTYPE html>
<html>
<head>
    <base href="">
    <meta charset="utf-8" />
    <style>
        .dataset_model-wide{
        width:778px !important;}
    .RESULTSHOWRoleHide{
        display:@RESULTSHOWLabel !important;
    }
        .VIEWTESTCASERoleHide{
        display:@VIEWTESTCASELabel !important;
    }

         .RENAMEDATASETROLE{
        display:@RENAMEDATASETROLEStyle !important;
    }
         .COPYDATASETROLE{
        display:@COPYDATASETROLEStyle !important;
    }
         .DELETEDATASETROLE{
        display:@DELETEDATASETROLEStyle !important;
    }
         .ADDDATASETROLE{
        display:@ADDDATASETROLEStyle !important;
    }


        .collapseBorder {
            border-bottom: 2px solid gray !important;
        }

        p.ui-draggable.ui-draggable-handle:active {
            color: red;
        }

        .ExpandAllSteps {
            background: url('/PQGridPro/images/ExpandAll.png') !important
        }

        .CollapseAll {
            background: url('/PQGridPro/images/CollapseAll.png') !important
        }

        .ui-icon-expand-Row {
            background: url('/PQGridPro/images/ExpandRows.png') !important;
            width: 20px !important;
            height: 20px !important;
            border-color: white;
        }

        .ui-icon-Copy {
            background: url('/PQGridPro/images/copy.png') !important
        }

        .ui-icon-Paste {
            background: url('/PQGridPro/images/paste.png') !important
        }

        .ui-icon-collapse-Row {
            background: url('/PQGridPro/images/CollapseRows.png') !important;
            width: 20px !important;
            height: 20px !important;
            border-color: white;
        }

        .grey {
            background-color: #c0c0c0;
        }

        .hideRightborder {
            border-right: none !important;
        }

        .hideLeftborder {
            border-left: none !important;
        }

        .ui-state-error {
            /*left: 25% !important;*/
        }

        .green {
            background-color: #59c0e7;
        }

        .lightblue {
            background-color: lightgreen;
        }

        .floatRight {
            float: right;
        }

        .kt-menu__item1:hover {
            cursor: pointer;
        }

        #clsTSTC span {
            height: 37px;
        }

        .popover-body {
            background-color: rgb(28, 96, 129);
            color: #fff !important;
            /*font-size: medium;*/
            font-size: small;
        }

        #clsobject span {
            height: 37px;
        }

        td {
            word-break: break-all;
            /*word-wrap: normal;*/
        }

        .dual-listbox__title {
            background-color: #e9f5ff;
        }

        .swal2-icon-content{
        display:none !important;
        }
    </style>

    <meta name="description" content="Updates and statistics">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">


    <link href="~/assets/css/json-viewer.css" rel="stylesheet" />
    <link href="~/assets/plugins/global/plugins.bundle.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/css/style.bundle.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/plugins/custom/datatables/datatables.bundle.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/css/skins/header/base/light.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/css/skins/header/menu/light.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/css/skins/brand/dark.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/css/skins/aside/dark.css" rel="stylesheet" type="text/css" />

    <link href="~/assets/css/simplebar.css" rel="stylesheet" />
    <link href="~/assets/css/custom.css" rel="stylesheet" />

    <link href="~/assets/css/custom.css" rel="stylesheet" />
    <link href="~/PQGridPro/css/pqgrid.dev.css" rel="stylesheet" />

    <link href="~/PQGridPro/css/pqgrid.ui.dev.css" rel="stylesheet" />
    <link href="~/PQGridPro/pqSelect/pqselect.dev.css" rel="stylesheet" />

    <link href="~/assets/css/simpleXML.css" rel="stylesheet" />

    <script src="~/PQGridPro/js/jquery-1.9.1.min.js"></script>
    <script src="~/assets/plugins/global/plugins.bundle.js" type="text/javascript"></script>

    <script src="~/PQGridPro/js/jquery-ui.min.js"></script>
    <script src="~/PQGridPro/js/pqgrid.dev.js"></script>

    <script src="~/PQGridPro/pqSelect/pqselect.dev.js"></script>


    <script src="~/PQGridPro/jsZip-2.5.0/jszip.min.js"></script>

    <script src="~/assets/js/simplebar.min.js"></script>
    @*<script src="~/assets/js/pages/components/extended/dual-listbox.js"></script>*@
    <script src="~/Scripts/jquery.signalR-2.4.1.js"></script>
    <script src="~/signalr/hubs"></script>

    @*<script src="https://code.highcharts.com/highcharts.js"></script>
        <script src="https://code.highcharts.com/highcharts-3d.js"></script>*@
    <script>
        var gridobj = {};
        var ExistDataSetRenameList = [];
        var DeleteColumnsList = [];

    </script>
    @*<title>Mars Revamp</title>*@
    <title>Mars - [@SessionManager.Schema/@SessionManager.Host]</title>
    <!--begin::Page Vendors(used by this page) -->
</head>
<body class="kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header-mobile--fixed kt-subheader--enabled kt-subheader--fixed kt-subheader--solid kt-aside--enabled kt-aside--fixed kt-page--loading">
    <!-- begin:: Page -->
    <!-- begin:: Header Mobile -->

    <div id="kt_header_mobile" class="kt-header-mobile  kt-header-mobile--fixed " style="background-color:#1582ab;">
        <div class="kt-header-mobile__logo">
            <a href="index.html">
                @*<img alt="Logo" src="~/assets/media/logo/logo.gif" height="50px;" />*@
            </a>
        </div>

        <div class="kt-header-mobile__toolbar">
            <button class="kt-header-mobile__toggler kt-header-mobile__toggler--left" id="kt_aside_mobile_toggler"><span></span></button>
            <button class="kt-header-mobile__toggler" id="kt_header_mobile_toggler"><span></span></button>
            <button class="kt-header-mobile__topbar-toggler" id="kt_header_mobile_topbar_toggler"><i class="flaticon-more"></i></button>
        </div>
    </div>
    <!-- end:: Header Mobile -->
    <!--<div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>-->
    <div class="lds-roller">
        <img src="/assets/media/mars.gif" style="width:80px;" />
    </div>
    <div class="kt-grid kt-grid--hor kt-grid--root" id="mainbody">
        <div class="kt-grid__item kt-grid__item--fluid kt-grid kt-grid--ver kt-page">
            <!-- begin:: Aside -->
            <!-- Uncomment this to display the close button of the panel
            <button class="kt-aside-close " id="kt_aside_close_btn"><i class="la la-close"></i></button>
            -->
            <input type="hidden" id="hdnLeftPanelWidth" value="200" />
            <div class="kt-aside  kt-aside--fixed  kt-grid__item kt-grid kt-grid--desktop kt-grid--hor-desktop" id="kt_aside">
                <!-- begin:: Aside -->
                <div class="kt-aside__brand kt-grid__item " id="kt_aside_brand" style="margin-top:10px;">
                    <div class="kt-aside__brand-logo">
                        <img alt="Logo" src="~/assets/media/Logo/MARS_LOGO.png" style="width:100%;max-width:200px;" />
                    </div>
                    <div class="kt-aside__brand-tools">
                        <button class="kt-aside__brand-aside-toggler" id="kt_aside_toggler">
                            <span>
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1" class="kt-svg-icon">
                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                        <polygon points="0 0 24 0 24 24 0 24" />
                                        <path d="M5.29288961,6.70710318 C4.90236532,6.31657888 4.90236532,5.68341391 5.29288961,5.29288961 C5.68341391,4.90236532 6.31657888,4.90236532 6.70710318,5.29288961 L12.7071032,11.2928896 C13.0856821,11.6714686 13.0989277,12.281055 12.7371505,12.675721 L7.23715054,18.675721 C6.86395813,19.08284 6.23139076,19.1103429 5.82427177,18.7371505 C5.41715278,18.3639581 5.38964985,17.7313908 5.76284226,17.3242718 L10.6158586,12.0300721 L5.29288961,6.70710318 Z" fill="#000000" fill-rule="nonzero" transform="translate(8.999997, 11.999999) scale(-1, 1) translate(-8.999997, -11.999999) " />
                                        <path d="M10.7071009,15.7071068 C10.3165766,16.0976311 9.68341162,16.0976311 9.29288733,15.7071068 C8.90236304,15.3165825 8.90236304,14.6834175 9.29288733,14.2928932 L15.2928873,8.29289322 C15.6714663,7.91431428 16.2810527,7.90106866 16.6757187,8.26284586 L22.6757187,13.7628459 C23.0828377,14.1360383 23.1103407,14.7686056 22.7371482,15.1757246 C22.3639558,15.5828436 21.7313885,15.6103465 21.3242695,15.2371541 L16.0300699,10.3841378 L10.7071009,15.7071068 Z" fill="#000000" fill-rule="nonzero" opacity="0.3" transform="translate(15.999997, 11.999999) scale(-1, 1) rotate(-270.000000) translate(-15.999997, -11.999999) " />
                                    </g>
                                </svg>
                            </span>
                            <span>
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1" class="kt-svg-icon">
                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                        <polygon points="0 0 24 0 24 24 0 24" />
                                        <path d="M12.2928955,6.70710318 C11.9023712,6.31657888 11.9023712,5.68341391 12.2928955,5.29288961 C12.6834198,4.90236532 13.3165848,4.90236532 13.7071091,5.29288961 L19.7071091,11.2928896 C20.085688,11.6714686 20.0989336,12.281055 19.7371564,12.675721 L14.2371564,18.675721 C13.863964,19.08284 13.2313966,19.1103429 12.8242777,18.7371505 C12.4171587,18.3639581 12.3896557,17.7313908 12.7628481,17.3242718 L17.6158645,12.0300721 L12.2928955,6.70710318 Z" fill="#000000" fill-rule="nonzero" />
                                        <path d="M3.70710678,15.7071068 C3.31658249,16.0976311 2.68341751,16.0976311 2.29289322,15.7071068 C1.90236893,15.3165825 1.90236893,14.6834175 2.29289322,14.2928932 L8.29289322,8.29289322 C8.67147216,7.91431428 9.28105859,7.90106866 9.67572463,8.26284586 L15.6757246,13.7628459 C16.0828436,14.1360383 16.1103465,14.7686056 15.7371541,15.1757246 C15.3639617,15.5828436 14.7313944,15.6103465 14.3242754,15.2371541 L9.03007575,10.3841378 L3.70710678,15.7071068 Z" fill="#000000" fill-rule="nonzero" opacity="0.3" transform="translate(9.000003, 11.999999) rotate(-270.000000) translate(-9.000003, -11.999999) " />
                                    </g>
                                </svg>
                            </span>
                        </button>
                    </div>
                </div>
                <!-- end:: Aside -->
                <!-- begin:: Aside Menu -->
                <div class="kt-aside-menu-wrapper kt-grid__item kt-grid__item--fluid" id="kt_aside_menu_wrapper">
                    <div id="kt_aside_menu" class="kt-aside-menu " data-ktmenu-vertical="1" data-ktmenu-scroll="1" data-ktmenu-dropdown-timeout="500">
                        <ul class="kt-menu__nav " id="leftProjectList">

                            @Html.Partial("LeftPanel", Session["LeftProjectList"] as List
                            <ProjectByUser>)
                        </ul>
                    </div>
                </div>
                <!-- end:: Aside Menu -->
            </div>
            <!-- end:: Aside -->
            <div class="kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor kt-wrapper" id="kt_wrapper">
                <!-- begin:: Header -->
                <div id="kt_header" class="kt-header kt-grid__item  kt-header--fixed " style="max-height:40px;">
                    <!-- begin:: Header Menu -->
                    <div class="kt-header-menu-wrapper" id="kt_header_menu_wrapper">
                        <div id="kt_header_menu" class="kt-header-menu kt-header-menu-mobile  kt-header-menu--layout-default ">
                            <ul class="kt-menu__nav ">
                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Application"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                                            <span class="kt-menu__link-text">Application</span>
                                            <i class="kt-menu__ver-arrow la la-angle-right"></i>
                                        </a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                <li class="kt-menu__item " aria-haspopup="true">
                                                    <a href="javascript:;" onclick=PartialRightSideAplicationGrid("0") class="kt-menu__link ">
                                                        <span class="kt-menu__link-icon">
                                                            <i class="flaticon-list-2"></i>
                                                        </span><span class="kt-menu__link-text">List</span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                }
                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Project"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                                            <span class="kt-menu__link-text">Project</span>
                                            <i class="kt-menu__ver-arrow la la-angle-right"></i>
                                        </a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                <li class="kt-menu__item " aria-haspopup="true">
                                                    <a href="javascript:;" onclick=PartialRightSideProjectGrid("0") class="kt-menu__link ">
                                                        <span class="kt-menu__link-icon">
                                                            <i class="flaticon-list-2"></i>
                                                        </span><span class="kt-menu__link-text">List</span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                }
                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("TestSuite"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                                            <span class="kt-menu__link-text">Test Suite</span>
                                            <i class="kt-menu__ver-arrow la la-angle-right"></i>
                                        </a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add TestSuite") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit TestSuite") ||
                                                    PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("View TestSuite") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete TestSuite"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" onclick=PartialRightSideTestSuiteGrid("0") class="kt-menu__link ">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="flaticon-list-2"></i>
                                                            </span><span class="kt-menu__link-text">List</span>
                                                        </a>
                                                    </li>
                                                }
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import TestSuite"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" onclick=PartialRightSideImportTestSuite("0") class="kt-menu__link ">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-import"></i>
                                                            </span><span class="kt-menu__link-text">Import</span>
                                                        </a>

                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </li>
                                }
                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("TestCase"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle"><span class="kt-menu__link-text">Test Case</span><i class="kt-menu__ver-arrow la la-angle-right"></i></a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                <li class="kt-menu__item " aria-haspopup="true">
                                                    <a href="javascript:;" onclick=PartialRightSideTestCaseGrid("0") class="kt-menu__link ">
                                                        <span class="kt-menu__link-icon">
                                                            <i class="flaticon-list-2"></i>
                                                        </span><span class="kt-menu__link-text">List</span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                }

                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Storyboard") && PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import Storyboard"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle"><span class="kt-menu__link-text">Storyboard</span><i class="kt-menu__ver-arrow la la-angle-right"></i></a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                <li class="kt-menu__item " aria-haspopup="true">
                                                    <a href="javascript:;" onclick=PartialRightImportStoryboard("0") class="kt-menu__link ">
                                                        <span class="kt-menu__link-icon">
                                                            <i class="fa fa-file-import"></i>
                                                        </span><span class="kt-menu__link-text">Import</span>
                                                    </a>

                                                </li>
                                        </div>
                                    </li>
                                }

                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Variable"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle"><span class="kt-menu__link-text">Variables</span><i class="kt-menu__ver-arrow la la-angle-right"></i></a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">

                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add Variable") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Variable") ||
                                                    PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("View Variable") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete Variable"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" onclick=PartialRightSideVariablesGrid("0") class="kt-menu__link ">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="flaticon-list-2"></i>
                                                            </span><span class="kt-menu__link-text">List</span>
                                                        </a>
                                                    </li>
                                                }
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Export Variable"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" onclick="ExportVariables()" class="kt-menu__link ">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-export"></i>
                                                            </span><span class="kt-menu__link-text">Export</span>
                                                        </a>
                                                    </li>
                                                }
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import Variable"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" onclick=ImportVariables("0") class="kt-menu__link ">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-import"></i>
                                                            </span><span class="kt-menu__link-text">Import</span>
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </li>
                                }

                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Keyword"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                                            <span class="kt-menu__link-text">Keyword</span>
                                            <i class="kt-menu__ver-arrow la la-angle-right"></i>
                                        </a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                <li class="kt-menu__item " aria-haspopup="true">
                                                    <a href="javascript:;" onclick=PartialRightSideKeywordGrid("0") class="kt-menu__link ">
                                                        <span class="kt-menu__link-icon">
                                                            <i class="flaticon-list-2"></i>
                                                        </span><span class="kt-menu__link-text">List</span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                }

                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Report Management"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle" onclick='PartialRightReportManagementGrid("0")'>
                                            <span class="kt-menu__link-text">Report Management</span>
                                            <i class="kt-menu__ver-arrow la la-angle-right"></i>
                                        </a>
                                        @*<div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                <li class="kt-menu__item " aria-haspopup="true">
                                                    <a href="javascript:;" onclick='PartialRightReportManagementGrid("0")' class="kt-menu__link ">
                                                        <span class="kt-menu__link-icon">
                                                            <i class="flaticon-list-2"></i>
                                                        </span><span class="kt-menu__link-text">List</span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>*@
                                    </li>
                                }

                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Object"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                                            <span class="kt-menu__link-text">Objects</span>
                                            <i class="kt-menu__ver-arrow la la-angle-right"></i>
                                        </a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add Object") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add Pegwindow Object") ||
                                                   PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Object") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("View Object") ||
                                                   PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete Object") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("SaveAs Object"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" class="kt-menu__link " onclick=partialOpenObjectList("0")>
                                                            <span class="kt-menu__link-icon">
                                                                <i class="flaticon-list-2"></i>
                                                            </span><span class="kt-menu__link-text">List</span>
                                                        </a>
                                                    </li>
                                                }
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import Object"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" class="kt-menu__link " onclick=ImportObjects("0")>
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-import"></i>
                                                            </span><span class="kt-menu__link-text">Import</span>
                                                        </a>

                                                    </li>
                                                }
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Export Object"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" class="kt-menu__link " data-toggle="modal" data-target="#ExportPopup" onclick="getApplicationList()">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-export"></i>
                                                            </span><span class="kt-menu__link-text">Export</span>
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </li>
                                }

                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Result Data") && PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import Result Data"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle"><span class="kt-menu__link-text">Result Set</span><i class="kt-menu__ver-arrow la la-angle-right"></i></a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                <li class="kt-menu__item " aria-haspopup="true">
                                                    <a href="javascript:;" onclick='PartialRightImportResultSet("0", null)' class="kt-menu__link ">
                                                        <span class="kt-menu__link-icon">
                                                            <i class="fa fa-file-import"></i>
                                                        </span><span class="kt-menu__link-text">Import</span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                }
                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Datasettag"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                                            <span class="kt-menu__link-text">DatasetTag</span>
                                            <i class="kt-menu__ver-arrow la la-angle-right"></i>
                                        </a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import Datasettag"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" class="kt-menu__link " onclick=ImportDatasetTag("0")>
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-import"></i>
                                                            </span><span class="kt-menu__link-text">Import</span>
                                                        </a>

                                                    </li>
                                                }
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Export Datasettag"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" class="kt-menu__link" onclick="ExportDatasetTag()">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-export"></i>
                                                            </span><span class="kt-menu__link-text">Export</span>
                                                        </a>
                                                    </li>
                                                }
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Export Datasettag Report"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" class="kt-menu__link" onclick="ExportReportDatasetTag()">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-export"></i>
                                                            </span><span class="kt-menu__link-text">Report Export</span>
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </li>
                                }
                                @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("CompareConfig"))
                                {
                                    <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                                        <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                                            <span class="kt-menu__link-text">Config</span>
                                            <i class="kt-menu__ver-arrow la la-angle-right"></i>
                                        </a>
                                        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                                            <ul class="kt-menu__subnav">
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import CompareConfig"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" class="kt-menu__link " onclick=ImportCompareConfig("0")>
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-import"></i>
                                                            </span><span class="kt-menu__link-text">Import</span>
                                                        </a>

                                                    </li>
                                                }
                                                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Export CompareConfig"))
                                                {
                                                    <li class="kt-menu__item " aria-haspopup="true">
                                                        <a href="javascript:;" class="kt-menu__link" onclick="ExportCompareConfig()">
                                                            <span class="kt-menu__link-icon">
                                                                <i class="fa fa-file-export"></i>
                                                            </span><span class="kt-menu__link-text">Export</span>
                                                        </a>
                                                    </li>
                                                }

                                            </ul>
                                        </div>
                                    </li>
                                }
                                @*@if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Display Chart"))
        {*@
                                @*<li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
                <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                    <span class="kt-menu__link-text">Charts</span>
                    <i class="kt-menu__ver-arrow la la-angle-right"></i>
                </a>
                <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                    <ul class="kt-menu__subnav">
                        <li class="kt-menu__item " aria-haspopup="true">
                            <a href="javascript:;" onclick=window.open("/Chart/ChartIndex") class="kt-menu__link ">
                                <span class="kt-menu__link-icon">
                                    <i class="flaticon-list-2"></i>
                                </span><span class="kt-menu__link-text">3D Charts</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </li>
        }
        <li class="kt-menu__item  kt-menu__item--submenu kt-menu__item--rel" data-ktmenu-submenu-toggle="hover" aria-haspopup="true">
            <a href="javascript:;" class="kt-menu__link kt-menu__toggle">
                <span class="kt-menu__link-text">Download</span>
                <i class="kt-menu__ver-arrow la la-angle-right"></i>
            </a>
            <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left">
                <ul class="kt-menu__subnav">
                    <li class="kt-menu__item " aria-haspopup="true">
                        <a href="~/Download/DownloadFile.pdf" class="kt-menu__link " target="_blank">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-file-pdf"></i>
                            </span><span class="kt-menu__link-text">Download File</span>
                        </a>
                    </li>
                </ul>
            </div>
        </li>*@
                            </ul>
                        </div>
                    </div>
                    <div class="modal fade" id="ExportPopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
                        <div class="modal-dialog modal-lg" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <label>Export Objects</label>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <form>
                                        <div class="form-group">
                                            <input type="hidden" id="hdnapplicationid" />
                                            <input type="hidden" id="hdnMovetestcaseId" />
                                            <label class="col-form-label col-lg-3 col-sm-12">Select Application to export Objects: </label>
                                            <div class=" col-lg-12 col-md-12 col-sm-12" id="clsobject">
                                                <select class="form-control" id="drpappobject" name="drpappobject" @*onclick="getApplicationList()"*@></select>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" onclick="exportObjects()">Export</button>
                                    <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- end:: Header Menu -->
                    <!-- begin:: Header Topbar -->
                    <div class="kt-header__topbar">
                        <div class="kt-header__topbar-item kt-header__topbar-item--quick-panel">
                            @*<span class="kt-header__topbar-icon" data-toggle="kt-tooltip" data-placement="top" title="@SessionManager.Schema">

                                    <i class="flaticon-coins"></i>
                                </span>*@
                            <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Database: @SessionManager.Schema/@SessionManager.Host" data-original-title="" title=""><i class="fa fa-database"></i></span>
                        </div>
                        <!--begin: Quick panel toggler -->
                        <div class="kt-header__topbar-item kt-header__topbar-item--quick-panel" data-toggle="kt-tooltip" title="Quick panel" data-placement="right">
                            <span class="kt-header__topbar-icon" id="kt_quick_panel_toggler_btn">
                                <i class="flaticon2-settings"></i>
                            </span>
                        </div>
                        <input type="hidden" id="hdnUserId" value="@SessionManager.TESTER_ID" />
                        <!--end: Quick panel toggler -->
                        <!--begin: User Bar -->
                        <div class="kt-header__topbar-item kt-header__topbar-item--user">
                            <div class="kt-header__topbar-wrapper" id="dropdownbox" data-toggle="dropdown" data-offset="0px,0px">
                                <div class="kt-header__topbar-user">
                                    <span class="kt-header__topbar-welcome kt-hidden-mobile">Hi,</span>
                                    <span class="kt-header__topbar-username kt-hidden-mobile">@SessionManager.TESTER_LOGIN_NAME</span>
                                    <img class="kt-hidden" alt="Pic" src="~/assets/media/users/300_25.jpg" />
                                    <!--use below badge element instead the user avatar to display username's first letter(remove kt-hidden class to display it) -->
                                    <span class="kt-badge kt-badge--username kt-badge--unified-success kt-badge--lg kt-badge--rounded kt-badge--bold">@SessionManager.TESTER_LOGIN_NAME.Substring(0, 1).ToUpper()</span>
                                </div>
                            </div>
                            <div class="dropdown-menu dropdown-menu-fit dropdown-menu-right dropdown-menu-anim dropdown-menu-top-unround dropdown-menu-xl" id="UserHeaderDropdown">
                                <!--begin: Head -->
                                @*<div class="kt-user-card kt-user-card--skin-dark kt-notification-item-padding-x" style="background-image: url(assets/media/misc/bg-1.jpg)">
                                        <div class="kt-user-card__avatar">
                                            <img class="kt-hidden" alt="Pic" src="~/assets/media/users/300_25.jpg" />
                                            <span class="kt-badge kt-badge--lg kt-badge--rounded kt-badge--bold kt-font-success"></span>

                                        </div>
                                        <div style="font-size: xx-large;color: lightblue;"> @(SessionManager.TESTER_NAME_F + "  " + SessionManager.TESTER_NAME_LAST)</div>
                                    </div>*@
                                <!--end: Head -->
                                <!--begin: Navigation -->
                                <div class="kt-notification">
                                    <a href="#" onclick="AddEditUser(@SessionManager.TESTER_ID)" class="kt-notification__item">
                                        <div class="kt-notification__item-icon">
                                            <i class="flaticon2-calendar-3 kt-font-success"></i>
                                        </div>
                                        <div class="kt-notification__item-details">
                                            <div class="kt-notification__item-title kt-font-bold">
                                                My Profile
                                            </div>
                                            <div class="kt-notification__item-time">
                                                Account settings and more
                                            </div>
                                        </div>
                                    </a>

                                    <div class="kt-notification__custom kt-space-between">
                                        <a href="@Url.Action("Logout","Login")" class="btn btn-label btn-label-brand btn-sm btn-bold">Sign Out</a>
                                    </div>
                                </div>
                                <!--end: Navigation -->
                            </div>
                        </div>
                        <!--end: User Bar -->
                    </div>
                    <!-- end:: Header Topbar -->
                </div>
                <!-- end:: Header -->
                @RenderBody()

                <!-- begin:: Footer -->
                @*<div class="kt-footer  kt-grid__item kt-grid kt-grid--desktop kt-grid--ver-desktop" id="kt_footer">
                        <div class="kt-container  kt-container--fluid ">

                            <div class="kt-footer__menu">
                                <a href="#" target="_blank" class="kt-footer__menu-link kt-link">About</a>
                                <a href="#" target="_blank" class="kt-footer__menu-link kt-link">Team</a>
                                <a href="#" target="_blank" class="kt-footer__menu-link kt-link">Contact</a>
                            </div>
                        </div>
                    </div>*@
                <!-- end:: Footer -->
            </div>
        </div>
    </div>
    <!-- end:: Page -->
    <!-- begin::Quick Panel -->
    <div id="kt_quick_panel" class="kt-quick-panel">
        <a href="#" class="kt-quick-panel__close" id="kt_quick_panel_close_btn"><i class="flaticon2-delete"></i></a>
        <div class="kt-quick-panel__nav">
            <ul class="tab_sidebar nav nav-tabs nav-tabs-line nav-tabs-bold nav-tabs-line-3x nav-tabs-line-brand  kt-notification-item-padding-x" role="tablist">
                <li class="nav-item active">
                    <a class="nav-link active" data-toggle="tab" href="#kt_quick_panel_tab_notifications" role="tab">User Configuration</a>
                </li>

            </ul>
        </div>
        <div class="kt-quick-panel__content">
            <div class="tab-content">
                <div class="tab-pane fade show kt-scroll active" id="kt_quick_panel_tab_notifications" role="tabpanel">
                    <div class="kt-notification">
                        @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("User List"))
                        {
                            <a href="#" onclick=RightSideUserGrid("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="fa fa-users"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Configure MARS users" data-original-title="" title="">User List</span>
                                    </div>
                                </div>
                            </a>
                        }
                        @*<a href="#" onclick=UserexecutionEnginePathList("0") class="kt-notification__item">
            <div class="kt-notification__item-icon">
                <i class="fa fa-route"></i>
            </div>
            <div class="kt-notification__item-details">
                <div class="kt-notification__item-title">
                    <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Location of the MARS Engine on the client's machine." data-original-title="" title="">Engine Path</span>
                </div>
            </div>
        </a>*@
                        @*<a href="#" onclick="PartialConnectionList()" class="kt-notification__item">
            <div class="kt-notification__item-icon">
                <i class="fa fa-users"></i>
            </div>
            <div class="kt-notification__item-details">
                <div class="kt-notification__item-title">
                    Database Connection
                </div>
                <div class="kt-notification__item-time">
                    DB Connection
                </div>
            </div>
        </a>*@
                        @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Assign Project") && PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Assign Project"))
                        {
                            <a href="#" onclick=partialRightOpenProjectList("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="flaticon-list-3"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Projects that will be displayed at login" data-original-title="" title="">Project Display List</span>
                                    </div>
                                </div>
                            </a>
                        }
                        @*<a href="#" onclick="OpenResizeLeftPanelPopup()" class="kt-notification__item">
            <div class="kt-notification__item-icon">
                <i class="flaticon2-arrow-1"></i>
            </div>
            <div class="kt-notification__item-details">
                <div class="kt-notification__item-title">
                    <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Set width in Left Panel" data-original-title="" title="">Resize Left Panel</span>
                </div>
            </div>
        </a>*@

                        @if (RoleList.Select(y => y.ROLE_NAME.Trim().ToLower()).ToList().Contains("admin"))
                        {
                            <a href="#" onclick=partialRightOpenUserList("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="flaticon-list-2"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content=" Assign projects to users." data-original-title="" title="">Assign Projects</span>
                                    </div>
                                </div>
                            </a>
                            <a href="#" onclick=RightSideUserActivePageList("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="fa fa-map-pin"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Active Page List" data-original-title="" title="">Active Page List</span>
                                    </div>
                                </div>
                            </a>
                        }
                        <a href="#" onclick=RightSideGridList("0") class="kt-notification__item">
                            <div class="kt-notification__item-icon">
                                <i class="flaticon2-arrow-1"></i>
                            </div>
                            <div class="kt-notification__item-details">
                                <div class="kt-notification__item-title">
                                    <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Set width for grid" data-original-title="" title="">Grid List Configuration</span>
                                </div>
                            </div>
                        </a>
                        @if (RoleList.Select(y => y.ROLE_NAME.Trim().ToLower()).ToList().Contains("admin"))
                        {
                            <a href="#" onclick=RightSideUserRoleMappingList("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="flaticon-list-2"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="User Role Mapping List" data-original-title="" title="">User Role Mapping List</span>
                                    </div>
                                </div>
                            </a>
                            <a href="#" onclick=RightSidePrivilegeRoleMapping("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="flaticon-list-2"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Privilege Role Mapping" data-original-title="" title="">Privilege Role Mapping</span>
                                    </div>
                                </div>
                            </a>
                        }
                        @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Group"))
                        {
                            <a href="#" onclick=RightSideGroupList("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="flaticon-list-2"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Group List" data-original-title="" title="">Group List</span>
                                    </div>
                                </div>
                            </a>
                        }
                        @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Set"))
                        {
                            <a href="#" onclick=RightSideSetList("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="flaticon-list-2"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Set List" data-original-title="" title="">Set List</span>
                                    </div>
                                </div>
                            </a>
                        }
                        @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Folder"))
                        {
                            <a href="#" onclick=RightSideFolderList("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="flaticon-list-2"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="Folder List" data-original-title="" title="">Folder List</span>
                                    </div>
                                </div>
                            </a>
                        }
                        @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("UserConfiguration"))
                        {
                            <a href="#" onclick=RightSideUserConfigList("0") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="fa fa-user"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="User Configuration" data-original-title="" title="">User Configuration</span>
                                    </div>
                                </div>
                            </a>
                        }
                        @if (PrivilegeList.Select(y => y.MODULE).ToList().Contains("Display Chart"))
                        {
                            <a href="javascript:;" onclick=window.open("/Chart/ChartIndex") class="kt-notification__item">
                                <div class="kt-notification__item-icon">
                                    <i class="fa fa-chart-area"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="User Configuration" data-original-title="" title="">Charts</span>
                                    </div>
                                </div>
                            </a>
                        }
                        <a href="~/Download/DownloadFile.pdf" class="kt-notification__item" target="_blank">
                                <div class="kt-notification__item-icon">
                                    <i class="fa fa-file-download"></i>
                                </div>
                                <div class="kt-notification__item-details">
                                    <div class="kt-notification__item-title">
                                        <span class="kt-header__topbar-icon" data-skin="brand" data-container="body" data-toggle="kt-popover" data-placement="bottom" data-content="User Configuration" data-original-title="" title="">Download File</span>
                                    </div>
                                </div>
                            </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- end::Quick Panel -->
    <!-- begin::Scrolltop -->
    <div id="kt_scrolltop" class="kt-scrolltop">
        <i class="fa fa-arrow-up"></i>
    </div>
    @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Add Storyboard") || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export Storyboard"))
    {
        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left" type="context" id="RightStoryboardAll" style="width:170px;margin-top: 5px;margin-bottom: 1rem;margin-right: 31px;margin-left: 0px;background-color:#1c6081;">
            <ul class="kt-menu__subnav " style="margin-left:-35px;margin-right:10px;margin-bottom:0px;margin-bottom:0px;">
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Add Storyboard"))
                {
                    <li class="kt-menu__item kt-menu__item1 " aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle ExportProject" data-project-id="" onclick="AddStoryboardContext()">
                            <span class="kt-menu__link-icon">
                                <i class="flaticon2-plus"></i>
                            </span><span class="kt-menu__link-text">Add Storyboard</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export Storyboard"))
                {
                    <li class="kt-menu__item kt-menu__item1 " aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle ExportProject" data-project-id="" onclick="ExportProject($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-file-export"></i>
                            </span><span class="kt-menu__link-text">Export All</span>
                        </a>
                    </li>
                }
            </ul>
        </div>
    }
    @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename Storyboard") || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("SaveAs Storyboard")
        || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete Storyboard") || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export Storyboard"))
    {
        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left" type="context" id="RightStoryboard" style="width:170px;margin-top: 5px;margin-bottom: 1rem;margin-right: 31px;margin-left: 0px;background-color:#1c6081;">
            <ul class="kt-menu__subnav " style="margin-left:-35px;margin-right:10px;margin-bottom:0px;margin-bottom:0px;">
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename Storyboard"))
                {
                    <li class="kt-menu__item kt-menu__item1" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" class="kt-menu__link " style="color:white !important" data-toggle="modal" @*data-target="#StoryboardPopup" *@ onclick="Showrenamepopup()">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-edit"></i>
                            </span><span class="kt-menu__link-text">Rename Storyboard</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("SaveAs Storyboard"))
                {
                    <li class="kt-menu__item kt-menu__item1" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" class="kt-menu__link " style="color:white !important" data-toggle="modal" data-target="#SaveasStoryboardPopup" onclick="showstoryboardpopup()">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-save"></i>
                            </span><span class="kt-menu__link-text">Save As Storyboard</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete Storyboard"))
                {
                    <li class="kt-menu__item kt-menu__item1 kt-menu__item--submenu" data-ktmenu-submenu-toggle="hover" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle deleteStoryboard" data-storyboard-id="" onclick="DeleteStoryboard($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-trash-alt"></i>
                            </span><span class="kt-menu__link-text">Delete Storyboard</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export Storyboard"))
                {
                    <li class="kt-menu__item kt-menu__item1 kt-menu__item--submenu" data-ktmenu-submenu-toggle="hover" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle ExportStoryboard" data-storyboard-id="" data-project-id="" onclick="ExportStoryboard($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-file-export"></i>
                            </span><span class="kt-menu__link-text">Export Storyboard</span>
                        </a>
                    </li>
                }
            </ul>
        </div>
    }
    @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename TestCase") || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete TestCase")
        || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export TestCase") || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("SaveAs TestCase")
        || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Move TestCase"))
    {
        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left" type="context" id="RightTestCase" style="width:170px;margin-top: 5px;margin-bottom: 1rem;margin-right: 31px;margin-left: 0px;background-color:#1c6081;">
            <ul class="kt-menu__subnav " style="margin-left:-35px;margin-right:10px;margin-bottom:0px;margin-bottom:0px;">
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename TestCase"))
                {
                    <li class="kt-menu__item kt-menu__item1" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" class="kt-menu__link " style="color:white !important" data-toggle="modal" data-target="#TestCasePopup" onclick="showrenameTestcasePopup()">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-edit"></i>
                            </span><span class="kt-menu__link-text">Rename Test Case</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete TestCase"))
                {
                    <li class="kt-menu__item kt-menu__item1 kt-menu__item--submenu" data-ktmenu-submenu-toggle="hover" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle deleteTestCase" data-testcase-id="" onclick="DeleteTestCase($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-trash-alt"></i>
                            </span><span class="kt-menu__link-text">Delete Test Case</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export TestCase"))
                {
                    <li class="kt-menu__item kt-menu__item1 kt-menu__item--submenu" data-ktmenu-submenu-toggle="hover" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle ExportTestCase" data-testcase-id="" data-testsuite-id="" onclick="ExportTestCase($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-file-export"></i>
                            </span><span class="kt-menu__link-text">Export Test Case</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("SaveAs TestCase"))
                {
                    <li class="kt-menu__item kt-menu__item1" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" class="kt-menu__link SaveAsTestCase " style="color:white !important" data-toggle="modal" data-target="#SaveTestCasePopup" onclick="showSaveAsTestCasePopup()">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-save"></i>
                            </span><span class="kt-menu__link-text">Save As Test Case</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Move TestCase"))
                {
                    <li class="kt-menu__item kt-menu__item1" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" class="kt-menu__link moveTestCase " onclick="getTestSuiteByProject()" style="color:white !important" data-toggle="modal" data-target="#moveTestCassePopup">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-arrows-alt"></i>
                            </span><span class="kt-menu__link-text">Move Test Case</span>
                        </a>
                    </li>
                }
            </ul>
        </div>
    }
    <div class="modal fade" id="moveTestCassePopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <label>Move Test Case</label>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <input type="hidden" id="hdnMoveProjectId" />
                            <input type="hidden" id="hdnMovetestcaseId" />
                            <label class="col-form-label col-lg-3 col-sm-12">Select Test Suite </label>
                            <div class=" col-lg-12 col-md-12 col-sm-12" id="clsTSTC">
                                <select class="form-control" id="drpTs" name="drpTs" style="width: 749px;" onclick="getTestSuiteByProject()">


                                    @*@{var lsuitelist = ViewBag.testsuiteList as IEnumerable<SelectListItem>;
                                            <optgroup label="Applications">
                                                @foreach (var item in lsuitelist)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </optgroup>
                                        }*@
                                </select>

                            </div>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="moveTestCasetoTestSuite()">Save</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="AddStoryboardContext" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Add Storyboard</span>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addstoryboardcontext">
                        <div class="form-group">
                            <label for="name" class="form-control-label">Storyboard Name<span style="color:red">&nbsp;*</span></label>
                            <input type="text" class="form-control" id="contextStoryboardname" name="contextStoryboardname" onchange="checkstoryboardnameContext()" maxlength="64">
                            <label id="contextstoryboarderror" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">Storyboard already exists.</label>

                        </div>
                        <div class="form-group">
                            <label for="message-text" class="form-control-label">Storyboard Description<span style="color:red">&nbsp;*</span></label>
                            <textarea class="form-control" id="contextStoryboardDesc" name="contextStoryboardDesc" required maxlength="128"></textarea>
                        </div>
                        @*<div class="form-group">
                              <label for="Des" class="form-control-label">Storyboard Description:</label>
                              <textarea rows="4" class="form-control" id="contextStoryboardDesc" name="contextStoryboardDesc" maxlength="128">

                             </textarea>
                            </div>*@
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" id="savestoryboardcontext" class="btn btn-primary" onclick="StoryboardSaveContext()">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="SaveasStoryboardPopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <span>SaveAs Storyboard</span>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="name" class="form-control-label">Storyboard:</label>
                            <input type="text" class="form-control" id="Storyboardname" onchange="CheckDuplicateRenameStoryboardExistForSaveas()" maxlength="64">
                            <div id="Storyboarderror" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">Storyboard already exists.</div>
                            <input type="hidden" id="hdnstoryboardid">
                        </div>
                        <div class="form-group">
                            <label for="Des" class="form-control-label">Storyboard Description:</label>
                            <textarea rows="4" class="form-control" id="StoryboardDesc" maxlength="128">
                                
                            </textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" id="savestoryboard" class="btn btn-primary" onclick="saveAsStoryboard()">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="SaveTestCasePopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <span>SaveAs TestCase</span>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label class="form-control-label">Select Test Case SaveAs Option:</label>
                            <select class="form-control kt-select2" id="DrpslcSaveAsOption" name="DrpslcSaveAsOption" onchange="SelectDatasetOption()">
                                <option value="1">No Datasets copied</option>
                                <option value="2">One DataSet copied</option>
                                <option value="3">All DataSets copied</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="name" class="form-control-label">Test Case:</label>
                            <input type="text" class="form-control" id="TestCaseName" onchange="CheckDuplicateRenameTestCaseExistForSaveas()" maxlength="64">
                            <div id="TestCaseerror" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">Test Case Name alredy exist.</div>
                            <input type="hidden" id="hdntestcaseId">
                            <input type="hidden" id="hdnRenameTestSuiteCaseId">
                            <input type="hidden" id="hdnRenameTestProjectCaseId">
                        </div>
                        <div class="form-group">
                            <label for="Des" class="form-control-label">Test Case Description:</label>
                            <textarea rows="4" class="form-control" id="TestCaseDesc" maxlength="128">
                                
                            </textarea>
                        </div>
                        <div class="form-group" id="slcDataSet" style="display:none">
                            <label class="form-control-label">Select DataSet:</label>
                            <select class="form-control kt-select2" id="DrpslcDataSet" name="DrpslcDataSet"></select>
                        </div>
                        <div class="form-group" id="suffixText" style="display:none">
                            <label for="name" class="form-control-label">DataSet Suffix:<span style="color:red">&nbsp;*</span></label>
                            <input type="text" class="form-control" id="suffixId" maxlength="10">
                            <div id="suffixerror" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">This field is required.</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" id="btnsaveastestcase" class="btn btn-primary" onclick="SaveAsTestcase()">Save</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="TestCasePopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Rename Test Case</span>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="name" class="form-control-label">Test Case:<span style="color:red">&nbsp;*</span></label>
                            <input type="text" class="form-control" id="RenameTestCaseName" onblur="CheckDuplicateRenameTestCaseExist()" maxlength="64">
                            <div id="RenameTestCaseerror" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">Test Case Name alredy exist.</div>
                            <input type="hidden" id="hdnRenameTestCaseId">
                            <input type="hidden" id="hdnRenameTestSuiteCaseId">
                            <input type="hidden" id="hdnRenameTestProjectCaseId">
                        </div>
                        <div class="form-group">
                            <label for="Des" class="form-control-label">Test Case Description:<span style="color:red">&nbsp;*</span></label>
                            <textarea rows="4" class="form-control" id="RenameTestCaseDesc" maxlength="128">
                                
                            </textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="RenameTestCase()">Rename</button>
                </div>
            </div>
        </div>
    </div>

    @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename TestSuite") || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete TestSuite")
        || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export TestSuite"))
    {
        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left" type="context" id="RightTestSuite" style="width:156px;margin-top:5px;margin-bottom:1rem;margin-right:31px;margin-left:0px;background-color:#1c6081;">
            <ul class="kt-menu__subnav" style="margin-left:-35px;margin-right:10px;margin-bottom:0px;margin-bottom:0px;">
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename TestSuite"))
                {
                    <li class="kt-menu__item kt-menu__item1 " aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" style="color:white !important" class="kt-menu__link " data-toggle="modal" data-target="#TestSuitePopup" onclick="showrenameTestSuitePopup()">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-edit"></i>
                            </span><span class="kt-menu__link-text">Rename Test Suite</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete TestSuite"))
                {
                    <li class="kt-menu__item kt-menu__item1 kt-menu__item--submenu" data-ktmenu-submenu-toggle="hover" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle deleteTestSuite" data-testsuite-id="" onclick="DeleteTestSuite($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-trash-alt"></i>
                            </span><span class="kt-menu__link-text">Delete Test Suite</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export TestSuite"))
                {
                    <li class="kt-menu__item kt-menu__item1 kt-menu__item--submenu" data-ktmenu-submenu-toggle="hover" aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle ExportTestSuite" data-testsuite-id="" onclick="ExportTestSuite($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-file-export"></i>
                            </span><span class="kt-menu__link-text">Export Test Suite</span>
                        </a>
                    </li>
                }
            </ul>
        </div>
    }
    <div class="modal fade" id="StoryboardPopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Rename Storyboard</span>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="name" class="form-control-label">Storyboard Name:<span style="color:red">&nbsp;*</span></label>
                            <input type="text" class="form-control" id="RenameStoryboardname" onblur="CheckduplicateStoryboardExists()" maxlength="64">
                            <div id="Renamestoryboarderror" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">Storyboard already exists.</div>
                            <input type="hidden" id="hdnRenameStoryboardId">
                            <input type="hidden" id="hdnRenameProjectId">
                        </div>
                        <div class="form-group">
                            <label for="Des" class="form-control-label">Description:<span style="color:red">&nbsp;*</span></label>
                            <textarea rows="4" class="form-control" id="RenamestoryboardDesc" maxlength="128">
                                
                            </textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="RenameStoryboard()">Rename</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="TestSuitePopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Rename Test Suite</span>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="name" class="form-control-label">Test Suite:<span style="color:red">&nbsp;*</span></label>
                            <input type="text" class="form-control" id="RenameTestSuiteName" onchange="CheckDuplicateRenameTestSuiteExist()" maxlength="64">
                            <div id="RenameTestSuiteerror" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">Test Suite Name alredy exist.</div>
                            <input type="hidden" id="hdnRenameTestSuiteId">
                            <input type="hidden" id="hdnRenameTestProjectSuiteId">
                        </div>
                        <div class="form-group">
                            <label for="Des" class="form-control-label">Test Suite Description:<span style="color:red">&nbsp;*</span></label>
                            <textarea rows="4" class="form-control" id="RenameTestSuiteDesc" maxlength="128">
                                
                            </textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="RenameTestSuite()">Rename</button>
                </div>
            </div>
        </div>
    </div>

    @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename Project") || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete Project")
        || PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export Result Data"))
    {
        <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left" type="context" id="RightProject" style="width:211px;margin-top:5px;margin-bottom:1rem;margin-right:31px;margin-left:0px;background-color:#1c6081;">
            <ul class="kt-menu__subnav" style="margin-left:-35px;margin-right:10px;margin-bottom:0px;margin-bottom:0px;">
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Rename Project"))
                {
                    <li class="kt-menu__item kt-menu__item1 " aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" style="color:white !important" class="kt-menu__link " data-toggle="modal" data-target="#ProjectPopup" onclick="showProjectRenamePopup()">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-edit"></i>
                            </span><span class="kt-menu__link-text">Rename Project</span>
                        </a>
                    </li>

                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Delete Project"))
                {
                    <li class="kt-menu__item kt-menu__item1 " aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" style="color:white !important" class="kt-menu__link deleteproject" data-toggle="modal" data-project-id="" onclick="DeleteProject($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-trash-alt"></i>
                            </span><span class="kt-menu__link-text">Delete Project</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Export Result Data"))
                {
                    <li class="kt-menu__item kt-menu__item1 " aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" style="color:white !important" class="kt-menu__link exportprojectresultset" data-toggle="modal" data-project-id="" onclick="ExportResultSetProject($(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-file-export"></i>
                            </span><span class="kt-menu__link-text">Export ResultSet</span>
                        </a>
                    </li>
                }
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME).ToList().Contains("Import Result Data"))
                {
                    <li class="kt-menu__item kt-menu__item1 " aria-haspopup="true" style="color:#fff; height:25px;">
                        <a href="#" style="color:white !important" class="kt-menu__link exportprojectresultset" data-toggle="modal" data-project-id="" onclick="PartialRightImportResultSet('0',$(this))">
                            <span class="kt-menu__link-icon">
                                <i class="fa fa-file-import"></i>
                            </span><span class="kt-menu__link-text">Import ResultSet</span>
                        </a>
                    </li>
                }
                <li class="kt-menu__item kt-menu__item1 kt-menu__item--submenu" data-ktmenu-submenu-toggle="hover" aria-haspopup="true" style="color:#fff; height:25px;">
                    <a href="javascript:;" style="color:white !important" class="kt-menu__link exportprojectresultset" data-project-id="" onclick="ExportProjectAllStoryboard($(this))">
                        <span class="kt-menu__link-icon">
                            <i class="fa fa-file-export"></i>
                        </span><span class="kt-menu__link-text">Export StoryBoard Summary</span>
                    </a>
                </li>
            </ul>
        </div>
    }


    <div class="modal fade" id="ProjectPopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="name" class="form-control-label">Project:<span style="color:red">&nbsp;*</span></label>
                            <input type="text" class="form-control" id="RenameProjectName" onblur="CheckDuplicateRenameProjectExist()" maxlength="32">
                            <div id="RenameProjecterror" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">Project Name alredy exist.</div>
                            <input type="hidden" id="hdnRenameProjectId">
                        </div>
                        <div class="form-group">
                            <label for="Des" class="form-control-label">Project Description:<span style="color:red">&nbsp;*</span></label>
                            <textarea rows="4" class="form-control" id="RenameProjectDesc" maxlength="128">
                                
                            </textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="">Close</button>
                    <button type="button" class="btn btn-primary" onclick="RenameProject()">Rename</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="ValidateMsgModel" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Validation Message</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="kt-scroll" data-scroll="true" data-height="250" id="ValidationMessageLabel">
                        @*<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
                            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
                            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>*@
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>

    <div class="kt-menu__submenu kt-menu__submenu--classic kt-menu__submenu--left" type="context" id="CloseTab" style="width:170px;margin-top: 5px;margin-bottom: 1rem;margin-right: 31px;margin-left: 0px;background-color:#1c6081;">
        <ul class="kt-menu__subnav " style="margin-left:-35px;margin-right:10px;margin-bottom:0px;margin-bottom:0px;">
            <li class="kt-menu__item kt-menu__item1 " id="righttabLi" aria-haspopup="true" style="color:#fff; height:56px;">
                <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle CloseAllBut " data-tab-name="" data-tab-id="" onclick="Closeallbutthistab($(this))">
                    <span class="kt-menu__link-icon">
                        <i class="fa fa-times-circle tab_close"></i>
                    </span><span class="kt-menu__link-text">Close all but this tab</span>
                </a>
                <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle CloseAll " data-tab-name="" data-tab-id="" onclick="CloseAll($(this))">
                    <span class="kt-menu__link-icon">
                        <i class="fa fa-times-circle tab_close"></i>
                    </span><span class="kt-menu__link-text">Close All</span>
                </a>
                <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle PinTab" data-tab-name="" data-tab-id="" onclick="PinTab($(this))">
                    <span class="kt-menu__link-icon">
                        <i class="fa fa-map-pin"></i>
                    </span><span class="kt-menu__link-text">Pin Tab</span>
                </a>
                <a href="javascript:;" style="color:white !important" class="kt-menu__link kt-menu__toggle UnPinTab" data-tab-name="" data-tab-id="" onclick="PinTab($(this))">
                    <span class="kt-menu__link-icon">
                        <i class="fa fa-mars-stroke-h"></i>
                        <!--<i class="fa fa-map-pin"></i>-->
                    </span><span class="kt-menu__link-text">UnPin Tab</span>
                </a>
            </li>
        </ul>
    </div>

    <div class="modal fade" id="ExecutePopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" style="margin-top: 2px;" id="exampleModalLabel">Execute Engine</h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <input type="hidden" id="hdnExeStoryboardId">
                        <input type="hidden" id="hdnExeStoryboardName">
                        <input type="hidden" id="hdnExeLoginUName" value="@SessionManager.TESTER_LOGIN_NAME">
                        <div class="form-group" style="margin-bottom: 1rem;">
                            <label for="name" class="form-control-label">Test On Applcation:</label>
                            <select class="form-control" id="drpExeApp" style="width: 260px;height: 32px;"></select>


                        </div>
                        <div class="form-group" style="margin-bottom: 1rem;">
                            <label for="name" class="form-control-label">Test Execution Mode:</label>
                            <select class="form-control" id="drpExecMode" style="width: 260px;height: 32px;">
                                <option value="Base">Baseline</option>
                                <option value="Compare">Compareline</option>
                            </select>


                        </div>
                        <div class="form-group" style="margin-bottom: 1rem;">
                            <label for="name" class="form-control-label">Continue to Test:</label>
                            <input type="checkbox" id="chkExeConTest" />


                        </div>
                        <div class="form-group" style="margin-bottom: 1rem;">
                            <label for="name" class="form-control-label">Ignore Runtime Error:</label>
                            <input type="checkbox" id="chkExeIgnoreError" />


                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="ExecuteEngine('@SessionManager.Schema')">Execute Storyboard</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="StoryboardTestResultPopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-xl" role="document" id="MdlTestResult">

        </div>
    </div>


    <div class="modal fade" id="ResultSetExport" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" style="margin-top: 2px;" id="exampleModalLabel">Result Set Export</h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <input type="hidden" id="hdnEStoryboardId">
                        <input type="hidden" id="hdnEProjectId">
                        <div class="form-group" style="margin-bottom: 1rem;">
                            <label for="name" class="form-control-label">Select Mode:</label>
                            <select class="form-control" id="drpRMode" style="width: 260px;height: 32px;">
                                <option value="1">Baseline</option>
                                <option value="0">Compare</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="ExportResultSet()">Export Results</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="ResultSetProjectExport" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" style="margin-top: 2px;" id="exampleModalLabel">Result Set Export</h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <input type="hidden" id="hdnExpProjectId">
                        <div class="form-group" style="margin-bottom: 1rem;">
                            <label for="name" class="form-control-label">Select Mode:</label>
                            <select class="form-control" id="drpPRMode" style="width: 260px;height: 32px;">
                                <option value="1">Baseline</option>
                                <option value="0">Compare</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="ExportPResultSet()">Export Results</button>
                </div>
            </div>
        </div>
    </div>
    @*<div class="modal fade" id="ResizeLeftPanel" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="">Resize Left Panel</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="name" class="form-control-label">Enter width</label>
                                <input type="number" max="400" min="150" value="200" class="form-control" id="resizeLeftPanel">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="">Close</button>
                        <button type="button" class="btn btn-primary" onclick="ResizeLeftPanel()">Update</button>
                    </div>
                </div>
            </div>
        </div>*@

    @{
        var authenticationSettings = System.Configuration.ConfigurationManager.GetSection("system.web/authentication") as System.Web.Configuration.AuthenticationSection;
    }
    <!--ENd:: Chat-->
    <!-- begin::Global Config(global config for global JS sciprts) -->
    <script>
        var KTAppOptions = {
            "colors": {
                "state": {
                    "brand": "#5d78ff",
                    "dark": "#282a3c",
                    "light": "#ffffff",
                    "primary": "#5867dd",
                    "success": "#34bfa3",
                    "info": "#36a3f7",
                    "warning": "#ffb822",
                    "danger": "#fd3995"
                },
                "base": {
                    "label": [
                        "#c5cbe3",
                        "#a1a8c3",
                        "#3d4465",
                        "#3e4466"
                    ],
                    "shape": [
                        "#f0f3ff",
                        "#d9dffa",
                        "#afb4d4",
                        "#646c9a"
                    ]
                }
            }
        };</script>

    <script src="~/assets/js/scripts.bundle.js" type="text/javascript"></script>
    <script src="~/assets/plugins/custom/datatables/datatables.bundle.js" type="text/javascript"></script>
    <script src="~/assets/plugins/custom/jquery-ui/jquery-ui.bundle.js" type="text/javascript"></script>
    <script src="~/assets/js/pages/components/portlets/draggable.js" type="text/javascript"></script>
    <script src="~/assets/js/simplebar.min.js"></script>
    <script src="~/Scripts/CrudOperation/Custom_crud.js"></script>
    <script src="~/Scripts/Tab/Custom_AddingTab.js"></script>
    <script src="~/Scripts/Import_Export/Custom_ImporExport.js"></script>
    <script src="~/assets/js/pages/components/extended/sweetalert2.js" type="text/javascript"></script>
    <script src="~/assets/js/pages/crud/forms/widgets/select2.js" type="text/javascript"></script>

    <script src="~/Scripts/ExecuteEngine/ExecuteEngine.js"></script>

    <script>
        $(document).ready(function () {

             var lwidth = @ViewBag.LeftPanelwidth;
            $(".kt-aside").css("width", lwidth + "px");
            $("#kt_header").css("left", lwidth + "px");
            $(".kt-wrapper").css("padding-left", lwidth + "px");
            $(".kt-subheader").css("left", lwidth + "px");
            $("#hdnLeftPanelWidth").val(lwidth);

            function ilSessionTimeout() {
                window.location = '@Url.Action("login", "login", new { area = "" })';
            };
            function ilSessionTimeoutWarning() {
                $.jGrowl('You will be logged off soon due to inactivity.', { sticky: true, theme: 'growl-warning', header: 'Attention' });
            };
            // remember our timers so we can cancel when we unload this page and reset them on the next page load
            var g_pageTimer = window.setTimeout(ilSessionTimeout, @authenticationSettings.Forms.Timeout.TotalMilliseconds);
            var g_pageTimerWarning = window.setTimeout(ilSessionTimeoutWarning, Math.round(@authenticationSettings.Forms.Timeout.TotalMilliseconds*0.8));
            // clean up anything that needs cleaning before we leave this page
            window.onbeforeunload = function(e) {
                // clear the timers
                window.clearTimeout(g_pageTimer);
                window.clearTimeout(g_pageTimerWarning);
            };

            $.ajax({
                type: "post",
                url: "/StoryBoard/SignalRConnect",
                async: false,
                success: function (d) {
                    /* d is the HTML of the returned response */



                }
            });
        });

      var datasetobj;
        var lobjTestSuite;
        var lobjTestCase;
        var lobjProject;
        var lobjstoryboard;

        function moveTestCasetoTestSuite() {
            var testsuite = $("#drpTs").val();
            if (testsuite == "" || testsuite=="0") {
                swal.fire({
                    "title": "",
                    "text": "Please select Test Suite",
                    "icon": "error",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
                return false;
            }
            startloader();
            var projectid = $("#hdnMoveProjectId").val();
            var testcaseid = $("#hdnMovetestcaseId").val();
            $.ajax({
                type: "post",
              url: "/TestCase/MoveTestCase",
                data: { lprojectId: projectid, lsuiteId: testsuite, caseId: testcaseid},
                async: false,
                success: function (result) {

                    if (result.status == 1) {
                        if (result.data.length > 0 && result.data!="success") {
                            var resultstring = "";
                            for (i = 0; i < result.data.length; i++) {

                                resultstring = resultstring + result.data[i] + " , ";
                            }
                            swal.fire(
                                '',
                                'Following Storyboards contain this TestCase. In order to delete this Test Case please remove this TestCase from storyboards. ' + "<br>" + resultstring,
                                'error'
                            )
                        }
                        else if (result.data == "success") {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "success",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                            $.ajax({
                                url: "/Login/LeftPanel",
                                type: "POST",
                                contentType: "application/json;charset=utf-8",
                                dataType: "HTML",
                                success: function (result) {
                                    $("#leftProjectList").html("");
                                    $("#leftProjectList").html(result);
                                }
                            });
                        }
                        $("#moveTestCassePopup").modal("hide");
                        stoploader();
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                        stoploader();
                    }
                    }
            });

        }
        function showstoryboardpopup() {
            $("#savestoryboard").attr("disabled", false);
            $("#savestoryboard").removeClass("disabled");


            $("#Storyboarderror").css("display", "none");
            $("#SaveasStoryboardPopup").modal("show");
            $('.modal-dialog').draggable({
                handle: ".modal-header"
            });
        }
        function saveAsStoryboard() {
            $("#savestoryboard").prop("disabled", true);
            var regex = /^[a-zA-Z0-9-._(&)* ]*$/;
            var storyboardid = $("#hdnRenameStoryboardId").val();
            var projectid = $("#hdnRenameProjectId").val();
            var storyboardname = $("#Storyboardname").val();
            if (!regex.test(storyboardname)) {
                swal.fire({
                    "title": "",
                    "text": "Storyboard name must contain only letters, numbers, spaces and underscore characters",
                    "icon": "error",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
                $("#savestoryboard").attr("disabled", false);
                $("#savestoryboard").removeClass("disabled");

                return false;
            }
            var storyboarddesc = $("#StoryboardDesc").val();
            if (storyboardname == "") {
                swal.fire({
                    "title": "",
                    "text": "Please enter storyboard name",
                    "icon": "error",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
                $("#savestoryboard").attr("disabled", false);
                $("#savestoryboard").removeClass("disabled");

                return false;
            }
            startloader();

            $.ajax({
                url: "/Storyboard/SaveAsStoryboard",
                data: '{"storyboardname":"' + storyboardname + '","storyboarddesc":"' + storyboarddesc + '","oldstoryboardid":"' + storyboardid + '","projectid":"' + projectid + '"}',
                type: "POST",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                async: false,
                success: function (result) {
                    if (result.status == 1) {
                        $("#SaveasStoryboardPopup").modal("toggle");
                        $("#Storyboardname").val("");
                        $("#hdnRenameStoryboardId").val("");
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "success",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                        $.ajax({
                            url: "/Login/LeftPanel",
                            type: "POST",
                            contentType: "application/json;charset=utf-8",
                            dataType: "HTML",
                            async: false,
                            success: function (result) {
                                $("#leftProjectList").html("");
                                $("#leftProjectList").html(result);
                            }
                        });
                        $("#SaveasStoryboardPopup").modal("toggle");
                        $("#savestoryboard").attr("disabled", false);
                        $(lobjstoryboard).attr("data-name", storyboardname);
                        stoploader();
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                        $("#savestoryboard").attr("disabled", false);
                        stoploader();
                    }
                    $("#savestoryboard").removeClass("disabled");
                    stoploader();
                },
            });
        }

        function SelectDatasetOption() {
            var optionval = $("#DrpslcSaveAsOption").val();
            if (optionval == "1") {
                $("#suffixerror").css("display", "none");
                $("#slcDataSet").css("display", "none");
                $("#suffixText").css("display", "none");
            }
            else if (optionval == "2") {
                $("#suffixerror").css("display", "none");
                $("#slcDataSet").css("display", "block");
                $("#suffixText").css("display", "block");
            }
            else if (optionval == "3") {
                $("#suffixerror").css("display", "none");
                $("#slcDataSet").css("display", "none");
                $("#suffixText").css("display", "block");
            }
        }

        function showSaveAsTestCasePopup() {
            var testcaseid = $("#hdntestcaseId").val();
            $.ajax({
                url: "/Accounts/GetDataSetListbyId",
                data: JSON.stringify({ "lTestCaseId": testcaseid }),
                type: "POST",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                    if (result.status == 1) {
                        $('#DrpslcDataSet').html('');
                        $.each(result.data, function (index, obj) {
                            $('#DrpslcDataSet').append(
                                $('<option/>')
                                    .attr('value', obj.Datasetname)
                                    .text(obj.Datasetname)
                            );
                        });
                        $("#DrpslcSaveAsOption").val("1");
                        $("#suffixText").css("display", "none");
                        $("#slcDataSet").hide();
                        $("#btnsaveastestcase").prop("disabled", false);
                        $("#TestCaseerror").css("display", "none");
                        $("#suffixerror").css("display", "none");
                        $("#SaveTestCasePopup").modal("show");
                        $('.modal-dialog').draggable({
                            handle: ".modal-header"
                        });
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                },
            });
        }
        function SaveAsTestcase() {
            var testcasename = $("#TestCaseName").val();
            var testcasedesc = $("#TestCaseDesc").val();
            var testcaseid = $("#hdntestcaseId").val();
            var optionval = $("#DrpslcSaveAsOption").val();
            if (testcaseid == "" || testcaseid == null) {
                testcaseid = 0;
            }
            $("#btnsaveastestcase").prop("disabled", true);
            if (testcasename == "") {
                swal.fire({
                    "title": "",
                    "text": "Please enter Test Case name",
                    "icon": "error",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
                $("#btnsaveastestcase").prop("disabled", false);
                return false;
            }
            var testsuiteid = $("#hdnRenameTestSuiteCaseId").val();
            var projectid = $("#hdnRenameTestProjectCaseId").val();

            var datasetName = $('#DrpslcDataSet').val();
            var suffix = $('#suffixId').val();
            if (suffix == "" && (optionval == "2" || optionval == "3" )) {
                $("#suffixerror").css("display", "block");
                $("#btnsaveastestcase").prop("disabled", false);
                return false;
            }

             startloader();
            $("#SaveTestCasePopup").modal("hide");
                $.ajax({
                    url: "/TestCase/SaveAsTestCase",
                    data: '{"testcasename":"' + testcasename + '","oldtestcaseid":"' + testcaseid + '","testcasedesc":"' + testcasedesc + '","testsuiteid":"' + testsuiteid + '","projectid":"' + projectid + '","optionval":"' + optionval + '","datasetName":"' + datasetName + '","suffix":"' + suffix +'"}',
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        $("#suffixId").val("");
                        if (result.status == 1) {
                            if (result.data == "success") {
                                $("#TestCaseName").val("");
                                $("#hdntestcaseId").val("")
                                swal.fire({
                                    "title": "",
                                    "text": result.message,
                                    "icon": "success",
                                    "onClose": function (e) {
                                        console.log('on close event fired!');
                                    }
                                });
                                stoploader();
                                $("#btnsaveastestcase").prop("disabled", false);
                                $.ajax({
                                    url: "/Login/LeftPanel",
                                    type: "POST",
                                    contentType: "application/json;charset=utf-8",
                                    dataType: "HTML",
                                    success: function (result) {
                                        $("#leftProjectList").html("");
                                        $("#leftProjectList").html(result);
                                    }
                                });
                            } else if (result.data == "This dataset already exist") {
                                swal.fire({
                                    "title": "",
                                    "text": result.message,
                                    "icon": "error",
                                    "onClose": function (e) {
                                        console.log('on close event fired!');
                                    }
                                });
                                $("#btnsaveastestcase").prop("disabled", false);
                                $("#TestCaseerror").css("display", "none");
                                stoploader();
                            }
                            else {
                                swal.fire({
                                    "title": "",
                                    "text": "Testcase name must be unique.",
                                    "icon": "error",
                                    "onClose": function (e) {
                                        console.log('on close event fired!');
                                    }
                                });
                                $("#btnsaveastestcase").prop("disabled", false);
                                $("#TestCaseerror").css("display", "none");
                                stoploader();
                            }
                        }
                        else if (result.status == 0) {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "error",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }
                    },
                });
        }

        function GetStoryboard(ProjectId, obj) {
            $.ajax({
                type: "post",
                url: "/Login/LeftPanelStoryboard",
                data: { ProjectId: ProjectId },
                async: false,
                success: function (d) {
                    $(obj).next(".kt-menu__submenu").html(d); //replaces previous HTML with action
                }                
            });            
        }
        function GetVariable(ProjectId, obj) {
            $.ajax({
                type: "post",
                url: "/Login/LeftPanelVariable",
                data: { ProjectId: ProjectId },
                async: false,
                success: function (d) {
                    $(obj).next(".kt-menu__submenu").html(d); //replaces previous HTML with action
                }
            });
        }
        function exportObjects() {
            var appname = $("#drpappobject option:selected");
          appname = appname.text();
          if (appname == "") {
            swal.fire({
              "title": "",
              "text": "Please select an application to export!",
              "icon": "error",
              "onClose": function (e) {
                console.log('on close event fired!');
              }
            });
            return false;
          }
            var app = $("#drpappobject").val();
            $('#ExportPopup').modal('hide');
            startloader();
            $.ajax({
                url: '/Object/ExportObject', //call your controller and action
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: { application: appname },
            }).done(function (result) {
                stoploader();
               // if (result.status == 1) {
                window.location = "/TestSuite/DownloadExcel?FileName=" + result;
                $('#drpappobject').html("");
                //}
                   //else if (result.status == 0) {
                   //         swal.fire({
                   //             "title": "",
                   //             "text": result.message,
                   //             "type": "error",
                   //             "onClose": function (e) {
                   //                 console.log('on close event fired!');
                   //             }
                   //         });
                   //     }
            });
        }
        function getApplicationList() {
            $.ajax({
                type: "post",
                url: "/Object/ApplicationList",
                async: false,
                success: function (result) {
                    if (result.status == 1) {
                        $("#drpappobject").html('');
                        var optionString = "<optgroup><option value=0></option>";
                        optionString = optionString;
                        for (i = 0; i < result.data.length; i++) {

                            var optionValue = i + 1;
                            var optionText = result.data[i];

                            optionString = optionString + " <option value='" + optionValue + "'>" + optionText + "</option>";
                        }
                        optionString = optionString + "</optgroup>";
                        $("#drpappobject").append($(optionString));
                        $("#drpappobject").select2();
                        $("#drpappobject").select2();
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                }
            });
        }
        function getTestSuiteByProject() {

            var projectid = $("#hdnMoveProjectId").val();
            $("#drpTs").select2();
            $("#drpTs").html("");
            $.ajax({
                type: "post",
              url: "/TestCase/GetTestSuiteByproject",
                data: { ProjectId: projectid },
                async: false,
                success: function (result) {
                    if (result.status == 1) {
                        var optionString = "<optgroup>";
                        optionString = optionString + " <option value=0></option>";
                        for (i = 0; i < result.data.length; i++) {
                            var optionValue = result.data[i].TestsuiteId;
                            var optionText = result.data[i].TestsuiteName;

                            optionString = optionString + " <option value='" + optionValue + "'>" + optionText + "</option>";
                        }
                        optionString = optionString + "</optgroup>";
                        $("#drpTs").append($(optionString));
                        $("#drpTs").select2();

                        $("#drpTs").select2();
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                }
            });

        }
        function GetTestSuite(ProjectId, obj) {

            $.ajax({
                type: "post",
                url: "/Login/LeftPanelTestSuite",
                data: { ProjectId: ProjectId },
                async: false,
                success: function (d) {
                    /* d is the HTML of the returned response */
                    $(obj).next(".kt-menu__submenu").html(d); //replaces previous HTML with action


                }
            });
        }

        function GetTestCase(ProjectId, TestsuiteId, obj) {
            $.ajax({
                type: "post",
                url: "/Login/LeftPanelTestCase",
                data: { ProjectId: ProjectId, TestSuiteId: TestsuiteId },
                async: false,
                success: function (d) {
                    /* d is the HTML of the returned response */
                    $(obj).next(".kt-menu__submenu").html(d); //replaces previous HTML with action
                }
            });
        }

        function GetDataSet(lProjectId, lTestSuiteId, lTestCaseId, lProjectName, lTestSuiteName, lTestCaseName, obj) {

           $.ajax({
                type: "post",
                url: "/Login/LeftPanelDataSet",
                data: { lProjectId: lProjectId, lTestSuiteId: lTestSuiteId, lTestCaseId: lTestCaseId, lProjectName: lProjectName, lTestSuiteName: lTestSuiteName, lTestCaseName: lTestCaseName},
                async: false,
                success: function (d) {
                    var flag = false;
                  $(obj).parent().next(".kt-menu__submenu").html(d);
                }
            });           
        }

        function Get(ProjectId, TestsuiteId, obj) {
            $.ajax({
                type: "post",
                url: "/Login/LeftPanelTestCase",
                data: { ProjectId: ProjectId, TestSuiteId: TestsuiteId },
                async: false,
                success: function (d) {
                    /* d is the HTML of the returned response */
                    $(obj).next(".kt-menu__submenu").html(d); //replaces previous HTML with action
                }
            });
        }

        $(document).ready(function () {
            if ($(".context-menu-StoryboardAll").addEventListener) {
                $("#test").addEventListener('contextmenu', function (e) {
                    alert("You've tried to open context menu"); //here you draw your own menu
                    e.preventDefault();
                }, false);
            }
            else {

                //document.getElementById("test").attachEvent('oncontextmenu', function() {
                //$(".test").bind('contextmenu', function() {
                $('body').on('contextmenu', 'a.context-StoryboardAll', function () {
                    //alert("contextmenu"+event);
                    document.getElementById("RightStoryboardAll").className = "rightcontext";
                    document.getElementById("RightStoryboardAll").style.top = mouseY(event) + 'px';
                    document.getElementById("RightStoryboardAll").style.left = mouseX(event) + 'px';
                    window.event.returnValue = false;
                    var storyboardid = $(this).attr("data-id");
                    var storyboardname = $(this).attr("data-name");
                    var lTestProjectId = $(this).attr("data-ts-pj-id");
                    $("#RenameStoryboardname").val(storyboardname);
                    $("#hdnRenameStoryboardId").val(storyboardid);
                    $("#hdnRenameProjectId").val(lTestProjectId);
                    $(".ExportProject").attr("data-project-id", lTestProjectId);

                    lobjstoryboard = $(this);
                });
            }
            if ($(".context-menu-Storyboard").addEventListener) {
                $("#test").addEventListener('contextmenu', function (e) {
                    alert("You've tried to open context menu"); //here you draw your own menu
                    e.preventDefault();
                }, false);
            }
            else {

                $('body').on('contextmenu', 'a.context-Storyboard', function () {
                    //alert("contextmenu"+event);
                    document.getElementById("RightStoryboard").className = "rightcontext";
                    document.getElementById("RightStoryboard").style.top = mouseY(event) + 'px';
                    document.getElementById("RightStoryboard").style.left = mouseX(event) + 'px';
                    window.event.returnValue = false;
                    var storyboardid = $(this).attr("data-id");
                    var storyboardname = $(this).attr("data-name");
                    var lTestProjectId = $(this).attr("data-Project-Id");
                    var storyboarddesc = $(this).attr("title");
                    $("#RenameStoryboardname").val(storyboardname);
                    $("#Storyboardname").val(storyboardname);
                    $("#hdnRenameStoryboardId").val(storyboardid);
                    $("#hdnstoryboardid").val(storyboardid);
                    $("#hdnRenameProjectId").val(lTestProjectId);
                    $("#StoryboardDesc").text(storyboarddesc);
                    $("#StoryboardDesc").val(storyboarddesc);
                    $("#RenamestoryboardDesc").text(storyboarddesc);
                    $("#RenamestoryboardDesc").val(storyboarddesc);
                    $(".ExportStoryboard").attr("data-storyboard-id", storyboardid);
                    $(".ExportStoryboard").attr("data-project-id", lTestProjectId);
                    $(".deleteStoryboard").attr("data-storyboard-id", storyboardid)

                    lobjstoryboard = $(this);
                });
            }

            if ($(".context-menu-TestCase").addEventListener) {
                $("#test").addEventListener('contextmenu', function (e) {
                    alert("You've tried to open context menu"); //here you draw your own menu
                    e.preventDefault();
                }, false);
            } else {

                //document.getElementById("test").attachEvent('oncontextmenu', function() {
                //$(".test").bind('contextmenu', function() {
                $('body').on('contextmenu', 'a.context-TestCase', function () {
                    //alert("contextmenu"+event);
                    document.getElementById("RightTestCase").className = "rightcontext";
                    document.getElementById("RightTestCase").style.top = mouseY(event) + 'px';
                    document.getElementById("RightTestCase").style.left = mouseX(event) + 'px';

                    window.event.returnValue = false;
                    var lTestCaseId = $(this).attr("data-id");
                    var lTestCasename = $(this).attr("data-name");
                    var lTestCaseDesc = $(this).attr("title");
                    var lTestSuiteId = $(this).attr("data-TestSuite-id");
                    var lTestProjectId = $(this).attr("data-Project-id");
                    $("#RenameTestCaseName").val(lTestCasename);
                    $("#hdnRenameTestCaseId").val(lTestCaseId);
                    $("#hdntestcaseId").val(lTestCaseId);
                    $("#hdnRenameTestSuiteCaseId").val(lTestSuiteId);
                    $("#hdnRenameTestProjectCaseId").val(lTestProjectId);
                    $("#hdnMoveProjectId").val(lTestProjectId);
                    $("#hdnMovetestcaseId").val(lTestCaseId);
                    $("#TestCaseName").val(lTestCasename);
                    $("#RenameTestCaseDesc").text(lTestCaseDesc);
                    $("#RenameTestCaseDesc").val(lTestCaseDesc);
                    $("#TestCaseDesc").text(lTestCaseDesc);
                    $("#TestCaseDesc").val(lTestCaseDesc);
                    $(".deleteTestCase").attr("data-testcase-id", lTestCaseId);
                    $(".ExportTestCase").attr("data-testcase-id", lTestCaseId);
                    $(".ExportTestCase").attr("data-testsuite-id", lTestSuiteId);
                    //$(".SaveAsTestCase").attr("data-case-id", lTestCaseId);

                    lobjTestCase = $(this);
                });
            }


            if ($(".context-menu-TestSuite").addEventListener) {
                $("#test").addEventListener('contextmenu', function (e) {
                    alert("You've tried to open context menu"); //here you draw your own menu
                    e.preventDefault();
                }, false);
            } else {

                //document.getElementById("test").attachEvent('oncontextmenu', function() {
                //$(".test").bind('contextmenu', function() {
                $('body').on('contextmenu', 'a.context-TestSuite', function () {

                    //alert("contextmenu"+event);
                    document.getElementById("RightTestSuite").className = "rightcontext";
                    document.getElementById("RightTestSuite").style.top = mouseY(event) + 'px';
                    document.getElementById("RightTestSuite").style.left = mouseX(event) + 'px';

                    window.event.returnValue = false;
                    var lTestSuiteId = $(this).attr("data-id");
                    var lTestSuitename = $(this).attr("data-name");
                    var lTestProjectId = $(this).attr("data-Project-id");
                    var lTestsuitedesc = $(this).attr("title");
                    $("#RenameTestSuiteName").val(lTestSuitename);
                    $("#TestSuiteName").val(lTestSuitename);
                    $("#TestSuiteDesc").text(lTestsuitedesc);
                    $("#TestSuiteDesc").val(lTestsuitedesc);
                    $("#RenameTestSuiteDesc").val(lTestsuitedesc);
                    $("#RenameTestSuiteDesc").text(lTestsuitedesc);
                    $("#hdnRenameTestSuiteId").val(lTestSuiteId);
                    $("#hdntestsuiteid").val(lTestSuiteId);
                    $("#hdnRenameTestProjectSuiteId").val(lTestProjectId);
                    $("#hdnprojectid").val(lTestProjectId);
                    $(".deleteTestSuite").attr("data-testsuite-id", lTestSuiteId);
                    $(".ExportTestSuite").attr("data-testsuite-id", lTestSuiteId);
                    lobjTestSuite = $(this);
                });
            }

            if ($(".context-menu-Project").addEventListener) {
                $("#test").addEventListener('contextmenu', function (e) {
                    alert("You've tried to open context menu"); //here you draw your own menu
                    e.preventDefault();
                }, false);
            } else {
                $('body').on('contextmenu', 'a.context-Project', function () {
                    document.getElementById("RightProject").className = "rightcontext";
                    document.getElementById("RightProject").style.top = mouseY(event) + 'px';
                    document.getElementById("RightProject").style.left = mouseX(event) + 'px';

                    window.event.returnValue = false;
                    var lProjectId = $(this).attr("data-id");
                    var lProjectname = $(this).attr("data-name");
                    var lprojectdesc = $(this).attr("title");
                    $("#RenameProjectName").val(lProjectname);
                    $("#hdnRenameProjectId").val(lProjectId);
                    $("#RenameProjectDesc").val(lprojectdesc);
                    $(".ExportProject").attr("data-project-id", lProjectId);
                    $(".deleteproject").attr("data-project-id", lProjectId);
                    $(".exportprojectresultset").attr("data-project-id", lProjectId);
                    lobjproject = $(this);
                });
            }


            if ($(".context-menu-tab").addEventListener) {
                $("#test").addEventListener('contextmenu', function (e) {
                    alert("You've tried to open context menu"); //here you draw your own menu
                    e.preventDefault();
                }, false);
            }
            else {
                $('body').on('contextmenu', 'a.context-tab', function () {
                    document.getElementById("CloseTab").className = "rightcontext";
                    document.getElementById("CloseTab").style.top = mouseY(event) + 'px';
                    document.getElementById("CloseTab").style.left = mouseX(event) + 'px';
                    window.event.returnValue = false;
                    var flag = true;
                    var ltabId = $(this).attr("data-id");
                    var ltabName = $(this).attr("data-name");
                    var ltabDataName = $(this).attr("data-tab");
                    var lIsPin = $(this).attr("data-pin");
                    var ProjectId = $(this).attr("data-projectId") == undefined ? "0" : $(this).attr("data-projectId");
                    $(".CloseAllBut").attr("data-tab-name", ltabName);
                    $(".CloseAllBut").attr("data-tab-id", ltabId);

                    $(".CloseAll").attr("data-tab-name", ltabName);
                    $(".CloseAll").attr("data-tab-id", ltabId);

                    if (ltabDataName == "ImportResultSet" || ltabDataName == "GirdList" || ltabDataName == "UserRoleMappingList" || ltabDataName == "RolePrivileges"
                        || ltabDataName == "DataTag") {
                        flag = false;
                    }

                    $.ajax({
                        url: "/Accounts/CheckPinExist",
                        type: "POST",
                        data: JSON.stringify({ "datatab": ltabDataName, "dataid": ltabId, "ProjectId": ProjectId}),
                        contentType: "application/json;charset=utf-8",
                        dataType: "HTML",
                        success: function (result) {
                            result = JSON.parse(result);
                            if (result.status == 1) {
                                lIsPin = result.data;
                                $("#righttabLi").css("height", "56px");
                                if (!flag) {
                                    $(".PinTab").css("display", "none");
                                    $(".UnPinTab").css("display", "none");
                                    $("#righttabLi").css("height", "40px");
                                }
                                else {
                                    if (lIsPin == true) {
                                        $(".PinTab").attr("data-tab-name", ltabName);
                                        $(".PinTab").attr("data-tab-id", ltabId);
                                        $(".UnPinTab").attr("data-tab-name", ltabName);
                                        $(".UnPinTab").attr("data-tab-id", ltabId);
                                        $(".PinTab").css("display", "none");
                                        $(".UnPinTab").css("display", "block");
                                    } else {
                                        $(".PinTab").attr("data-tab-name", ltabName);
                                        $(".PinTab").attr("data-tab-id", ltabId);
                                        $(".UnPinTab").attr("data-tab-name", ltabName);
                                        $(".UnPinTab").attr("data-tab-id", ltabId);
                                        $(".UnPinTab").css("display", "none");
                                        $(".PinTab").css("display", "block");
                                    }
                                }
                            }
                            else if (result.status == 0) {
                                swal.fire({
                                    "title": "",
                                    "text": result.message,
                                    "icon": "error",
                                    "onClose": function (e) {
                                        console.log('on close event fired!');
                                    }
                                });
                            }
                        },
                    });
                });
            }
        });

        // this is from another SO post...
        $(document).bind("click", function (event) {
            if (document.getElementById("RightTestCase") != null)
                document.getElementById("RightTestCase").className = "rightContexthide";
            if (document.getElementById("RightTestSuite") != null)
                document.getElementById("RightTestSuite").className = "rightContexthide";
            if (document.getElementById("RightProject") != null)
                document.getElementById("RightProject").className = "rightContexthide";
            if (document.getElementById("RightStoryboard") != null)
                document.getElementById("RightStoryboard").className = "rightContexthide";
            if (document.getElementById("RightStoryboardAll") != null)
                document.getElementById("RightStoryboardAll").className = "rightContexthide";
            if (document.getElementById("CloseTab") != null)
            document.getElementById("CloseTab").className = "rightContexthide";
        });

        function mouseX(evt) {
            if (evt.pageX) {
                return evt.pageX;
            } else if (evt.clientX) {
                return evt.clientX + (document.documentElement.scrollLeft ?
                    document.documentElement.scrollLeft :
                    document.body.scrollLeft);
            } else {
                return null;
            }
        }

        function mouseY(evt) {
            if (evt.pageY) {
                return evt.pageY;
            } else if (evt.clientY) {
                return evt.clientY + (document.documentElement.scrollTop ?
                    document.documentElement.scrollTop :
                    document.body.scrollTop);
            } else {
                return null;
            }
        }

        function CheckDuplicateRenameTestSuiteExistForSaveas() {
            var testsuitename = $("#TestSuiteName").val();
            var testsuiteid = $("#hdntestsuiteid").val();
            if (testsuitename != "" && testsuitename != null) {
                $.ajax({
                    url: "/TestSuite/CheckDuplicateTestSuiteNameExist",
                    data: '{"TestSuiteName":"' + testsuitename + '","TestSuiteId":"' + testsuiteid + '"}',
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        if (result.status == 1) {
                        if (result.data == true) {
                            $("#TestSuiteName").val("");
                            $("#TestSuiteerror").css("display", "block");
                            }
                        }
                        else if (result.status == 0) {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "error",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }
                    },
                });
            }
        }
        $("#TestSuiteName").on('keyup', function () {
            $("#TestSuiteerror").css("display", "none");
        });

      function CheckduplicateStoryboardExists() {
        var storyboardid = $("#hdnRenameStoryboardId").val();
        var storyboardname = $("#RenameStoryboardname").val();

        if (storyboardname != "" && storyboardname != null) {
          $.ajax({
            url: "/Storyboard/CheckDuplicateStoryboardName",
            data: '{"storyboardname":"' + storyboardname + '","storyboardid":"' + storyboardid + '"}',
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                if (result.status == 1 && result.data == true) {
                $("#RenameStoryboardname").val("");
                $("#Renamestoryboarderror").css("display", "block");
                }
                else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            },
          });
        }
      }
        $("#RenameStoryboardname").on('keyup', function () {
            $("#Renamestoryboarderror").css("display", "none");
        });


        function CheckDuplicateRenameTestSuiteExist() {
            var lTestSuiteName = $("#RenameTestSuiteName").val();
            var lTestSuiteId = $("#hdnRenameTestSuiteId").val();

            $.ajax({
                url: "/TestSuite/CheckDuplicateTestSuiteNameExist",
                data: '{"TestSuiteName":"' + lTestSuiteName + '","TestSuiteId":"' + lTestSuiteId + '"}',
                type: "POST",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                    if (result.status == 1 && result.data== true) {
                        $("#RenameTestSuiteName").val("");
                        $("#RenameTestSuiteerror").css("display", "block");
                    } else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                },
            });
        }

        $("#RenameTestSuiteName").on('keyup', function () {
            $("#RenameTestSuiteerror").css("display", "none");
        });

        function CheckDuplicateRenameStoryboardExistForSaveas() {
            var sname = $("#Storyboardname").val();
            var sid = $("#hdnstoryboardid").val();
            var bool = false;
            if (sname != "" && sname != null) {
                $.ajax({
                  url: "/Storyboard/CheckDuplicateStoryboardName",
                    data: '{"storyboardname":"' + sname + '","storyboardid":"' + sid + '"}',
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        if (result.status == 1 && result == true) {
                            $("#Storyboardname").val("");
                            $("#Storyboarderror").css("display", "block");
                        } else if (result.status == 0) {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "error",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }
                    },
                });
            }

            $("#Storyboardname").on('keyup', function () {
                $("#Storyboarderror").css("display", "none");
        });
        }
        function CheckDuplicateRenameTestCaseExistForSaveas() {
            var lTestCaseName = $("#TestCaseName").val();
            var lTestCaseId = $("#hdntestcaseId").val();

            $.ajax({
                url: "/TestCase/CheckDuplicateTestCaseNameExist",
                data: '{"TestCaseName":"' + lTestCaseName + '","TestCaseId":"' + lTestCaseId + '"}',
                type: "POST",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                    if (result.status == 1) {
                    if (result.data == true) {
                        $("#TestCaseName").val("");
                        $("#TestCaseerror").css("display", "block");
                        }
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                },
            });
        }
        $("#TestCaseName").on('keyup', function () {
            $("#TestCaseerror").css("display", "none");
        });

        function ExecuteEnginePopup( lStoryboardName, lStoryboardId) {

            $("#hdnExeStoryboardId").val(lStoryboardId);
            $("#hdnExeStoryboardName").val(lStoryboardName);
            $.ajax({
                url: "/StoryBoard/GetApplicationListByStoryboard",
                type: "POST",
                data: '{"lStoryboardId":"' + lStoryboardId + '"}',
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {

                    if (result.status == 1) {
                        var ldrpString = "";
                        $.each(result.data, function (key, value) {
                            ldrpString = ldrpString+ "<option value=" + value.ApplicationId + "> " + value.ApplicationName + "</option>";
                        });
                        $("#drpExeApp").html("");
                        $("#drpExeApp").html(ldrpString);
                        $("#ExecutePopup").modal("toggle");
                    }
                    else if (result.status == 0) {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                },
            });
        }

        function startloader() {
            $(".lds-roller").show();
            $("body").css("pointer-events", "none");
           // $("#mainbody").css("opacity", "0.5");
           // $("#mainbody").css("z-index", "-1");
            $("#mainbody").css("opacity", "0.1");
            $("#mainbody").css("z-index", "1");
            $(".modal").css("opacity", "0.5");
            $(".lds-roller").css("opacity", "1");
            $(".lds-roller").css("z-index", "999999");
        }

        function stoploader() {
            $(".lds-roller").hide();
            $("body").css("pointer-events", "visible");
           // $("#mainbody").css("opacity", "1");
           // $("#mainbody").css("z-index", "1");
            $(".modal").css("opacity", "");
            $("#mainbody").css("opacity", "1");
            $("#mainbody").css("z-index", "1");
            $(".lds-roller").css("z-index", "");
            $(".lds-roller").css("opacity", "");
        }

    $("#tabsList").tabs({
        activate: function (evt, ui) {
            ui.newPanel.find(".pq-grid").pqGrid('refresh');
        }
    });

        $(".lsdatasetdrag > p").draggable(dragObj);
        var dragObj = {
            afterDrop: function () {
                // $(this).remove();
            },
            appendTo: document.body,
            helper: 'clone'
        }
    </script>

    <script>
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
        var box = document.getElementById('myBox')
        new SimpleBar(box);
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.executionResult;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                $('.ULtablist li').each(function (index, value) {
                    var lFindTab = $(value).children().first().attr("data-tab");

                    if (lFindTab == "Storyboard") {

                        var lFindTabId = $(value).children().first().attr("data-id");
                        var lFindTabName = ".grid" + $(value).children().first().attr("data-name");
                        var lFindProjectId = $(value).children().first().attr("data-projectid");


                        ReloadStoryboardResult(lFindTabName, lFindProjectId, lFindTabId);
                    }
                });

            };
            // Start the connection.
            $.connection.hub.start().done(function () {
                console.log("Connected!");
            }).fail(function () {
                console.log("Could not Connect!");
            });
        });

        function SBbodyItems(ui, ProjectId) {
            var ltestsuiteId;
            var ltestcaseId;
            var ltestsuitename = ui.rowData.testsuite;
            var lTestCaseName = ui.rowData.testcase;
            var ldatasetName = ui.rowData.dataset;
            var lstoryboardname = ui.rowData.Storyboardname;
            var lrun_order = ui.rowData.RUN_ORDER;
            if (ltestsuitename != undefined && ltestsuitename != "" && ltestsuitename != null && lTestCaseName != undefined && lTestCaseName != "" && lTestCaseName != null && ldatasetName != undefined && ldatasetName != "" && ldatasetName != null) {
                //$.ajax({

                //    url: "/Home/GetTSTCDSName",
                //    data: JSON.stringify({ TestCasename: lTestCaseName, TestSuitname: ltestsuitename, Datasetname: ldatasetName }),
                //    contentType: "application/json;charset=utf-8",
                //    dataType: "json",
                //    type: "POST",
                //    async: false,
                //    success: function (result) {
                //        if (result.status == 1) {
                //            if (result.data !== null) {
                //                ltestsuiteId = result.data[0];
                //                ltestcaseId = result.data[1];
                //            }
                //        } else if (result.status == 0) {
                //            swal.fire({
                //                "title": "",
                //                "text": result.message,
                //                "icon": "error",
                //                "onClose": function (e) {
                //                    console.log('on close event fired!');
                //                }
                //            });
                //        }
                //    },
                //});
                return [
                    {
                        name: 'Edit TestCase',
                        cls: 'VIEWTESTCASERoleHide',
                        action: function (evt, ui) {
                            var lProjectId = ProjectId;
                            $.ajax({
                                url: "/Home/GetTSTCDSName",
                                data: JSON.stringify({ TestCasename: lTestCaseName, TestSuitname: ltestsuitename, Datasetname: ldatasetName }),
                                contentType: "application/json;charset=utf-8",
                                dataType: "json",
                                type: "POST",
                                async: false,
                                success: function (result) {
                                    if (result.status == 1) {
                                        if (result.data !== null) {
                                            ltestsuiteId = result.data[0];
                                            ltestcaseId = result.data[1];
                                        }
                                        PartialRightGridTestCaseFromStoryboard(ltestcaseId, ltestsuiteId, lProjectId, ldatasetName, lTestCaseName, null);
                                    } else if (result.status == 0) {
                                        swal.fire({
                                            "title": "",
                                            "text": result.message,
                                            "icon": "error",
                                            "onClose": function (e) {
                                                console.log('on close event fired!');
                                            }
                                        });
                                    }
                                },
                            });
                        }
                    },
                    {
                        name: 'Show Test Result',
                        icon: '',
                        cls: 'RESULTSHOWRoleHide',
                        action: function (evt, ui) {
                            $.ajax({
                                url: "/Home/GetTSTCDSName",
                                data: JSON.stringify({ TestCasename: lTestCaseName, TestSuitname: ltestsuitename, Datasetname: ldatasetName }),
                                contentType: "application/json;charset=utf-8",
                                dataType: "json",
                                type: "POST",
                                async: false,
                                success: function (result) {
                                    if (result.status == 1) {
                                        if (result.data !== null) {
                                            ltestsuiteId = result.data[0];
                                            ltestcaseId = result.data[1];
                                        }
                                        var ltestcaseId = ui.rowData.caseid;
                                        var lsbdetailId = ui.rowData.detailid;
                                        $.ajax({
                                            url: "/StoryBoard/GetTestResult?TestCaseId=" + ltestcaseId + "&StoryboardDetailId=" + lsbdetailId + "&StoryboardName=" + lstoryboardname + "&RunOrder=" + lrun_order,
                                            contentType: "application/json;charset=utf-8",
                                            dataType: "HTML",
                                            type: "POST",
                                            success: function (result) {
                                                $("#MdlTestResult").html("");
                                                $("#MdlTestResult").html(result);

                                                $("#StoryboardTestResultPopup").modal("show");
                                                $('.modal-dialog').draggable({
                                                    handle: ".modal-header"
                                                });
                                                //rtgrid.refreshDataAndView();
                                            }
                                        });
                                    } else if (result.status == 0) {
                                        swal.fire({
                                            "title": "",
                                            "text": result.message,
                                            "icon": "error",
                                            "onClose": function (e) {
                                                console.log('on close event fired!');
                                            }
                                        });
                                    }
                                },
                            });

                        }
                    }

                ]
            }
            else {
                var idcontext = ui.$td[0].parentNode;

                idcontext.addEventListener("contextmenu", event => event.preventDefault());
                swal.fire({
                    "title": "",
                    "text": "Test Suite, TestCase and Dataset are required fields to edit a TestCase",
                    "icon": "error",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
            }
        }

        function tcheadItems(evt, ui, tcgrid, tcid) {

            if (ui.column.title != "Actions" && ui.column.title != "Steps" && ui.column.title != "Test Suite" && ui.column.title != "Test Case" && ui.column.title != "Dataset" && ui.column.title != "Base Line Data" && ui.column.title != "Result" && ui.column.title != "Error cause" && ui.column.title != "Script Start" && ui.column.title != "Script Duration" && ui.column.title != "Comparison Data" && ui.column.title != "Dependency" && ui.column.title != "Description" && ui.column.title != "Object" && ui.column.title != "Keyword" && ui.column.title != "StepsID" && ui.column.title != "Parameters" && ui.column.title != "Comment" && ui.column.title != "Data" && ui.column.title != "")
                return [
                    {
                        name: 'Add Data Set',
                        icon: 'ui-icon ui-icon-plus',
                        cls: 'ADDDATASETROLE',
                        action: function (evt, ui) {
                            var self = this,
                                C = gridobj[tcgrid].Columns();
                            swal.fire({
                                title: "Add DATA SET",
                                html: '<form method="post" id="taxcode-update" name="taxcodeUpdate">' +
                                    ' <input type="hidden" id="hdndatasetid" name="hdndatasetid" />' +
                                    ' <label style="margin-right: 239px;">DataSet Name:</label><input id="newtitle"  class= "form-control " type="text" name="title" maxlength="64" ></br>' +
                                    '<label style="margin-right: 206px;">DataSet Description:</label><textarea id="newdesc" class= "form-control " name="desc" maxlength="500"></textarea>' +
                                    '</form> ',
                                showCancelButton: true,
                                confirmButtonText: "Add DataSet",
                                closeOnConfirm: true
                            }).then(function (result) {
                                if (result.value) {
                                    if ($("#newtitle").val() == "") {
                                        swal.fire({
                                            "title": "",
                                            "text": "Dataset name is required",
                                            "icon": "error",
                                            "onClose": function (e) {
                                                console.log('on close event fired!');
                                            }
                                        });
                                        return false;
                                    }
                                    title = $("#newtitle").val();
                                    Desc = $("#newdesc").val();
                                    var DataSetId = ui.column.clsHead;
                                    var datasetid = $("#hdndatasetid").val();
                                    if (datasetid == null || datasetid == "")
                                        datasetid = 0;
                                    var regex = /^[a-zA-Z0-9-._(&)*  ]*$/;
                                    if (!regex.test(title)) {
                                        swal.fire({
                                            "title": "",
                                            "text": "Dataset name must contain only letters, numbers, spaces and underscore characters",
                                            "icon": "error",
                                            "onClose": function (e) {
                                                console.log('on close event fired!');
                                            }
                                        });
                                        return false;
                                    }
                                    startloader();
                                    $.ajax({
                                        url: "/TestCase/AddEditDataset",
                                        data: JSON.stringify({ Testcaseid: tcid, datasetid: datasetid, datasetname: title, datasetdesc: Desc }),
                                        type: "POST",
                                        contentType: "application/json;charset=utf-8",
                                        async: false,
                                        dataType: "json",
                                        success: function (lresult) {
                                            if (lresult.status == 1) {
                                                if (lresult.data.msg == "success") {
                                                    var prj = $("#projectidtc").val();
                                                    var ts = $("#testsuiteidtc").val();
                                                    $.ajax({
                                                        url: "/TestCase/GetDataSetCount",
                                                        data: JSON.stringify({ ProjectId: prj, TestSuiteId: ts, TestCaseId: tcid }),
                                                        type: "POST",
                                                        contentType: "application/json;charset=utf-8",
                                                        async: false,
                                                        dataType: "json",
                                                        success: function (result) {
                                                            if (result.status == 1) {
                                                                var datasetcount;
                                                                if (result.data.length > 0) {
                                                                    for (i = 0; i < result.data.length; i++) {
                                                                        datasetcount = result.data[i].DataSetCount;
                                                                    }
                                                                }
                                                                var obj = datasetobj;
                                                                $(obj).children().text('(' + datasetcount + ')')
                                                            }
                                                            else if (result.status == 0) {
                                                                swal.fire({
                                                                    "title": "",
                                                                    "text": result.message,
                                                                    "icon": "error",
                                                                    "onClose": function (e) {
                                                                        console.log('on close event fired!');
                                                                    }
                                                                });
                                                            }
                                                        }
                                                    });
                                                    swal.fire({
                                                        "title": "",
                                                        "text": lresult.message,
                                                        "icon": "success",
                                                        "onClose": function (e) {
                                                            console.log('on close event fired!');
                                                        }
                                                    });
                                                    parent = { title: title, colModel: [], clsHead: lresult.data.datasetId, align: "center", menuInClose: true, sortable: false, resizable: true },
                                                        col1 = {
                                                            title: "",
                                                            dataIndx: "skip_" + title,
                                                            cb: {
                                                                all: false, //header checkbox to affect checkboxes on all pages.
                                                                header: false //for header checkbox.
                                                            },
                                                            dataType: "bool",
                                                            sortable: false, nodrag: true, nodrop: true,
                                                            editor: false,
                                                            align: "center",
                                                            exportRender: false,
                                                            cls: 'hideRightborder',
                                                            type: "checkbox",
                                                            render: function (ui) {
                                                                if (ui.cellData) {
                                                                    return "<input type='checkbox' checked='checked' />";
                                                                } else {
                                                                    return "<input type='checkbox'  />";
                                                                }

                                                            },
                                                            editable: function (ui) {
                                                                if (ui.rowData != undefined) {
                                                                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                                                                        return false;
                                                                    } else {
                                                                        return true;
                                                                    }
                                                                }
                                                                else {

                                                                    return true;
                                                                }
                                                            },
                                                        },
                                                        col2 = {
                                                            title: "Data",
                                                            sortable: false,
                                                            dataIndx: title,
                                                            width: "15%",
                                                            dataType: "string",
                                                            nodrag: true,
                                                            nodrop: true,
                                                            cls: 'hideLeftborder',
                                                            render: function (ui) {
                                                                if (ui.rowData.col1) {
                                                                    //if true
                                                                    return {
                                                                        style: { background: "#ff0000" }
                                                                    };
                                                                }
                                                            },
                                                            filter: { crules: [{ condition: "contain" }] },
                                                            editable: function (ui) {
                                                                if (ui.rowData != undefined) {
                                                                    if (ui.rowData.pq_rowcls == "collapseBorder") {
                                                                        return false;
                                                                    } else {
                                                                        return true;
                                                                    }
                                                                } else {
                                                                    return true;
                                                                }
                                                            },
                                                        };

                                                    C.add([parent], ui.colIndx);
                                                    C.add([col1, col2], 0, parent.colModel);

                                                    ExistDataSetRenameList.push({ TestCaseId: tcid, oldColumn: title, newColumn: title, detail: Desc, datasetid: lresult.data.datasetId });
                                                }
                                                else if (lresult.data.msg == "error") {
                                                    swal.fire({
                                                        "title": "",
                                                        "text": "Dataset " + title + " already exists in the system",
                                                        "icon": "error",
                                                        "onClose": function (e) {
                                                            console.log('on close event fired!');
                                                        }
                                                    });
                                                    return false;
                                                }
                                            }
                                            else if (lresult.status == 0) {
                                                swal.fire({
                                                    "title": "",
                                                    "text": lresult.message,
                                                    "icon": "error",
                                                    "onClose": function (e) {
                                                        console.log('on close event fired!');
                                                    }
                                                });
                                            }
                                        },
                                        error: function (errormessage) {
                                            alert(errormessage.responseText);
                                        },
                                        complete: function (result) {
                                            stoploader();
                                        }
                                    });
                                }
                            });

                        }
                    },
                    {
                        name: 'Data set properties',
                        icon: 'ui-icon ui-icon-pencil ',
                        cls: 'RENAMEDATASETROLE',
                        action: function (evt, ui) {
                            var self = this,
                                column = ui.column,
                                title = column.title;
                            var Dec = "";
                            var DataSetId = ui.column.clsHead;
                            $.ajax({
                                url: "/TestCase/GetDatasetTagDetails",
                                data: { datasetid: DataSetId },
                                type: "GET",
                                success: function (result) {

                                    if (title.indexOf("span") > -1) {

                                        Dec = title.substring(title.lastIndexOf('=') + 2, title.lastIndexOf('"'))
                                        title = title.substring(title.lastIndexOf('"') + 2, title.lastIndexOf("</"));
                                    }
                                    var oldColumnTitle = title;
                                    //Swal.fire({
                                    //    title: 'Do you want to save the changes?',
                                    //    showDenyButton: true,
                                    //    showCancelButton: true,
                                    //    confirmButtonText: `Save`,
                                    //    denyButtonText: `Don't save`,
                                    //}).then((result) => {
                                    //    /* Read more about isConfirmed, isDenied below */
                                    //    if (result.isConfirmed) {
                                    //        Swal.fire('Saved!', '', 'success')
                                    //    } else if (result.isDenied) {
                                    //        Swal.fire('Changes are not saved', '', 'info')
                                    //    }
                                    //})

                                    swal.fire({
                                        title: "EDIT DATA SET PROPERTIES",
                                        html: result,
                                        customClass: 'dataset_model-wide',
                                        allowOutsideClick: false,
                                        showCancelButton: true,
                                        confirmButtonText: "Ok",
                                        closeOnConfirm: true,
                                        showDenyButton: true,
                                        denyButtonText: "Delete Tag",
                                        onOpen: function () {
                                            $("#taggroupid").select2(
                                                {
                                                    width: '100%',
                                                }
                                            );
                                            $("#tagfolderid").select2(
                                                {
                                                    width: '100%',
                                                }
                                            );
                                            $("#tagsetid").select2(
                                                {
                                                    width: '100%',
                                                }
                                            );
                                        },
                                        preConfirm: () => {

                                            var sflag = true;
                                            if ($("#tagsequenceid").val() == "" && $("#tagfolderid").val() != "") {
                                                $("#tagsequencerequired").css("display", "block");
                                                return false;
                                            }
                                            else if ($("#tagsequenceid").val() % 1 !== 0) {
                                                $("#tagsequencenumber").css("display", "block");
                                                return false;
                                            }
                                            else if ($("#tagsequenceid").val() <= 0 && $("#tagfolderid").val() != "") {
                                                $("#tagsequencevalid").css("display", "block");
                                                return false;
                                            }
                                            else {
                                                var lfolderid = $("#tagfolderid").val();
                                                var lsequencid = $("#tagsequenceid").val();
                                                $.ajax({
                                                    url: "/TestCase/CheckFolderSequenceMapping",
                                                    data: JSON.stringify({ FolderId: lfolderid, SequenceId: lsequencid, DatasetId: DataSetId }),
                                                    type: "POST",
                                                    contentType: "application/json;charset=utf-8",
                                                    async: false,
                                                    dataType: "json",
                                                    success: function (lresult) {
                                                        if (lresult) {
                                                            sflag = false;
                                                            $("#tagfoldersequencecheck").css("display", "block");
                                                            //return false;
                                                        }

                                                    }
                                                });
                                                return sflag;
                                            }
                                        }
                                    }).then(function (result) {


                                        if (result.isConfirmed) {
                                            if ($("#title").val() == "") {
                                                swal.fire({
                                                    "title": "",
                                                    "text": "Dataset name is required",
                                                    "icon": "error",
                                                    "onClose": function (e) {
                                                        console.log('on close event fired!');
                                                    }
                                                });
                                                return false;
                                            }

                                            var DataSetid = ui.column.clsHead;
                                            var datasettitle = $("#title").val();
                                            var tagmodel = {};
                                            tagmodel.Folderid = $("#tagfolderid").val();
                                            tagmodel.Setid = $("#tagsetid").val();
                                            tagmodel.Groupid = $("#taggroupid").val();
                                            tagmodel.Expectedresults = $("#tagexpresultid").val();
                                            tagmodel.Sequence = $("#tagsequenceid").val();
                                            tagmodel.StepDesc = $("#tagstepdescid").val();
                                            tagmodel.Diary = $("#tagdiaryid").val();
                                            Desc = $("#desc").val();



                                            var regex = /^[a-zA-Z0-9-._(&)*  ]*$/;
                                            if (!regex.test(datasettitle)) {
                                                swal.fire({
                                                    "title": "",
                                                    "text": "Dataset name must contain only letters, numbers, spaces and underscore characters",
                                                    "icon": "error",
                                                    "onClose": function (e) {
                                                        console.log('on close event fired!');
                                                    }
                                                });
                                                return false;
                                            }
                                            //if ($("#tagsequenceid").val() == "" && $("#tagfolderid").val() != "") {
                                            //    swal.fire({
                                            //        "title": "",
                                            //        "text": "Sequence is required field for folder [" + $("#tagfolderid option:selected").text()+"]",
                                            //        "icon": "error",
                                            //        "onClose": function (e) {
                                            //            console.log('on close event fired!');
                                            //        }
                                            //    });
                                            //    return false;
                                            //}
                                            //if ($("#tagsequenceid").val() % 1 !== 0) {
                                            //    swal.fire({
                                            //        "title": "",
                                            //        "text": "Sequence [" + $("#tagsequenceid").val()+"] is not allowed. Please enter a valid number.",
                                            //        "icon": "error",
                                            //        "onClose": function (e) {
                                            //            console.log('on close event fired!');
                                            //        }
                                            //    });
                                            //    return false;
                                            //}
                                            //if ($("#tagsequenceid").val() <= 0 && $("#tagfolderid").val() != "") {
                                            //    swal.fire({
                                            //        "title": "",
                                            //        "text": "Sequence must be greater than 0.",
                                            //        "icon": "error",
                                            //        "onClose": function (e) {
                                            //            console.log('on close event fired!');
                                            //        }
                                            //    });
                                            //    return false;
                                            //}
                                            startloader();
                                            $.ajax({
                                                url: "/TestCase/AddEditDataset",
                                                data: JSON.stringify({ Testcaseid: tcid, datasetid: DataSetid, datasetname: datasettitle, datasetdesc: Desc, tagmodel: tagmodel }),
                                                type: "POST",
                                                contentType: "application/json;charset=utf-8",
                                                dataType: "json",
                                                success: function (lresult) {
                                                    if (lresult.status == 1) {
                                                        if (lresult.data.msg == "success") {
                                                            swal.fire({
                                                                "title": "",
                                                                "text": lresult.message,
                                                                "icon": "success",
                                                                "onClose": function (e) {
                                                                    console.log('on close event fired!');
                                                                }
                                                            });
                                                            self.Columns().alter(function () {
                                                                column.title = '<span title="' + Desc + '">' + datasettitle + '</span>';
                                                            });
                                                            $("#title").val("");
                                                            $("#desc").val("");
                                                        }
                                                        else if (lresult.data.msg == "sequence error") {
                                                            swal.fire({
                                                                "title": "",
                                                                "text": "Sequence [" + tagmodel.Sequence + "] is already used. Please use another sequence",
                                                                "icon": "error",
                                                                "onClose": function (e) {
                                                                    console.log('on close event fired!');
                                                                }
                                                            });
                                                        }
                                                        else if (lresult.data.msg == "error") {
                                                            swal.fire({
                                                                "title": "",
                                                                "text": "Dataset " + datasettitle + " already exists in the system",
                                                                "icon": "error",
                                                                "onClose": function (e) {
                                                                    console.log('on close event fired!');
                                                                }
                                                            });
                                                        }
                                                        else {
                                                            swal.fire({
                                                                "title": "",
                                                                "text": lresult.message,
                                                                "icon": "error",
                                                                "onClose": function (e) {
                                                                    console.log('on close event fired!');
                                                                }
                                                            });
                                                            column.title = '<span title="' + Desc + '">' + title + '</span>';
                                                            return false;
                                                        }
                                                    }
                                                    else if (lresult.status == 0) {
                                                        swal.fire({
                                                            "title": "",
                                                            "text": lresult.message,
                                                            "icon": "error",
                                                            "onClose": function (e) {
                                                                console.log('on close event fired!');
                                                            }
                                                        });
                                                    }
                                                },
                                                complete: function (result) {
                                                    stoploader();
                                                }
                                            });
                                            if (title != "" && title != "IsDelete" && title != "StepsID" && title != "Keyword" && title != "Object" && title != "Parameters" && title != "Comment" && title != "Data") {
                                                if (title) {
                                                    self.Columns().alter(function () {
                                                        var flag = true;
                                                        for (i = 0; i < ExistDataSetRenameList.length; i++) {
                                                            if (ExistDataSetRenameList[i]["newColumn"].toUpperCase() == title.toUpperCase() && ExistDataSetRenameList[i]["datasetid"] != DataSetId && ExistDataSetRenameList[i]["TestCaseId"] == tcid) {
                                                                flag = false;
                                                            }
                                                        }

                                                        if (flag) {

                                                            for (i = 0; i < ExistDataSetRenameList.length; i++) {
                                                                if (ExistDataSetRenameList[i]["newColumn"].toUpperCase() == oldColumnTitle.toUpperCase() && ExistDataSetRenameList[i]["datasetid"] == DataSetId && ExistDataSetRenameList[i]["TestCaseId"] == tcid) {
                                                                    ExistDataSetRenameList[i]["newColumn"] = title;
                                                                    ExistDataSetRenameList[i]["detail"] = Desc;
                                                                }
                                                            }
                                                            column.title = '<span title="' + Desc + '">' + title + '</span>';//code
                                                            $("#title").val("");
                                                            $("#desc").val("");
                                                        }
                                                    })
                                                }
                                            }
                                            else {
                                                swal.fire({
                                                    "title": "",
                                                    "text": "Data set name must be unique.",
                                                    "icon": "error",
                                                    "onClose": function (e) {
                                                        console.log('on close event fired!');
                                                    }
                                                });
                                            }
                                        }
                                        else if (result.isDenied) {
                                            $.ajax({
                                                url: "/TestCase/DeleteDatSetTag",
                                                data: { datasetid: DataSetId },
                                                type: "POST",

                                                async: false,
                                                success: function (result) {
                                                    if (result == "success") {
                                                        swal.fire({
                                                            "title": "",
                                                            "text": "Tags for this dataset is deleted successfully",
                                                            "icon": "success",
                                                            "onClose": function (e) {
                                                                console.log('on close event fired!');
                                                            }
                                                        });
                                                    }

                                                }
                                            });
                                        }
                                    });

                                }
                            });

                        }
                    },

                    {
                        name: 'Copy DataSet',
                        icon: 'ui-icon ui-icon-pencil',
                        cls: 'COPYDATASETROLE',
                        action: function (evt, ui) {
                            var self = this,
                                C = gridobj[tcgrid].Columns();

                            swal.fire({
                                title: "COPY DATA SET",
                                html: '<form method="post" id="taxcode-update" name="taxcodeUpdate">' +
                                    ' <input type="hidden" id="hdndatasetid" name="hdndatasetid" />' +
                                    ' <label style="margin-right: 239px;">DataSet Name:</label><input id="copydatasetname"  class= "form-control " type="text" name="title" maxlength="64" ></br>' +
                                    '<label style="margin-right: 206px;">DataSet Description:</label><textarea id="copydatasetdesc" class= "form-control " name="desc" maxlength="500"></textarea>' +
                                    '</form> ',
                                showCancelButton: true,
                                confirmButtonText: "Copy DataSet",
                                closeOnConfirm: true
                            }).then(function (result) {
                                if (result.value) {

                                    var suiteidsave = $("#hdnTestsuiteId").val();
                                    if ($("#copydatasetname").val() == "") {
                                        swal.fire({
                                            "title": "",
                                            "text": "Dataset name is required",
                                            "icon": "error",
                                            "onClose": function (e) {
                                                console.log('on close event fired!');
                                            }
                                        });
                                        return false;
                                    }

                                    var DataSetid = ui.column.clsHead;

                                    var datasettitle = $("#copydatasetname").val();
                                    var regex = /^[a-zA-Z0-9-._(&)*  ]*$/;
                                    if (!regex.test(datasettitle)) {
                                        swal.fire({
                                            "title": "",
                                            "text": "Dataset name must contain only letters, numbers, spaces and underscore characters",
                                            "icon": "error",
                                            "onClose": function (e) {
                                                console.log('on close event fired!');
                                            }
                                        });
                                        return false;
                                    }
                                    Desc = $("#copydatasetdesc").val();
                                    var checkarray = gridobj[tcgrid].getChanges({ format: "byVal" });
                                    if (checkarray.addList.length > 0 || checkarray.deleteList.length > 0 || checkarray.updateList.length > 0 || checkarray.oldList.length > 0) {
                                        swal.fire({
                                            title: 'You have unsaved changes left. It will save the changes and then copy the dataset',
                                            text: "Please select Yes to continue",
                                            icon: 'warning',
                                            showCancelButton: true,
                                            confirmButtonText: 'Yes'
                                        }).then(function (result) {
                                            if (result.value) {
                                                $.when($.ajax(saveChangesTCForCopyDataset(tcgrid, tcid, suiteidsave))).then(function () {
                                                    if (validflag == true || msgflag == true) {
                                                        return false;
                                                    }
                                                    startloader();
                                                    //gridobj[tcgrid].showLoading("Saving Data");
                                                    $.ajax({
                                                        url: "/TestCase/CopyDataSet",
                                                        data: JSON.stringify({ testcaseid: tcid, oldDatasetid: DataSetid, datasetname: datasettitle, datasetdescription: Desc }),
                                                        type: "POST",
                                                        contentType: "application/json;charset=utf-8",
                                                        dataType: "json",
                                                        async: false,
                                                        success: function (lresult) {

                                                            if (lresult.msg == "success") {

                                                                swal.fire({
                                                                    "title": "",
                                                                    "text": "Test Case is saved and Dataset [" + datasettitle + "] added successfully.",
                                                                    "icon": "success",
                                                                    "onClose": function (e) {
                                                                        console.log('on close event fired!');
                                                                    }
                                                                });
                                                                stoploader();
                                                                // gridobj[tcgrid].hideLoading();
                                                                parent = { title: datasettitle, colModel: [], clsHead: lresult.datasetId, align: "center", menuInClose: true, sortable: false, resizable: true },
                                                                    col1 = {
                                                                        title: "",
                                                                        dataIndx: "skip_" + datasettitle,
                                                                        cb: {
                                                                            all: false, //header checkbox to affect checkboxes on all pages.
                                                                            header: false //for header checkbox.
                                                                        },
                                                                        dataType: "bool",
                                                                        sortable: false, nodrag: true, nodrop: true,
                                                                        editor: false,
                                                                        align: "center",
                                                                        exportRender: false,
                                                                        cls: 'hideRightborder',
                                                                        type: "checkbox"
                                                                    },
                                                                    col2 = {
                                                                        title: "Data",
                                                                        sortable: false,
                                                                        dataIndx: datasettitle,
                                                                        width: "15%",
                                                                        dataType: "string",
                                                                        nodrag: true,
                                                                        nodrop: true,
                                                                        cls: 'hideLeftborder',
                                                                        render: function (ui) {
                                                                            if (ui.rowData.col1) {
                                                                                //if true
                                                                                return {
                                                                                    style: { background: "#ff0000" }
                                                                                };
                                                                            }
                                                                        },
                                                                        filter: { crules: [{ condition: "contain" }] }
                                                                    };
                                                                ExistDataSetRenameList = jQuery.grep(ExistDataSetRenameList, function (value) {

                                                                    if (value != undefined) {
                                                                        return value["TestCaseId"] != tcid;
                                                                    }

                                                                });
                                                                DeleteColumnsList = jQuery.grep(DeleteColumnsList, function (value) {

                                                                    if (value != undefined) {
                                                                        return value["TestCaseId"] != tcid;
                                                                    }

                                                                });
                                                                C.add([parent], ui.colIndx);
                                                                C.add([col1, col2], 0, parent.colModel);
                                                                ReloadGrid(tcgrid, tcid, null, "");

                                                            }

                                                            else if (lresult == "Duplicate") {
                                                                swal.fire({
                                                                    "title": "",
                                                                    "text": "Dataset  ['" + datasettitle + "'] is already present in the System",
                                                                    "icon": "error",
                                                                    "onClose": function (e) {
                                                                        console.log('on close event fired!');
                                                                    }
                                                                });
                                                                stoploader();
                                                                gridobj[tcgrid].hideLoading();
                                                                //column.title = '<span title="' + Desc + '">' + title + '</span>';
                                                                return false;
                                                            }
                                                        },

                                                    });
                                                });


                                            }

                                        });
                                    }

                                    else {
                                        $.ajax({
                                            url: "/TestCase/CopyDataSet",
                                            data: JSON.stringify({ testcaseid: tcid, oldDatasetid: DataSetid, datasetname: datasettitle, datasetdescription: Desc }),
                                            type: "POST",
                                            contentType: "application/json;charset=utf-8",
                                            dataType: "json",
                                            async: false,
                                            success: function (lresult) {
                                                if (lresult.status == 1) {
                                                    if (lresult.data.msg == "success") {
                                                        swal.fire({
                                                            "title": "",
                                                            "text": lresult.message,
                                                            "icon": "success",
                                                            "onClose": function (e) {
                                                                console.log('on close event fired!');
                                                            }
                                                        });

                                                        parent = { title: datasettitle, colModel: [], clsHead: lresult.data.datasetId, align: "center", menuInClose: true, sortable: false, resizable: true },
                                                            col1 = {
                                                                title: "",
                                                                dataIndx: "skip_" + datasettitle,
                                                                cb: {
                                                                    all: false, //header checkbox to affect checkboxes on all pages.
                                                                    header: false //for header checkbox.
                                                                },
                                                                dataType: "bool",
                                                                sortable: false, nodrag: true, nodrop: true,
                                                                editor: false,
                                                                align: "center",
                                                                exportRender: false,
                                                                cls: 'hideRightborder',
                                                                type: "checkbox"
                                                            },
                                                            col2 = {
                                                                title: "Data",
                                                                sortable: false,
                                                                dataIndx: datasettitle,
                                                                width: "15%",
                                                                dataType: "string",
                                                                nodrag: true,
                                                                nodrop: true,
                                                                cls: 'hideLeftborder',
                                                                render: function (ui) {
                                                                    if (ui.rowData.col1) {
                                                                        //if true
                                                                        return {
                                                                            style: { background: "#ff0000" }
                                                                        };
                                                                    }
                                                                },
                                                                filter: { crules: [{ condition: "contain" }] }
                                                            };
                                                        ExistDataSetRenameList = jQuery.grep(ExistDataSetRenameList, function (value) {

                                                            if (value != undefined) {
                                                                return value["TestCaseId"] != tcid;
                                                            }

                                                        });
                                                        DeleteColumnsList = jQuery.grep(DeleteColumnsList, function (value) {

                                                            if (value != undefined) {
                                                                return value["TestCaseId"] != tcid;
                                                            }

                                                        });                                                        //$.each(ExistDataSetRenameList, function (index, value) {
                                                        //    debugger;
                                                        //    if (value != undefined) {
                                                        //        if (value["TestCaseId"] == tcid) {
                                                        //            delete
                                                        //            ExistDataSetRenameList.splice(index, 1);
                                                        //        }
                                                        //    }
                                                        //});
                                                        //ExistDataSetRenameList = [];

                                                        //ExistDataSetRenameList.push({ TestCaseId: tcid, oldColumn: datasettitle, newColumn: datasettitle, detail: Desc, datasetid: lresult.data.datasetId });
                                                        C.add([parent], ui.colIndx);
                                                        C.add([col1, col2], 0, parent.colModel);
                                                        ReloadGrid(tcgrid, tcid, null, "");

                                                    }
                                                    else {
                                                        swal.fire({
                                                            "title": "",
                                                            "text": lresult.message,
                                                            "icon": "error",
                                                            "onClose": function (e) {
                                                                console.log('on close event fired!');
                                                            }
                                                        });
                                                        column.title = '<span title="' + Desc + '">' + title + '</span>';
                                                        return false;
                                                    }
                                                }
                                                else if (lresult.status == 0) {
                                                    swal.fire({
                                                        "title": "",
                                                        "text": lresult.message,
                                                        "icon": "error",
                                                        "onClose": function (e) {
                                                            console.log('on close event fired!');
                                                        }
                                                    });
                                                }
                                            },
                                        });
                                    }
                                    var prj = $("#projectidtc").val();
                                    var ts = $("#testsuiteidtc").val();
                                    $.ajax({
                                        url: "/TestCase/GetDataSetCount",
                                        data: JSON.stringify({ ProjectId: prj, TestSuiteId: ts, TestCaseId: tcid }),
                                        type: "POST",
                                        contentType: "application/json;charset=utf-8",
                                        async: false,
                                        dataType: "json",
                                        success: function (result) {
                                            if (result.status == 1) {
                                                var datasetcount;
                                                if (result.data.length > 0) {
                                                    for (i = 0; i < result.data.length; i++) {
                                                        datasetcount = result.data[i].DataSetCount;
                                                    }
                                                }
                                                var obj = datasetobj;
                                                $(obj).children().text('(' + datasetcount + ')')
                                            }
                                            else if (result.status == 0) {
                                                swal.fire({
                                                    "title": "",
                                                    "text": result.message,
                                                    "icon": "error",
                                                    "onClose": function (e) {
                                                        console.log('on close event fired!');
                                                    }
                                                });
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    },

                    {
                        name: 'Delete Data Set',
                        icon: 'ui-icon ui-icon-trash',
                        cls: 'DELETEDATASETROLE',
                        action: function (evt, ui) {

                            var detasetname = ui.column.title;
                            var Dec = "";
                            var title = "";
                            if (detasetname.indexOf("span") > -1) {

                                Dec = detasetname.substring(detasetname.lastIndexOf('=') + 2, detasetname.lastIndexOf('"'))
                                detasetname = detasetname.substring(detasetname.lastIndexOf('"') + 2, detasetname.lastIndexOf("</"));
                            }
                            var self = this;
                            swal.fire({

                                text: "Please confirm deletion of DataSet [" + detasetname + "]",
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes, delete it!'
                            }).then(function (result) {
                                if (result.value == true) {
                                    var datasetid = ui.column.clsHead;
                                    $.ajax({
                                        url: "/TestCase/CheckDatasetExistsInStoryboard",
                                        data: JSON.stringify({ datasetid: datasetid }),
                                        type: "POST",
                                        contentType: "application/json;charset=utf-8",
                                        dataType: "json",
                                        success: function (lresult) {
                                            if (lresult.status == 1) {
                                                if (lresult.data.length > 0) {
                                                    var resultstring = "";
                                                    for (i = 0; i < lresult.data.length; i++) {

                                                        resultstring = resultstring + lresult.data[i] + " , ";
                                                    }
                                                    swal.fire(
                                                        '',
                                                        'Following Storyboards contain Dataset [' + detasetname + '] . I order to remove this dataset please remove it from storyboards. ' + "<br>" + resultstring,
                                                        'error'
                                                    )
                                                    return false;
                                                }
                                                else {

                                                    self.Columns().alter(function () {
                                                        var lColTitle = ui.column.title;
                                                        if (lColTitle.indexOf("span") > -1) {
                                                            lColTitle = lColTitle.substring(lColTitle.lastIndexOf('"') + 2, lColTitle.lastIndexOf("</"));
                                                        }
                                                        var i = 0;
                                                        var j = 0;
                                                        var pflag = true;
                                                        $.each(self.option('colModel'), function (index, value) {
                                                            if (pflag) {
                                                                var fTitle = value.title;
                                                                if (fTitle.indexOf("span") > -1) {
                                                                    fTitle = fTitle.substring(fTitle.lastIndexOf('"') + 2, fTitle.lastIndexOf("</"));
                                                                }
                                                                var existDatasetLength = 0;
                                                                for (j = 0; j < ExistDataSetRenameList.length; j++) {
                                                                    if (ExistDataSetRenameList[j]["TestCaseId"] == tcid) {
                                                                        existDatasetLength = existDatasetLength + 1;
                                                                    }
                                                                }

                                                                var TotalDataSetColumns = existDatasetLength;
                                                                if (lColTitle == fTitle) {
                                                                    var DeletedColumnListLng = 0;
                                                                    for (j = 0; j < DeleteColumnsList.length; j++) {
                                                                        if (DeleteColumnsList[j]["TestCaseId"] == tcid) {
                                                                            DeletedColumnListLng = DeletedColumnListLng + 1;
                                                                        }
                                                                    }

                                                                    if (TotalDataSetColumns == (DeletedColumnListLng) + 1) {
                                                                        swal.fire({
                                                                            title: 'TestCase must have at least one dataset',
                                                                            text: '',
                                                                            icon: 'warning',
                                                                        });
                                                                        return false;
                                                                    }
                                                                    self.option('colModel').splice(i, 1)
                                                                    pflag = false;
                                                                    for (i = 0; i < ExistDataSetRenameList.length; i++) {

                                                                        if (ExistDataSetRenameList[i]["newColumn"].toUpperCase() == lColTitle.toUpperCase()) {
                                                                            DeleteColumnsList.push({ TestCaseId: tcid, DataSetName: lColTitle, DataSetId: ui.column.clsHead });
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            i++;
                                                        });

                                                    });
                                                }
                                            }
                                            else if (lresult.status == 0) {
                                                swal.fire({
                                                    "title": "",
                                                    "text": lresult.message,
                                                    "icon": "error",
                                                    "onClose": function (e) {
                                                        console.log('on close event fired!');
                                                    }
                                                });
                                            }
                                        }
                                    });
                                }
                            });

                        }
                    }

                ]
        }
        function folderChange(obj) {
            var folderid = $("#tagfolderid").val();
            $("#tagsequencerequired").css("display", "none");
            $("#tagsequencenumber").css("display", "none");
            $("#tagsequencevalid").css("display", "none");
            $("#tagfoldersequencecheck").css("display", "none");
            if (folderid == "" || folderid == null) {
                document.getElementById("tagsequenceid").disabled = true;
                $("#tagsequenceid").val("");
            }
            else
                document.getElementById("tagsequenceid").disabled = false;

        }
        function sequencechange() {
            $("#tagsequencerequired").css("display", "none");
            $("#tagsequencenumber").css("display", "none");
            $("#tagsequencevalid").css("display", "none");
            $("#tagfoldersequencecheck").css("display", "none");
        }
        function OpenResizeLeftPanelPopup() {

            $("#ResizeLeftPanel").modal("show");
            $('.modal-dialog').draggable({
                handle: ".modal-header"
            });
        }

        $("#kt_aside_toggler").click(function () {

            if ($(this).attr("class") == "kt-aside__brand-aside-toggler") {
                var lwidth = $("#hdnLeftPanelWidth").val();
                $(".kt-aside").css("width", lwidth + "px");
                $("#kt_header").css("left", lwidth + "px");
                $(".kt-wrapper").css("padding-left", lwidth + "px");
                $(".kt-subheader").css("left", lwidth + "px");
            } else {
                $(".kt-aside").removeAttr("style", "width");
                $("#kt_header").css("left", "70px");
                $(".kt-wrapper").removeAttr("style", "padding-left");
                $(".kt-subheader").css("left", "70px");
            }
            $('.ULtablist li').each(function (index, value) {
                if ($(value).children().first().attr("class").indexOf("active") > -1) {
                    var tabobj = $(value).children().first();
                    if (tabobj.attr("data-tab") == "TestCase") {
                        var lTestCaseName = tabobj.attr("data-testcasename");
                        setTimeout(function () { gridobj[".grid" + lTestCaseName].reset({ filter: true }); }, 500);

                    }
                    if (tabobj.attr("data-tab") == "Storyboard") {
                        var lStoryboardName = tabobj.attr("data-storyboardname");
                        setTimeout(function () { gridobj[".grid" + lStoryboardName].reset({ filter: true }); }, 500);
                    }
                }
            });
        });

        function RefreshCacheForObject() {
            $.ajax({
                url: "/Object/RefreshCache",
                type: "GET",
                async: false,
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                },
                error: function (x, y, z) {
                }
            });
        }
    </script>
</body>
</html>