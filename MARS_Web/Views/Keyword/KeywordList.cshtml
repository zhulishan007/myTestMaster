<style>
    table.dataTable tbody td {
        word-break: break-word;
        vertical-align: top;
    }
</style>

@using MARS_Repository.ViewModel
@{
    string EditKey = "false", DeleteKey = "false";
    var PrivilegeList = Session["PrivilegeList"] as List<PrivilegeViewModel>;
    if (PrivilegeList.Count > 0)
    {
        EditKey = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Keyword").ToString().ToLower();
        DeleteKey = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete Keyword").ToString().ToLower();
    }
}

<input type="hidden" value="@EditKey" id="hdnEditKey" />
<input type="hidden" value="@DeleteKey" id="hdnDeleteKey" />
<div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content">
    <div class="kt-subheader   kt-grid__item" id="kt_subheader" style="left: @ViewBag.width;">
        <div class="kt-container  kt-container--fluid ">
            <div class="kt-subheader__main">

                <span class="kt-subheader__separator kt-hidden"></span>
                <div class="kt-subheader__breadcrumbs">
                    <a href="#" class="kt-subheader__breadcrumbs-home"><i class="flaticon2-settings" style="color:#1c6081"></i></a>
                    <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081">
                        Keyword
                    </a>
                    <i class="fa fa-angle-double-right" style="color:#1c6081"></i>
                    <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081">
                        &nbsp;
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid">
        <div class="kt-portlet kt-portlet--mobile">
            <div class="kt-portlet__head kt-portlet__head--lg">
                <div class="kt-portlet__head-label">
                    <h3 class="kt-portlet__head-title" style="color:#1582ab">
                        List Of All Keyword
                    </h3>
                </div>
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add Keyword"))
                {
                    <div class="kt-portlet__head-toolbar">
                        <div class="kt-portlet__head-wrapper">
                            <div class="kt-portlet__head-actions">
                                <button type="button" class="btn btn-brand btn-elevate btn-icon-sm" data-toggle="modal" onclick="AddKeyword()" data-target="#kt_modal_4"><i class="la la-plus"></i>New Keyword</button>
                                &nbsp;
                            </div>
                        </div>
                    </div>
                }
                </div>
            <div class="modal fade" id="AddKeyword" tabindex="-1" role="dialog" aria-labelledby="kwexampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="kwexampleModalLabel">Add Keyword</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="frmkeyword">
                                <input type="hidden" id="hdnKeywordId" name="hdnKeywordId" />
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Name<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="keywordname" name="keywordname" onchange="CheckNameExist()" maxlength="255">
                                    <label id="existkeywordname" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">
                                        Keyword Name already exist.
                                    </label>
                                    <label id="keywordvalidate" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">
                                        Keyword name can only consist Uppercase,Lowercase,numbers and Special characters(-,_,.,*,&,(,))
                                    </label>
                                </div>
                                <div class="form-group" id="clsControlType">
                                    <label class="form-control-label">ControlType<span style="color:red">&nbsp;*</span></label>
                                    <select class="form-control kt-select2" id="sDrpControlType" name="sDrpControlType" multiple="multiple" style="border-color:#59c0e7 !important">

                                        @{var lTypeList = ViewBag.listtyps as IEnumerable<SelectListItem>;

                                            <optgroup id="typename" label="ControlTypes">
                                                @foreach (var item in lTypeList)
                                                {
                                                    <option value="@item.Value">@item.Text</option>
                                                }
                                            </optgroup>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Entry in Data File<span style="color:red">&nbsp;*</span></label>
                                    <select class="form-control kt-select2" id="DrpDataFile" name="DrpDataFile">
                                        <option value="Yes">Yes</option>
                                        <option value="No">No</option>
                                    </select>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" id="addedkeyword" class="btn btn-outline-brand btn-elevate btn-pill" onclick="AddEditKeywordSave()">Save</button>
                            <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="kt-portlet__body">
                <table class="table table-striped- table-bordered table-hover table-checkable " id="Keywordtable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th class="ObjectnoWrap">ControlType</th>
                            <th>Entry in Data File</th>
                            <th style="color: #1c6081;background-color: #e9f5ff;font-weight: bold;">Actions</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    var KeywordTable = function () {
        $.fn.dataTable.Api.register('column().title()', function () {
            return $(this.header()).text().trim();
        });

        var initKeywordTable = function () {

            var lEditKeydisplay = $("#hdnEditKey").val();
            var lDeleteKeydisplay = $("#hdnDeleteKey").val();
            KeywordTable = $('#Keywordtable').DataTable({
                responsive: false,

                // Pagination settings
                dom: `<'row'<'col-sm-12'tr>>
                                        <'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7 dataTables_pager'lp>>`,
                // read more: https://datatables.net/examples/basic_init/dom.html

                lengthMenu: [10, 100, 1000],
                processing: true,
                pageLength: 100,

                language: {
                    'lengthMenu': 'Display _MENU_',
                    "processing": "<img  src='../assets/media/mars.gif'style='width:80px;'/>"
                },
                "scrollY": $(window).height() - 305,
                searchDelay: 500,
                //  processing: true,
                serverSide: true,
                ajax: {
                    url: '/Keyword/DataLoad',
                    type: 'POST',
                    data: {
                        // parameters for custom backend script demo
                        columnsDef: [
                            'KeywordName', 'ControlType', 'EntryFile', 'Actions',],
                    },
                },

                columns: [
                    { data: 'KeywordName', name: "Name", width: '@ViewBag.namewidth', "targets": 0, autowidth: false },
                    { data: 'ControlType', name: "ControlType", width: '@ViewBag.controlTypewidth', "targets": 1, autowidth: false },
                    { data: 'EntryFile', name: "EntryFile", width: '@ViewBag.entryDatawidth', "targets": 2, autowidth: false },
                    { data: 'Actions', responsivePriority: -1, width: '@ViewBag.actionswidth', "targets": 3, autowidth: false }
                ],
                initComplete: function () {
                    var thisTable = this;
                    var rowFilter = $('<tr class="filter"></tr>').appendTo($(KeywordTable.table().header()));

                    KeywordTable.columns().every(function () {
                        var column = this;
                        var input;
                        switch (column.title()) {
                            case 'Name':
                            case 'ControlType':
                            case 'EntryFile':
                                input = $(`<input type="text" class="form-control form-control-sm form-filter kt-input" data-col-index="` + column.index() + `"/>`);
                                $(input).keyup(function () {
                                    var params = {};
                                    $(rowFilter).find('.kt-input').each(function () {
                                        var i = $(this).data('col-index');
                                        if (params[i]) {
                                            params[i] += '|' + $(this).val();
                                        }
                                        else {
                                            params[i] = $(this).val();
                                        }
                                    });
                                    $.each(params, function (i, val) {
                                        // apply search params to datatable
                                        KeywordTable.column(i).search(val ? val : '', false, false);
                                    });
                                    KeywordTable.table().draw();
                                });
                                break;
                        }

                        if (column.title() !== 'actions') {
                            $(input).appendTo($('<th>').appendTo(rowFilter));
                        }
                    });

                },
                columnDefs: [
                    {
                        targets: -1,
                        title: 'Actions',
                        orderable: false,
                        render: function (data, type, full, meta) {
                            var lid = full.KeywordId;
                            var lName = full.KeywordName.replace(/'/g, "###");
                            var lControlType = full.ControlType;
                            var lControlTypeId = full.ControlTypeId;
                            var lEntryFile = full.EntryFile;
                           
                            var lRenderHtml = "";
                            if (lEditKeydisplay == "true") {
                                lRenderHtml = " <a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='View' data-name='" + lName + "' data-ControlType='" + lControlType + "' data-ControlTypeId='" + lControlTypeId + "' data-EntryFile='" + lEntryFile + "' onclick=AddEditKeyword(" + lid + ",$(this)) ><i class='la la-edit'></i></a> ";
                            }
                            if (lDeleteKeydisplay == "true") {
                                lRenderHtml = lRenderHtml + "<a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Delete' onclick='keyDelete(" + lid + ")' ><i class='la la-trash la-xs'></i></a>";
                            }
                            return lRenderHtml;
                        },
                    }
                ],
            });
        };
        return {
            init: function () {
                initKeywordTable();
            },

        };
    }();
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        $($.fn.dataTable.tables(true)).DataTable()
            .columns.adjust();
    });
    jQuery(document).ready(function () {
        KeywordTable.init();
    });
    $.fn.dataTable.render.ellipsis = function (cutoff, wordbreak, escapeHtml) {
        var esc = function (t) {
            return t
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;');
        };

        return function (d, type, row) {
            // Order, search and type get the original data
            if (type !== 'display') {
                return d;
            }

            if (typeof d !== 'number' && typeof d !== 'string') {
                return d;
            }

            d = d.toString(); // cast numbers

            if (d.length < cutoff) {
                return d;
            }

            var shortened = d.substr(0, cutoff - 1);

            // Find the last white space character in the string
            if (wordbreak) {
                shortened = shortened.replace(/\s([^\s]*)$/, '');
            }

            // Protect against uncontrolled HTML input
            if (escapeHtml) {
                shortened = esc(shortened);
            }

            return '<span class="ellipsis" title="' + esc(d) + '">' + shortened + '&#8230;</span>';
        };
    };
    $(document).ready(function () {
        $("#frmkeyword").validate({
            rules: {
                keywordname: {
                    required: true
                },
                sDrpControlType: {
                    required: true
                }
            },
        });

        $('#sDrpControlType').on('changed.bs.sDrpControlType', function () {
            validator.element($(this)); // validate element
        });

    });

    function AddEditKeyword(Id, editObj) {
        $("#kwexampleModalLabel").text('');
        $("#kwexampleModalLabel").text('Edit Keyword');
      $("#addedkeyword").attr("disabled", false);
        $("#existkeywordname").css("display", "none");
        $("#AddKeyword").modal("show");
        var lKeywordId = Id;
        var Name = $(editObj).attr("data-name").replace(/###/g, "'");
        var contorltypeId = $(editObj).attr("data-ControlTypeId");
        var lEntryFile = $(editObj).attr("data-EntryFile");

        $("#keywordname").val(Name);
        $("#DrpDataFile").val(lEntryFile);
        $("#hdnKeywordId").val(lKeywordId);
        $("#sDrpControlType").val(contorltypeId.split(","));
        $("#sDrpControlType").select2();

        if (!$("#keywordvalidate").valid())
            return false;
    }

    function AddKeyword() {
        $("#existkeywordname").css("display", "none");
        $("#addedkeyword").attr("disabled", false);
        $("#kwexampleModalLabel").text('');
        $("#kwexampleModalLabel").text('Add Keyword');
        $("#AddKeyword").modal("show");
        $("#hdnKeywordId").val("");
        $("#keywordname").val("");
        $("#sDrpControlType").val("");
        $("#sDrpControlType").select2();
        var validator = $("#frmkeyword").validate();
        validator.resetForm();
    }
    function keyDelete(id) {
        swal.fire({
            title: 'Please confirm.',
            text: "This action can not be undone.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value == true) {
                $.ajax({
                    url: "/Keyword/DeletKeyword",
                    data: JSON.stringify({ "Keywordid": id }),
                    type: "POST",
                    async: false,
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        if (result.status == 1) {
                            if (result.data) {
                                KeywordTable.table().draw();
                                swal.fire(
                                    'Deleted!',
                                    result.message,
                                    'success'
                                )
                            }
                            else {
                                if (result.data.length > 0) {
                                    var resultstring = "";
                                    for (i = 0; i < result.data.length; i++) {

                                        resultstring = resultstring + result.data[i] + " , ";
                                    }
                                    swal.fire(
                                        'Deleted!',
                                        'Following Test Cases contain Keyword [' + result.message + '].Please remove this Keyword from Test Cases. ' + "<br>" + resultstring,
                                        'error'
                                    )
                                }
                            }
                        }
                        else if (result.status == 0) {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "error",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }
                    },
                    error: function (x, y, z) {
                        swal.fire(
                            'Error while deleting',
                            'error'

                        )
                    }
                });
            }
        });
    }
    function AddEditKeywordSave() {

        if (!$("#frmkeyword").valid()) {
            var validationobj = $("#clsControlType").find("#sDrpControlType-error");
            if (validationobj.length > 0) {
                $("#clsControlType").find("#sDrpControlType-error").remove();
                validationHTML = "<div id='sDrpControlType-error' class='error invalid-feedback ' >This field is required.</div>";
                $("#clsControlType").append(validationHTML);
                
            }
            return false;
        }
        $("#addedkeyword").attr("disabled", true);

        var lId = $("#hdnKeywordId").val();
        if (lId == null && lId == "")
            lId = 0;
        var regex = /^[a-zA-Z0-9-._(&)*  ]*$/;

        var KeywordModel = {};
        KeywordModel.KeywordId = lId,
            KeywordModel.KeywordName = $("#keywordname").val(),
            KeywordModel.ControlType = $("#sDrpControlType").val(),
            KeywordModel.ControlTypeId = $("#sDrpControlType").val().toString(),
            KeywordModel.EntryFile = $("#DrpDataFile").val().toString();
        if (!regex.test(KeywordModel.KeywordName)) {
            $("#keywordname").val("");
            $("#keywordvalidate").css("display", "block");
            $("#addedkeyword").attr("disabled", false);

            return false;
        }
        var keyword = $("#keywordname").val();
        $.ajax({
            url: "/Keyword/AddEditKeyword",
            data: JSON.stringify(KeywordModel),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                $("#AddKeyword").modal("hide");
                if (result.status == 1 && result.data) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                } else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }

                KeywordTable.table().draw();
                $("#addedkeyword").attr("disabled", false);
            },
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }
    function CheckNameExist() {
        var keywordname = $("#keywordname").val();
        var KeywordId = $("#hdnKeywordId").val();

        $.ajax({
            url: "/Keyword/CheckDuplicateKeywordNameExist",
            data: '{"keywordname":"' + keywordname + '","KeywordId":"' + KeywordId + '"}',
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                if (result.status == 1 && result.data) {
                    $("#keywordname").val("");
                    $("#existkeywordname").css("display", "block");
                }
                else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            },
        });
    }
    $("#keywordname").on('keyup', function () {
        $("#existkeywordname").css("display", "none");
    });
    $("#keywordname").on('keyup', function () {
        $("#keywordvalidate").css("display", "none");
    });

</script>





