@using MARS_Repository.ViewModel
@{
    var FolderId = ViewBag.FolderId;
    var FolderName = ViewBag.FolderName;
    var lid = "grid" + Convert.ToString(FolderId);
    var classgridobj = "grid" + FolderName.Replace('/', '_').Replace('(', '_').Replace(')', '_').Replace('.', '_').Replace('*', '_').Replace('&', '_').Replace(' ', '_');
    var lgridName = ".grid" + FolderName.Replace('/', '_').Replace('(', '_').Replace(')', '_').Replace('.', '_').Replace('*', '_').Replace('&', '_').Replace(' ', '_');

}

<script>
    var folderdt = [];
    var folderobj = [];
    var fgrid;
    var lheight = $(window).height();
    var datasets = [];
    var itemlistObj = {};

    //var reSeqFlag = 0;
    folderdt.push({
        title: "", copy: false, editable: false, minWidth: 40, maxWidth: 40, sortable: false, dataIndx: "IsEdit",
        menuInHide: true, menuIcon: false, sortable: false, filter: { on: false, menuIcon: false },
        render: function (ui) {
            return "<button type='button' class='edit_btn'></button>";
        },
        postRender: function (ui) {
            var rowIndx = ui.rowIndx,
                grid = this,
              $cell = gridobj['@lgridName'].getCell(ui);
            $cell.find("button").button({ icons: { primary: 'ui-icon-pencil' } })
                .bind("click", function () {
                    debugger
                    return EditRow(rowIndx, grid);

                    });
        }
    });

    folderdt.push({
        title: "", copy: false, editable: false, minWidth: 40, maxWidth: 40, sortable: false, dataIndx: "IsDelete",
        menuInHide: true, menuIcon: false, sortable: false, filter: { on: false, menuIcon: false },
        render: function (ui) {
            return "<button type='button' class='delete_btn' style='color:red;'></button>";
        },
         postRender: function (ui) {
                var rowIndx = ui.rowIndx,
                    grid = this,
                    $cell = gridobj['@lgridName'].getCell(ui);
                $cell.find("button").button({ icons: { primary: 'ui-icon-close' } })
                    .bind("click", function () {
                         swal.fire({
                                title: 'Delete',
                             text: "Are you sure to delete this Dataset Row [" + (ui.rowData.DatasetName) + "] ?",
                                type: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes, delete it!'
                         }).then(function (result) {
                             if (result.value == true) {
                                 gridobj['@lgridName'].addClass({ rowIndx: ui.rowIndx, cls: 'pq-row-delete' });
                                 ans = true;
                                 gridobj['@lgridName'].removeClass({ rowIndx: rowIndx, cls: 'pq-row-delete' });
                                 if (ans) {
                                     gridobj['@lgridName'].deleteRow({ rowIndx: rowIndx });
                                 }
                             }
                         });

                    });
            }
    });

    folderdt.push({
        title: "StepNo", copy: false, hidden: true, dataType: "int", dataIndx: "StepNo", align: "center", menuInHide: true, sortable: false,
    });
    folderdt.push({
        title: "DataSetId", copy: false, editable: false, hidden: true,  menuInHide: true, sortable: false, dataType: "int", dataIndx: "DataSetId", align: "center",
    });
    folderdt.push({
        title: "ProjectIds", copy: false, editable: false, hidden: true, menuInHide: true, sortable: false, dataType: "string", dataIndx: "ProjectIds", align: "center",
    });

    folderdt.push({
        title: "DataSet", dataIndx: "DatasetName", dataType: "string", align: "left", menuInHide: true, halign: "center", nodrag: true, nodrop: true,
        sortable: false, resizable: true, minWidth: 200, maxWidth: 200,
       editor:
       {
           type: 'select',
           valueIndx: "value",
           init: function (ui) {
               ui.$cell.find("select").pqSelect();
           },
           labelIndx: "text",
           options: function (ui) {
               var List = [];
                    var rowindx = ui.rowIndx;
               var datasetlist = @Html.Raw(ViewBag.datasetlist);
               datasets.push({ "value": "", "text": "" });
               $.each(datasetlist, function (key, value) {
                   datasets.push({ "value": value.Data_Summary_Name, "text": value.Data_Summary_Name });
                    });
               List = datasets;


                    return List;

           }
          },
        filter: { crules: [{ condition: 'contain' }] },
        editable: function (ui) {
           // debugger;
            if (ui.rowData != undefined) {
                if (ui.rowData.StepNo == 0) {
                    return true;
                } else {
                    return false;
                }
            }
        }
    });

    folderdt.push({
        title: "Description", copy: false, dataType: "string", dataIndx: "DatasetDesc", align: "center",
        menuInHide: true, sortable: false

    });
    folderdt.push({
        title: "TestCaseId", copy: false, editable: false, hidden: true, menuInHide: true, sortable: false, dataType: "int", dataIndx: "TestCaseId", align: "center",
    });
    folderdt.push({
        title: "TestCase", copy: false, dataType: "string", dataIndx: "TestCase", align: "center", menuInHide: true, sortable: false, editable: false,
    });
    folderdt.push({
        title: "TestSuite", copy: false, dataType: "string", dataIndx: "TestSuite", align: "center", menuInHide: true, sortable: false, editable: false,
    });
    folderdt.push({
        title: "TestSuiteId", copy: false, editable: false, hidden: true, menuInHide: true, sortable: false, dataType: "int", dataIndx: "TestSuiteId", align: "center",
    });
    folderdt.push({
        title: "Storyboards", copy: false, dataType: "string", dataIndx: "Storyboard", align: "center", menuInHide: true, sortable: false, editable: false,
    });
    folderdt.push({
        title: "Project", copy: false, dataType: "string", dataIndx: "ProjectName", align: "center", menuInHide: true, sortable: false, editable: false,
    });
    folderdt.push({
        title: "SEQ", copy: false,  dataType: "int", dataIndx: "SEQ", align: "center", menuInHide: true, sortable: false,
    });




    var folderobj = {
        selectionModel: { type: 'cell' },
        autoSizeInterval: 0,
        //scrollModel: { autoFit: true },
        dragColumns: { enabled: false },
        width: "99%",
        height: lheight - 130,
        colModel: folderdt,
        editModel: {
            clicksToEdit: 1,
        },
        cellSave: function (evt, ui) {
            debugger;
            if (ui.dataIndx == "DatasetName") {
                debugger
                var Row = this;
                var DatasetName = ui.value;
                debugger
                //startloader();
                $.ajax({
                    url: "/TestCase/GetFolderDatasetDetails",
                    data: '{"DatasetName":"' + DatasetName + '"}',
                    type: "POST",
                    contentType: "application/json;charFolder=utf-8",
                    dataType: "json",
                    success: function (result) {
                        debugger
                        itemlistObj = {};
                        if (result.status == 1) {
                            var datasetlist = JSON.parse(result.data);
                            itemlistObj[datasetlist.DatasetName] = datasetlist;
                            var desc = itemlistObj[ui.rowData.DatasetName].DatasetDesc;
                            Row.updateRow({
                                rowIndx: ui.rowIndx,
                                newRow: { 'DatasetDesc': desc }
                            });
                        }
                        else if (result.status == 0) {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "error",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }
                        //stoploader();
                    },
                    error: function (errormessage) {
                        alert(errormessage.responFolderext);
                    }
                });
            }
        },
        editable: true,
        trackModel: { on: true },
        track: { on: true },
        dataModel: { recIndx: "DataSetId" },
        virtualX: true,

        selectionModel: { type: 'cell' },
        collapsible: { on: false, toggle: false },
        columnBorders: true,
        hoverMode: 'row',
        numberCell: { show: true },
        history: function (evt, ui) {
            var $tb = this.toolbar(),
                $undo = $tb.find("button:contains('Undo')"),
                $redo = $tb.find("button:contains('Redo')");
            if (ui.canUndo != null) {
                $undo.button("option", { disabled: !ui.canUndo });
            }
            if (ui.canRedo != null) {
                $redo.button("option", "disabled", !ui.canRedo);
            }
            var $grid = this.widget();
            if (ui.canUndo != null) {
                $("button.undosbchanges", $grid).button("option", { disabled: !ui.canUndo });
            }
            $undo.button("option", { label: 'Undo (' + ui.num_undo + ')' });
            $redo.button("option", { label: 'Redo (' + ui.num_redo + ')' });
        },
        columnTemplate: { render: SCResultfilterRender },
        menuIcon: true,
        menuUI: {
            tabs: ['hideCols', 'filter'],
            gridOptions: {
                columnTemplate: { dataType: 'html' }
            }
        },
        formulas: [
            ["DataSetId", function (rd) {
                debugger
                if (!jQuery.isEmptyObject(itemlistObj))
                    return rd.DatasetName == undefined ? "" : itemlistObj[rd.DatasetName].DataSetId;
                else
                    return rd.DataSetId == undefined ? "" : rd.DataSetId;
            }],
            ["TestCase", function (rd) {
                if (!jQuery.isEmptyObject(itemlistObj))
                    return rd.DatasetName == undefined ? "" : itemlistObj[rd.DatasetName].TestCase;
                else
                    return rd.TestCase == undefined ? "" : rd.TestCase;
            }],
            ["TestCaseId", function (rd) {
                if (!jQuery.isEmptyObject(itemlistObj))
                  return rd.DatasetName == undefined ? "" : itemlistObj[rd.DatasetName].TestCaseId;
                else
                    return rd.TestCaseId == undefined ? "" : rd.TestCaseId;
            }],
            ["TestSuite", function (rd) {
                if (!jQuery.isEmptyObject(itemlistObj))
                    return rd.DatasetName == undefined ? "" : itemlistObj[rd.DatasetName].TestSuite;
                else
                    return rd.TestSuite == undefined ? "" : rd.TestSuite;
            }],
            ["TestSuiteId", function (rd) {
                if (!jQuery.isEmptyObject(itemlistObj))
                    return rd.DatasetName == undefined ? "" : itemlistObj[rd.DatasetName].TestSuiteId;
                else
                    return rd.TestSuiteId == undefined ? "" : rd.TestSuiteId;
            }],
            ["Storyboard", function (rd) {
                if (!jQuery.isEmptyObject(itemlistObj))
                    return rd.DatasetName == undefined ? "" : itemlistObj[rd.DatasetName].Storyboard;
                else
                    return rd.Storyboard == undefined ? "" : rd.Storyboard;
            }],
            ["ProjectIds", function (rd) {
                if (!jQuery.isEmptyObject(itemlistObj))
                    return rd.DatasetName == undefined ? "" : itemlistObj[rd.DatasetName].ProjectIds;
                else
                    return rd.ProjectIds == undefined ? "" : rd.ProjectIds;
            }],
            ["ProjectName", function (rd) {
                if (!jQuery.isEmptyObject(itemlistObj)) {
                    var projctname = rd.DatasetName == undefined ? "" : itemlistObj[rd.DatasetName].ProjectName;
                    itemlistObj = {};
                    return projctname;
                }
                else
                    return rd.ProjectName == undefined ? "" : rd.ProjectName;
            }]
        ],
        reactive: false,
        roundcorners: false,
        rowBorders: true,
        stripeRows: false,
        showHeader: true,
        showTitle: false,
        showToolbar: true,
        showTop: true,
        title: "FolderDataSet",

        postRenderInterval: -1,
        filterModel:
        {
            on: true,
            mode: "OR",
            header: true,
            menuIcon: true
        },
        complete: function () {
            this.flex();
        },
        toolbar:
        {
            items: [
                  {
                        type: 'button',
                        icon: 'save',
                        attr: 'title="Save"',
                        label: '',
                    cls: "floatRight btn btn-brand btn-elevate btn-icon-sm SAVERESULTBUTTON", listener: function () {
                            //append empty row at the end.
                        SaveFolderDataSet('@lgridName', @FolderId,'@FolderName');
                        }
                },
                 {
                        type: 'button',
                        icon: 'plus',
                        attr: 'title="New Step"',

                        label: '',
                        cls: "floatRight btn btn-brand btn-elevate btn-icon-sm",
                     listener: function () {
                         var rowData = { StepNo:0 }; //empty row
                         var rowIndx = this.addRow({ rowData: rowData, checkEditable: true });
                         this.getRowsByClass({ cls: 'pq-row-edit' })
                         this.goToPage({ rowIndx: rowIndx });
                         this.editFirstCellInRow({ rowIndx: rowIndx });
                     }
                },
                  {
                        type: 'button',
                      icon: 'flaticon2-reload',
                        attr: 'title="ReSequence"',
                      label: 'ReSequence',
                    cls: "floatRight btn btn-brand btn-elevate btn-icon-sm SAVERESULTBUTTON", listener: function () {
                        ReloadFolderSequence('@lgridName',@FolderId);
                        }
                },
                 {
                     type: 'button', label: '', attr: 'title="Reload"', cls: 'bgImage  btn btn-brand btn-elevate btn-icon-sm',
                     icon: "flaticon2-reload", listener: function () {
                           swal.fire({
                                title: '',
                                text: "All changes in List will be discarded.  Please confirm",
                               icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes'
                            }).then(function (result) {
                                if (result.value == true)
                                {
                                    ReloadFolderDatasetList('@lgridName',@FolderId);
                                }
                            });
                         }
                    },
                    {
                        type: 'button',
                        attr: 'title="Undo"',
                        icon: 'undo',
                        label: '&nbsp;Undo',
                        cls: 'btn btn-brand btn-icon-sm undosbchanges',
                        options: { disabled: true },
                        listener: function () {
                           gridobj['@lgridName'].history({ method: 'undo' });
                        }
                    },
                    {
                        type: 'button',
                        attr: 'title="Redo"',
                        icon: 'redo',
                        cls: 'btn btn-brand btn-icon-sm ',
                        label: '&nbsp;Redo',
                        options: { disabled: true },
                        listener: function () {
                            gridobj['@lgridName'].history({ method: 'redo' });
                        }
                    }, {
                        type: 'button',
                        //icon: '',
                        icon: 'resetfilter',
                        attr: 'title="Reset Filter"',
                        cls: 'btn btn-brand btn-icon-sm ',
                        label: '',
                        listener: function () {
                            gridobj['@lgridName'].reset({ filter: true })
                        }
                    }, {
                        type: 'button',
                        //icon: '',
                        icon: 'ui-icon-Copy',
                        attr: 'title="Copy"',
                        cls: 'btn btn-brand btn-icon-sm ',
                        label: '',
                        listener: function () {
                            this.copy();
                        }
                    }, {
                        type: 'button',
                        //icon: '',
                        icon: 'ui-icon-Paste',
                        attr: 'title="Paste"',
                        cls: 'btn btn-brand btn-icon-sm ',
                        label: '',
                        listener: function () {
                            this.paste();
                        }
                    }
            ]
        }
    };


    gridobj['@lgridName'] = pq.grid("@lgridName", folderobj);
    ReloadFolderDatasetList('@lgridName',@FolderId);

    function SCResultfilterRender(ui) {
        var val = ui.cellData,
            filter = ui.column.filter,
            crules = (filter || {}).crules;

        if (filter && filter.on && crules && crules[0].value) {
            var condition = crules[0].condition,
                valUpper = val.toUpperCase(),
                txt = crules[0].value,
                txt = (txt == null) ? "" : txt.toString(),
                txtUpper = txt.toUpperCase(),
                indx = -1;
            if (condition == "end") {
                indx = valUpper.lastIndexOf(txtUpper);
                if (indx + txtUpper.length != valUpper.length) {
                    indx = -1;
                }
            }
            else if (condition == "contain") {
                indx = valUpper.indexOf(txtUpper);
            }
            else if (condition == "begin") {
                indx = valUpper.indexOf(txtUpper);
                if (indx > 0) {
                    indx = -1;
                }
            }
            if (indx >= 0) {
                var txt1 = val.substring(0, indx);
                var txt2 = val.substring(indx, indx + txt.length);
                var txt3 = val.substring(indx + txt.length);
                return txt1 + "<span style='background:yellow;color:#333;'>" + txt2 + "</span>" + txt3;
            }
            else {
                return val;
            }
        }
        else {
            return val;
        }
    }

    function ReloadFolderDatasetList(lgridName, FolderId) {
        $.ajax({
            url: "/TestCase/GetFolderDatasets?FolderId=" + FolderId,
            type: "GET",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                debugger
                if (result.status == 1) {
                    var jsonData = [];
                    jsonData = "[";
                    var datasetlist = JSON.parse(result.data);
                    if (datasetlist.length > 0) {
                        var StepNo = 0;

                        for (i = 0; i < datasetlist.length; i++) {

                            if (jsonData.length > 1) {
                                jsonData += ",";
                            }
                            StepNo = StepNo + 1;
                            var SEQ = datasetlist[i].SEQ == 0 ? "" : datasetlist[i].SEQ;

                            jsonData += '{ "StepNo":"' + StepNo + '","DataSetId":"' + datasetlist[i].DataSetId + '","ProjectIds":"' + datasetlist[i].ProjectIds + '","DatasetName":"' + datasetlist[i].DatasetName + '","DatasetDesc":"' +
                                datasetlist[i].DatasetDesc + '", "TestCase":"' + datasetlist[i].TestCase + '","TestCaseId":"' + datasetlist[i].TestCaseId + '", "TestSuite":"' +
                                datasetlist[i].TestSuite + '", "TestSuiteId":"' + datasetlist[i].TestSuiteId + '","Storyboard":"' + datasetlist[i].Storyboard +
                                '","ProjectName":"' + datasetlist[i].ProjectName +'", "SEQ": "' + SEQ + '"';
                            jsonData += "}";
                        }
                    }
                    jsonData = jsonData + "]";
                    jsonData = jsonData.replaceAll('\t',' ');
                    jsonData = jsonData.replaceAll('\r',' ');
                    jsonData = jsonData.replaceAll('\\\\',' ');
                    jsonData = jsonData.replaceAll('\\',' ');

                    var Rdata = JSON.parse(jsonData);
                    debugger
                    gridobj[lgridName].option("dataModel.data", Rdata);
                    gridobj[lgridName].refreshDataAndView();
                } else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            }
        });
    }

    function SaveFolderDataSet(lgridName, folderId,fName) {
        startloader();
        var changes;
        changes = gridobj[lgridName].getChanges({ format: "byVal" });

        gridobj[lgridName].setSelection(null);
        $.ajax({
            dataType: "json",
            type: "POST",
            async: true,
            url: "/TestCase/SaveFolderDatasetData",
            data: { lgridchange: JSON.stringify(changes), lgrid: JSON.stringify(gridobj[lgridName].pdata), FolderId: folderId/*, reSeqFlag: reSeqFlag*/ },
            success: function (result) {
                if (result.status == 1) {
                    if (result.message == "success") {
                        swal.fire({
                            "title": "",
                            "text": " Filter Name [" + fName + "] Saved successfully.",
                            "icon": "success",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                        gridobj[lgridName].commit({ type: 'add', rows: changes.addList });
                        gridobj[lgridName].commit({ type: 'update', rows: changes.updateList });
                        gridobj[lgridName].commit({ type: 'delete', rows: changes.deleteList });

                        gridobj[lgridName].history({ method: 'reset' });
                        ReloadFolderDatasetList(lgridName, folderId);
                    }
                }
                else if (result.status == 0) {
                    if (result.message == "validation") {
                        var validationmsgs = "<table cellborder='0' cellspacing='2' cellpadding='5'>";
                        var lobject = JSON.parse(result.data);
                        $("#ValidationMessageLabel").html("");
                        for (var i = 0; i < lobject.length; i++) {
                            var lrowid = lobject[i].pq_ri;
                            gridobj[lgridName].setSelection({ rowIndx: lrowid, focus: true });
                            gridobj[lgridName].Range({ r1: lrowid, r2: lrowid }).comment(lobject[i].ValidMsg);
                            validationmsgs += "<tr><td style='width: 80px;'>Row: " + (lrowid + 1) + "</td><td align='left'>" + lobject[i].ValidMsg + "</td></tr>";
                        }
                        validationmsgs += "</table>";
                        $("#ValidationMessageLabel").html(validationmsgs);
                        $("#ValidateMsgModel").modal("toggle");
                    }
                    else {
                        swal.fire({
                            "title": "",
                            "text": result.message,
                            "icon": "error",
                            "onClose": function (e) {
                                console.log('on close event fired!');
                            }
                        });
                    }
                }

            },
            complete: function (result) {
                stoploader();
            }
        });
    }

    function ReloadFolderSequence(lgridName, FolderId) {
        debugger
        startloader();
        //reSeqFlag = 1;
        $.ajax({
            url: "/TestCase/ReSequenceFolderDataset",
            type: "POST",
            async: true,
            data: { lgrid: JSON.stringify(gridobj[lgridName].pdata) },
            dataType: "json",
            success: function (result) {
                debugger
                if (result.status == 1) {
                    var jsonData = [];
                    jsonData = "[";
                    var datasetlist = JSON.parse(result.data);
                    if (datasetlist.length > 0) {
                        var StepNo = 0;
                        for (i = 0; i < datasetlist.length; i++) {

                            if (jsonData.length > 1) {
                                jsonData += ",";
                            }
                            StepNo = StepNo + 1;
                            var SEQ = datasetlist[i].SEQ == 0 ? "" : datasetlist[i].SEQ;
                            jsonData += '{ "StepNo":"' + StepNo + '","DataSetId":"' + datasetlist[i].DataSetId + '","ProjectIds":"' + datasetlist[i].ProjectIds + '","DatasetName":"' + datasetlist[i].DatasetName + '","DatasetDesc":"' +
                                datasetlist[i].DatasetDesc + '", "TestCase":"' + datasetlist[i].TestCase + '","TestCaseId":"' + datasetlist[i].TestCaseId + '", "TestSuite":"' +
                                datasetlist[i].TestSuite + '", "TestSuiteId":"' + datasetlist[i].TestSuiteId + '","Storyboard":"' + datasetlist[i].Storyboard +
                                '","ProjectName":"' + datasetlist[i].ProjectName + '", "SEQ": "' + SEQ + '"';
                            jsonData += "}";
                        }
                    }
                    jsonData = jsonData + "]";
                    jsonData = jsonData.replaceAll('\t', ' ');
                    jsonData = jsonData.replaceAll('\r', ' ');
                    jsonData = jsonData.replaceAll('\\\\', ' ');
                    jsonData = jsonData.replaceAll('\\', ' ');

                    var Rdata = JSON.parse(jsonData);
                    debugger
                    gridobj[lgridName].option("dataModel.data", Rdata);
                    gridobj[lgridName].refreshDataAndView();
                } else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            },
                        complete: function (result) {
                stoploader();
            }
        });
    }


    function EditRow(rowIndx, grid) {
        debugger
        var rowData = grid.getRowData({ rowIndx: rowIndx });
        var lTestCaseName = rowData.TestCase;
        var ltestsuitename = rowData.TestSuite;
        var ldatasetName = rowData.DatasetName;
        var ltestsuiteId = rowData.TestSuiteId;
        var ltestcaseId = rowData.TestCaseId;
        var storyboradId = 0;
        var lstoryboardname = "";
        if (rowData.ProjectIds != undefined) {
            var ids = rowData.ProjectIds.split(',').filter(function (x) { return x > -1 });
            if (ids.length > 0) {
                var lProjectId = ids[0];
                PartialRightGridTestCaseFromStoryboard(ltestcaseId, ltestsuiteId, lProjectId, ldatasetName, lTestCaseName, null, storyboradId, lstoryboardname);
                //$.ajax({
                //    url: "/Home/GetTSTCDSName",
                //    data: JSON.stringify({ TestCasename: lTestCaseName, TestSuitname: ltestsuitename, Datasetname: ldatasetName }),
                //    contentType: "application/json;charset=utf-8",
                //    dataType: "json",
                //    type: "POST",
                //    async: false,
                //    success: function (result) {
                //        if (result.status == 1) {
                //            if (result.data !== null) {
                //                ltestsuiteId = result.data[0];
                //                ltestcaseId = result.data[1];
                //            }
                //            PartialRightGridTestCaseFromStoryboard(ltestcaseId, ltestsuiteId, lProjectId, ldatasetName, lTestCaseName, null, storyboradId, lstoryboardname);
                //        } else if (result.status == 0) {
                //            swal.fire({
                //                "title": "",
                //                "text": result.message,
                //                "icon": "error",
                //                "onClose": function (e) {
                //                    console.log('on close event fired!');
                //                }
                //            });
                //        }
                //    },
                //});
            }
            else {
                swal.fire({
                    "title": "",
                    "text": "Project not assigned",
                    "icon": "error",
                    "onClose": function (e) {
                        console.log('on close event fired!');
                    }
                });
            }
        } else {
            swal.fire({
                "title": "",
                "text": "Project not assigned",
                "icon": "error",
                "onClose": function (e) {
                    console.log('on close event fired!');
                }
            });
        }
    }
</script>

<div class="kt-subheader   kt-grid__item" id="kt_subheader" style="left: @ViewBag.width;">
    <div class="kt-container  kt-container--fluid ">
        <div class="kt-subheader__main">
            <span class="kt-subheader__separator kt-hidden"></span>
            <div class="kt-subheader__breadcrumbs">
                <input type="hidden" name="@FolderId" id="@FolderId" value="@FolderId" />
            </div>
        </div>
        <div class="kt-subheader__toolbar">
        </div>
    </div>
</div>
<div class="kt-portlet__body">
    <div id="grid" class="@classgridobj" style="margin:auto;padding:0px 10px;"></div>
</div>

