@using MARS_Repository.ViewModel
@{
    string EditConn = "false", DeleteConn = "false", TestConn = "false";
    var PrivilegeList = Session["PrivilegeList"] as List<PrivilegeViewModel>;
    if (PrivilegeList.Count > 0)
    {
        EditConn = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Connection").ToString().ToLower();
        DeleteConn = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete Connection").ToString().ToLower();
    }
}

<input type="hidden" value="@EditConn" id="hdnEditConn" />
<input type="hidden" value="@DeleteConn" id="hdnDeleteConn" />
<div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content">
    @*<div class="kt-subheader   kt-grid__item" id="kt_subheader" style="left: @ViewBag.width;">
        <div class="kt-container  kt-container--fluid ">
            <div class="kt-subheader__main">

                <span class="kt-subheader__separator kt-hidden"></span>
                <div class="kt-subheader__breadcrumbs">
                    <a href="#" class="kt-subheader__breadcrumbs-home"><i class="flaticon2-settings" style="color:#1c6081"></i></a>
                    <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081">
                        Database Connections
                    </a>
                    <i class="fa fa-angle-double-right" style="color:#1c6081"></i>
                    <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081">
                        &nbsp;
                    </a>
                </div>
            </div>
        </div>
    </div>*@
    <div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid">
        <div class="kt-portlet kt-portlet--mobile">
            <div class="kt-portlet__head kt-portlet__head--lg">
                <div class="kt-portlet__head-label">
                    <h3 class="kt-portlet__head-title" style="color:#1582ab">
                        List Of All Database Connections
                    </h3>
                </div>
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add Connection"))
                {
                    <div class="kt-portlet__head-toolbar">
                        <div class="kt-portlet__head-wrapper">
                            <div class="kt-portlet__head-actions">
                                <button type="button" class="btn btn-brand btn-elevate btn-icon-sm" data-toggle="modal" onclick="AddConnection()" data-target="#kt_modal_4"><i class="la la-plus"></i>New Connection</button>
                                &nbsp;
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal fade" id="AddConnection" tabindex="-1" role="dialog" aria-labelledby="connModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="connModalLabel">Add Connection</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="frmconnection">
                                <input type="hidden" id="hdnConnectionId" name="hdnConnectionId" />
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Connection Name<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="connectionname" name="connectionname" onchange="CheckNameExist()" maxlength="128">
                                    <label id="existConnectionName" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">
                                        Connection Name already exist.
                                    </label>
                                    <label id="connectionvalidate" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">
                                        Connection name can only consist Uppercase,Lowercase,numbers and Special characters(-,_,.,*,&,(,))
                                    </label>
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Database Type</label>
                                    <select class="form-control kt-select2" id="sDrpConnectionType" name="sDrpConnectionType">
                                        
                                        @*<option value="0" disabled>Select Connection Type</option>*@
                                        <option value="0" style="display:none"></option>
                                        <option value="1">Oracle</option>
                                        <option value="2">SQL Server</option>
                                        <option value="3">SyBase</option>
                                        
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="message-text" class="form-control-label">Host<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="host" name="host" maxlength="50">
                                </div>
                                <div class="form-group">
                                    <label for="message-text" class="form-control-label">Port</label>
                                    <input type="text" class="form-control" id="port" name="port" maxlength="10">
                                </div>
                                <div class="form-group">
                                    <label for="message-text" class="form-control-label">Protocol</label>
                                    <input type="text" class="form-control" id="protocol" name="protocol" maxlength="10">
                                </div>
                                <div class="form-group">
                                    <label for="message-text" class="form-control-label">Service Name</label>
                                    <input type="text" class="form-control" id="serviceName" name="serviceName" maxlength="128">
                                </div>
                                <div class="form-group">
                                    <label for="message-text" class="form-control-label">SID/Database Name</label>
                                    <input type="text" class="form-control" id="sid" name="sid" maxlength="50">
                                </div>
                                <div class="form-group">
                                    <label for="message-text" class="form-control-label">User ID</label>
                                    <input type="text" class="form-control" id="dbUserId" name="dbUserId" maxlength="30">
                                </div>
                                <div class="form-group">
                                    <label for="message-text" class="form-control-label">Password</label>
                                    <input type="password" class="form-control" id="dbpassword" name="dbpassword" maxlength="30">
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Active</label>
                                    <label class='kt-checkbox--brand' style="padding-left:1em"><input type="checkbox" id="isActive" name="isActive" checked></label>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" id="testConnection" class="btn btn-outline-brand btn-elevate btn-pill" onclick="TestConnection()">Test Connection</button>
                            <button type="button" id="addconnection" class="btn btn-outline-brand btn-elevate btn-pill" onclick="AddEditConnectionSave()">Save</button>
                            <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="kt-portlet__body">
                <table class="table table-striped- table-bordered table-hover table-checkable " id="connectiontable">
                    <thead>
                        <tr>
                            <th>Connection Name</th>
                            <th>Connection Type</th>
                            <th>Host</th>
                            <th>Port</th>
                            <th>Protocol</th>
                            <th>Service Name</th>
                            <th>SID</th>
                            <th>User Id</th>
                            <th style="color: #1c6081;background-color: #e9f5ff;font-weight: bold;">Actions</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>
<script>
    startloader();
    var ConnectionTable = function () {
        $.fn.dataTable.Api.register('column().title()', function () {

                return $(this.header()).text().trim();
            });
        var initConnectiontable = function () {

            var lEditConnDisplay = $("#hdnEditConn").val();
            var lDeleteConnDisplay = $("#hdnDeleteConn").val();
            

            ConnectionTable = $('#connectiontable').DataTable({
                responsive: false,
                // Pagination settings
                dom: `<'row'<'col-sm-12'tr>>
                                                    <'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7 dataTables_pager'lp>>`,
                // read more: https://datatables.net/examples/basic_init/dom.html

                lengthMenu: [10, 100, 1000],
                processing: true,
                pageLength: 100,

                language: {
                    'lengthMenu': 'Display _MENU_',
                    "processing": "<img  src='../assets/media/mars.gif' style='width:80px;'/>"
                },
                "scrollY": $(window).height() - 305,
                searchDelay: 500,
                //  processing: true,
                serverSide: true,
                ajax: {
                    url: '/DatabaseConnection/DataLoad',
                    type: 'POST',
                    data: {
                        // parameters for custom backend script demo
                        columnsDef: [
                            'ConnectionName', 'ConnectionTypeString', 'Host', 'Port', 'Protocol', 'ServiceName', 'SID', 'UserId'],
                    },
                },

                columns: [
                    { data: 'ConnectionName', name: "ConnectionName", width: '20%', "targets": 0, autowidth: false },
                    { data: 'ConnectionTypeString', name: "ConnectionTypeString", width:'10%', "targets": 1, autowidth: false },
                    { data: 'Host', name: "Host", width: '10%', "targets": 2, autowidth: false },
                    { data: 'Port', name: "Port", width: '10%', "targets": 3, autowidth: false },
                    { data: 'Protocol', name: "Protocol", width: '10%', "targets": 4, autowidth: false },
                    { data: 'ServiceName', name: "ServiceName", width: '10%', "targets": 5, autowidth: false },
                    { data: 'Sid', name: "Sid", width: '10%', "targets": 6, autowidth: false },
                    { data: 'UserId', name: "UserId", width: '10%', "targets": 7, autowidth: false },
                    { data: 'Actions', responsivePriority: -1, width: '10%', "targets": 8, autowidth: false }
                ],
                initComplete: function () {
                    var thisTable = this;
                   var rowFilter = $('<tr class="filter"></tr>').appendTo($(ConnectionTable.table().header()));
                   
                    ConnectionTable.columns().every(function () {
                        var column = this;
                        var input;
                        switch (column.title()) {
                            case 'Connection Name':
                            case 'Connection Type':
                            case 'Host':
                            case 'Port':
                            case 'Protocol':
                            case 'Service Name':
                            case 'SID':
                            case 'User Id':
                                input = $(`<input type="text" class="form-control form-control-sm form-filter kt-input" data-col-index="` + column.index() + `"/>`);
                                $(input).keyup(function () {
                                    var params = {};
                                    $(rowFilter).find('.kt-input').each(function () {
                                        var i = $(this).data('col-index');
                                        if (params[i]) {
                                            params[i] += '|' + $(this).val();
                                        }
                                        else {
                                            params[i] = $(this).val();
                                        }
                                    });
                                    $.each(params, function (i, val) {
                                        ConnectionTable.column(i).search(val ? val : '', false, false);
                                    });
                                    ConnectionTable.table().draw();
                                });
                                break;
                        }
                        if (column.title() !== 'actions') {
                            $(input).appendTo($('<th>').appendTo(rowFilter));
                        }
                    });
                },
                columnDefs: [
                    {
                        targets: -1,
                        title: 'Actions',
                        orderable: false,
                        render: function (data, type, full, meta) {
                            var lid = full.ConnectionId;
                            var lName = full.ConnectionName.replace(/'/g, "###");
                            var lType = full.ConnectionType;
                            var lHost = full.Host;
                            var lPort = full.Port;
                            var lProtocol = full.Protocol;
                            var lServName = full.ServiceName;
                            var lSid = full.Sid;
                            var lUserId = full.UserId;
                            var lPassword = full.Password;
                            var cActive = full.IsActive;
                            
                            //lEditConnDisplay
                            var lRenderHtml = "";
                            if (lEditConnDisplay == "true") {
                                lRenderHtml = " <a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='View' data-name='" + lName + "' data-type='" + lType + "' data-host='" + lHost + "' data-port='" + lPort + "' data-proto='" + lProtocol + "' data-serv='" + lServName + "' data-sid='" + lSid + "' data-user='" + lUserId + "' data-pass='" + lPassword+ "' data-active='" + cActive  + "'onclick=AddEditDbConnection(" + lid + ",$(this)) ><i class='la la-edit'></i></a> ";
                            }
                            if (lDeleteConnDisplay == "true") {
                                lRenderHtml = lRenderHtml + "<a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Delete' onclick='ConnDelete(" + lid + ")' ><i class='la la-trash la-xs'></i></a>";
                            }
                            
                            return lRenderHtml;
                        },
                    }
                ],
            });
        };
        stoploader();
        return {
            init: function () {
                initConnectiontable();
            },
            };
    }();
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        $($.fn.dataTable.tables(true)).DataTable()
            .columns.adjust();
    });
    jQuery(document).ready(function () {
        ConnectionTable.init();
    });
    $(document).ready(function () {

        $("#frmconnection").validate({
            rules: {
                databasename: {
                    required: true
                },
                host: {
                    required: true
                },
                
                sDrpConnectionType: {
                    required: true
                },
                port: {
                    number: true
                }
            },
        });
    });

    function AddEditDbConnection(Id, editObj) {
        console.log("in add edit db conn");
        var validator = $("#frmconnection").validate();
        validator.resetForm();
        $("#connModalLabel").text('');
        $("#connModalLabel").text('Edit Connection');
        $("#addconnection").prop("disabled", false);

        $("#connectionvalidate").css("display", "none");
        $("#AddConnection").modal("show");
        $('.modal-dialog').draggable({
            handle: ".modal-header"
        });
        
        var lconnectionId = Id;
        var DbName = $(editObj).attr("data-name").replace(/###/g, "'");
        var DbType = $(editObj).attr("data-type").replace(/###/g, "'");
        var Host = $(editObj).attr("data-host");
        var Port = $(editObj).attr("data-port");
        var Protocol = $(editObj).attr("data-proto");
        var ServiceName = $(editObj).attr("data-serv");
        var Sid = $(editObj).attr("data-sid");
        var DbUserId = $(editObj).attr("data-user");
        var DbPassword = $(editObj).attr("data-pass");
        var IsActive = $(editObj).attr("data-active");
        console.log(IsActive);
        $("#hdnConnectionId").val(lconnectionId);
        $("#connectionname").val(DbName);
       
        $("#sDrpConnectionType").val(DbType);
        $('#sDrpConnectionType').trigger('change');
        $("#host").val(Host); 
        $("#port").val(Port);
        $("#protocol").val(Protocol);
        $("#serviceName").val(ServiceName);
        $("#sid").val(Sid);
        $("#dbUserId").val(DbUserId);
        $("#dbpassword").val(DbPassword);
        if (IsActive == "1")
            $("#isActive").prop('checked', true);
        else
            $("#isActive").prop('checked', false);

        //if (!$("#connectionvalidate").valid())
        //    return false;
    }

    function AddConnection() {
        $("#connectionvalidate").css("display", "none");
        $("#addedconnection").attr("disabled", false);
        $("#connModalLabel").text('');
        $("#connModalLabel").text('Add Connection');
        $("#AddConnection").modal("show");
        $('.modal-dialog').draggable({
            handle: ".modal-header"
        });
        $("#hdnConnectionId").val("");
        $("#connectionname").val("");
        $("#sDrpConnectionType").val("");
        $("#sDrpConnectionType").select2(
            {
                placeholder: "Connection Type",
                allowClear: true
            });
        $("#host").val("");
        $("#port").val("");
        $("#protocol").val("");
        $("#serviceName").val("");
        $("#sid").val("");
        $("#dbUserId").val("");
        $("#dbpassword").val("");
        var validator = $("#frmconnection").validate();
        validator.resetForm();
    }

    function ConnDelete(id) {
        swal.fire({
            title: 'Please confirm.',
            text: "This action can not be undone.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value == true) {
                $.ajax({
                    url: "/DatabaseConnection/DeleteConnection",
                    data: JSON.stringify({ "ConnectionId": id }),
                    type: "POST",
                    async: false,
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        if (result.status == 1) {
                            if (result.data == "success") {
                                
                                swal.fire(
                                    'Deleted!',
                                    result.message,
                                    'success'
                                )
                            }
                            else {
                                if (result.data.length > 0) {
                                    var resultstring = "";
                                    for (i = 0; i < result.data.length; i++) {

                                        resultstring = resultstring + result.data[i] + " , ";
                                    }
                                    swal.fire(
                                        'Deleted!',
                                        'Following Projects contain this Application. Please remove this Application from Project. ' + "<br>" + resultstring,
                                        'error'
                                    )
                                }
                            }
                            ConnectionTable.table().draw();
                        }
                        else if (result.status == 0) {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "error",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }

                    },
                    error: function (x, y, z) {
                        swal.fire(
                            'Error while deleting',
                            'error'
                        )
                    }
                });
            }
        });
    }

    function AddEditConnectionSave() {
      $("#addconnection").prop("disabled",true);
        if (!$("#frmconnection").valid()) {
            $("#addconnection").prop("disabled", false);
            return false;
        }
      var lId = $("#hdnConnectionId").val();
    if (lId == null && lId == "")
            lId = 0;
        var regex = /^[a-zA-Z0-9-._(&)*  ]*$/;
        var activeval = 0;

        if ($("#isActive").is(":checked"))
            activeval = 1;
        
        var DbConnectionModel = {};
        DbConnectionModel.ConnectionId = lId,
          
          DbConnectionModel.ConnectionName = $("#connectionname").val(),
          DbConnectionModel.ConnectionType = $("#sDrpConnectionType").val().toString(),
          DbConnectionModel.Host = $("#host").val(),
          DbConnectionModel.Port = $("#port").val(),
          DbConnectionModel.Protocol = $("#protocol").val(),
          DbConnectionModel.ServiceName = $("#serviceName").val(),
          DbConnectionModel.Sid = $("#sid").val(),
          DbConnectionModel.UserId = $("#dbUserId").val(),
          DbConnectionModel.Password = $("#dbpassword").val();
        DbConnectionModel.ConnectionTypeString = $("#sDrpConnectionType option:selected").html();
        DbConnectionModel.IsActive = activeval;


        if (!regex.test(DbConnectionModel.ConnectionName)) {
            $("#connectionname").val("");
            $("#connectionvalidate").css("display", "block");
            $("#addconnection").attr("disabled", false);
            return false;
        }
        $.ajax({
            url: "/DatabaseConnection/AddEditConnection",
            data: JSON.stringify(DbConnectionModel),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                $("#AddConnection").modal("hide");
                $("#addconnection").attr("disabled", false);
                if (result.status == 1 && result.data) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
                else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
                ConnectionTable.table().draw();
            },
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }

    function CheckNameExist() {
        var connName = $("#connectionname").val();
        var connId = $("#hdnConnectionId").val();

        $.ajax({
            url: "/DatabaseConnection/CheckDuplicateConnectionNameExist",
            data: '{"connectionName":"' + connName + '","ConnectionId":"' + connId + '"}',
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                if (result.status == 1 && result.data) {
                    $("#connectionname").val("");
                    $("#existConnectionName").css("display", "block");
                }
                else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            },
        });
    }

    function TestConnection() {
      //  startloader_modal();
        
        $("#testConnection").prop("disabled", true);
        if (!$("#frmconnection").valid()) {
            $("#testConnection").prop("disabled", false);
            return false;
        }
        var lId = $("#hdnConnectionId").val();
        if (lId == null && lId == "")
            lId = 0;
        var regex = /^[a-zA-Z0-9-._(&)*  ]*$/;

        var DbConnectionModel = {};
        DbConnectionModel.ConnectionId = lId,

            DbConnectionModel.ConnectionName = $("#connectionname").val(),
            DbConnectionModel.ConnectionType = $("#sDrpConnectionType").val().toString(),
            DbConnectionModel.Host = $("#host").val(),
            DbConnectionModel.Port = $("#port").val(),
            DbConnectionModel.Protocol = $("#protocol").val(),
            DbConnectionModel.ServiceName = $("#serviceName").val(),
            DbConnectionModel.Sid = $("#sid").val(),
            DbConnectionModel.UserId = $("#dbUserId").val(),
            DbConnectionModel.Password = $("#dbpassword").val();

        if (!regex.test(DbConnectionModel.ConnectionName)) {
            $("#connectionname").val("");
            $("#connectionvalidate").css("display", "block");
            $("#testConnection").attr("disabled", false);
            return false;
        }
        $.ajax({
            url: "/DatabaseConnection/TestConnection",
            data: JSON.stringify(DbConnectionModel),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
              //  $("#AddConnection").modal("hide");
                $("#testConnection").attr("disabled", false);
                
                if (result.status == 1 && result.data) {
                    console.log("In passed");
                   // stoploader_modal();
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
                else if (result.status == 0) {
                  //  stoploader_modal();
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
               
            },
            error: function (errormessage) {
                console.log("in error");
               // stoploader_modal();
                alert(errormessage.responseText);
            },
            complete: function (result) {
              //  stoploader();
            }
        });
        //stoploader_modal();
    }

    $("#connectionname").on('keyup', function () {
        $("#existConnectionName").css("display", "none");
    });
    $("#connectionname").on('keyup', function () {
        $("#connectionvalidate").css("display", "none");
    });

</script>




