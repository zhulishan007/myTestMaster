
<style>
          table.dataTable tbody td {
            word-break: break-word;
            vertical-align: top;
        }
    
  /*      .ui-tabs .ui-tabs-hide {
            position: absolute;
            left: -10000px;
        }*/
</style>
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

<script src="~/Scripts/dataResources.js"></script>
@using MARS_Repository.ViewModel
@using MARS_Web.controllerPartner
@using MARS_Web.Controllers
@using Mars.Dto
@{
    ReportManagerControllerPartner contrlPartner = new ReportManagerControllerPartner();
    bool isErrorMode = contrlPartner.GetIsviewWithError(ViewData); //是否需要顯示错误信息
    string strCurrentError = contrlPartner.GetCurrentError(ViewData);
    string strError = "", strStack = "", strAdv = "";
    bool isOk = false;
    
    string EditKey = "false", DeleteKey = "false";
    var PrivilegeList = Session["PrivilegeList"] as List<PrivilegeViewModel>;
    if (PrivilegeList.Count > 0)
    {
        EditKey = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Keyword").ToString().ToLower();
        DeleteKey = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete Keyword").ToString().ToLower();
    }
}
<script> var dataSourceRows =@Html.Raw(Json.Encode(ViewBag.dataSource)); </script>
<div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content" >
   
    <div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid">
        <div class="kt-portlet kt-portlet--mobile">            
            <div class="kt-portlet__body">                
                <table class="table table-striped- table-bordered table-hover table-checkable " id="dataSourceTable">
                    <thead>
                        <tr>
                            <th>DataSource Name</th>
                            <th class="ObjectnoWrap">ControlType</th>
                            <th>Entry in Data File</th>
                            <th style="color: #1c6081;background-color: #e9f5ff;font-weight: bold;">Actions</th>
                        </tr>
                    </thead>
                    <tr>
                        <td colspan="4">
                            <div id="DatasourceGrid" style="margin:5px auto;"></div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    //$(function () {
    //    $("#dataSourceTabs").tabs();
    //})
    var tmpdta = "<compare id=/>?";
    var $DataSourceGrid = null; 

    function DataSourceAssign(DataSourceId) {
        ///算法：
        ///1， 弹出对话框?
        //
    }

    var dataSourceColumns = [
        {
            title: "Data source Id", width: 100, dataType: "string", dataIndx: "DATA_SOURCE_ID",
            filter: { crules: [{ condition: 'range' }] }
        },
        {
            title: "Data source Name", width: 180, dataIndx: "DATA_SOURCE_NAME", hidden: false,
            filter: { crules: [{ condition: 'range' }] }
        },
        {
            title: "Data Type", width: 200, hidden: false,
            filter: { crules: [{ condition: 'range' }] }
        },
        {
            title: "Details", width: 400, dataIndx: "DETAILS", hidden: false,
            filter: { crules: [{ condition: 'range' }] }
        },
        {
            title: "Type", width: 400, dataIndx: "DATA_SOURCE_TYPE", hidden: true
        },
        {
            title: "", editable: false, minWidth: 83, sortable: false,
            render: function (ui) {
                //console.log("full");
                //Object.entries(ui).forEach(([key, value]) => {
                //    console.log('${key} ${value}');
                //});

                var lid = ui.rowData["DATA_SOURCE_ID"];
                var lRenderHtml = "";
                console.log(ui.rowData['DATA_SOURCE_TYPE'])

                lRenderHtml = "<a href='#' class='btn btn-sm btn-clean ' title='Delete' onclick='DataSourceDelete(" + lid + ")' ><img src='/Content/images/cancel_small.png' width='20'/><i class='la la-xs'></i></a>";
                if (ui.rowData['DATA_SOURCE_TYPE']== "3") {
                    // attach assign Dataset
                    //console.log('type 3');
                    lRenderHtml += "<a href='#' class='btn btn-sm btn-clean ' title='Assign Dataset' onclick='DataSourceAssign(" + lid + ")' ><img src='/Content/images/data-encryption-64.png' width='20'/><i class='la la-xs'></i></a>";
                }
                return lRenderHtml;
            },
        },
        { title: "postToServer", dataIndx:"", hidden: true }
    ];

    var formulasXX = [[2, function (rd) {
        //if (iCnt >= 10) return "";
        //alert(rd["Type"]);
        //if (ocnt.tmpCnt > 3) return "N/A";
        //alert("1 " + rd["Type"]);
        //alert("2 " + rd[1]);
        //alert("3 " + rd["DATA_SOURCE_TYPE"]) works;
        //ocnt.tmpCnt += 1;
        var sourceType = rd["DATA_SOURCE_TYPE"];
        if (sourceType == "1") {
            return "MARS COMPARE DATA SOURCE";
        } else if (sourceType == "2") {
            return "DB CONNECTION";
        } else if (sourceType == "3") {
            return "SQL DATASOURCE";
        }

        return "N/A";
    }]];
    var datasourceTable = {
        widht: "100%",
        height: 500,
        resizeble: true,
        filterModel: {
            on: true,
            mode: "AND",
            header: true,
            menuIcon: true //show filter row icon initially.
        },
        title: "MARS Datasource Mamangement",
        showBottom: true,
        numberCell: { show: true },
        pageModel: { type: "local", rPP: 20, strRpp: "{0}", strDisplay: "{0} to {1} of {2}" },
        scrollMode: {autoFit:true},
        colModel: dataSourceColumns,
        dataModel: { data: dataSourceRows },
        toolbar: {
            items: [
                { type: 'button', label: 'Add', listeners: [{ click: AddRow }], icon: 'ui-icon-plus' },
                { type: 'button', label: 'Edit', icon: 'ui-icon-pencil' },
                { type: 'button', label: 'Delete', icon: 'ui-icon-minus' }
            ]
        },   
        formulas: formulasXX

    }
    //attachColumn2Render(datasourceTable);
    // listeners: [{ click: editRow }],  listeners: [{ click: editRow }], 
    

    $DataSourceGrid = $("#DatasourceGrid").pqGrid(datasourceTable)
        .pqGrid('option', 'height', 600);

    function AddRow() {
        debugger;
        var r = $DataSourceGrid.getRowIndx();
        var pIndx = r.rowIndxPage;
        var rIdx = r.rowIdx;
        alert(r, pIndx, rIdx);
    }
    
    @*var DatasourceTable = function () {
        $.fn.dataTable.Api.register('column().title()', function () {
            return $(this.header()).text().trim();
        });

        var initKeywordTable = function () {
            responsive: false,
            // Pagination settings
            dom:"<'row'<'col-sm-12'tr>>
                                        <'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7 dataTables_pager'lp>>`,
                // read more: https://datatables.net/examples/basic_init/dom.html

            lengthMenu: [10, 100, 1000],
            processing: true,
            pageLength: 100,

            language: {
                'lengthMenu': 'Display _MENU_',
                "processing": "<img  src='../assets/media/mars.gif'style='width:80px;'/>"
            },
            "scrollY": $(window).height() - 305,
        DatasourceTable = $('#Keywordtable').DataTable({
            searchDelay: 500,
            //  processing: true,
                serverSide: true,
                ajax: {
                    url: '/Keyword/DataLoad',
                    type: 'POST',
                    data: {
                        // parameters for custom backend script demo
                        columnsDef: [
                            'KeywordName', 'ControlType', 'EntryFile', 'Actions',],
                    },
                },

                columns: [
                    { data: 'KeywordName', name: "Name", width: '@ViewBag.namewidth', "targets": 0, autowidth: false },
                    { data: 'ControlType', name: "ControlType", width: '@ViewBag.controlTypewidth', "targets": 1, autowidth: false },
                    { data: 'EntryFile', name: "EntryFile", width: '@ViewBag.entryDatawidth', "targets": 2, autowidth: false },
                    { data: 'Actions', responsivePriority: -1, width: '@ViewBag.actionswidth', "targets": 3, autowidth: false }
                ],
                initComplete: function () {
                    var thisTable = this;
                    var rowFilter = $('<tr class="filter"></tr>').appendTo($(KeywordTable.table().header()));

                    KeywordTable.columns().every(function () {
                        var column = this;
                        var input;
                        switch (column.title()) {
                            case 'Name':
                            case 'ControlType':
                            case 'EntryFile':
                                input = $(`<input type="text" class="form-control form-control-sm form-filter kt-input" data-col-index="` + column.index() + `"/>`);
                                $(input).keyup(function () {
                                    var params = {};
                                    $(rowFilter).find('.kt-input').each(function () {
                                        var i = $(this).data('col-index');
                                        if (params[i]) {
                                            params[i] += '|' + $(this).val();
                                        }
                                        else {
                                            params[i] = $(this).val();
                                        }
                                    });
                                    $.each(params, function (i, val) {
                                        // apply search params to datatable
                                        KeywordTable.column(i).search(val ? val : '', false, false);
                                    });
                                    KeywordTable.table().draw();
                                });
                                break;
                        }

                        if (column.title() !== 'actions') {
                            $(input).appendTo($('<th>').appendTo(rowFilter));
                        }
                    });

                },
                columnDefs: [
                    {
                        targets: -1,
                        title: 'Actions',
                        orderable: false,
                        render: function (data, type, full, meta) {
                            var lid = full.KeywordId;
                            var lName = full.KeywordName.replace(/'/g, "###");
                            var lControlType = full.ControlType;
                            var lControlTypeId = full.ControlTypeId;
                            var lEntryFile = full.EntryFile;

                            var lRenderHtml = "";
                            if (lEditKeydisplay == "true") {
                                lRenderHtml = " <a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='View' data-name='" + lName + "' data-ControlType='" + lControlType + "' data-ControlTypeId='" + lControlTypeId + "' data-EntryFile='" + lEntryFile + "' onclick=AddEditKeyword(" + lid + ",$(this)) ><i class='la la-edit'></i></a> ";
                            }
                            if (lDeleteKeydisplay == "true") {
                                lRenderHtml = lRenderHtml + "<a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Delete' onclick='keyDelete(" + lid + ")' ><i class='la la-trash la-xs'></i></a>";
                            }
                            return lRenderHtml;
                        },
                    }
                ],
            });
        };
        return {
            init: function () {
                initKeywordTable();
            },

        };
    }();*@


    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        $($.fn.dataTable.tables(true)).DataTable()
            .columns.adjust();
    });
    //jQuery(document).ready(function () {
    //    //KeywordTable.init();

    //    createDefaultDataSourceTabs();

    //});
    $.fn.dataTable.render.ellipsis = function (cutoff, wordbreak, escapeHtml) {
        var esc = function (t) {
            return t
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;');
        };

        return function (d, type, row) {
            // Order, search and type get the original data
            if (type !== 'display') {
                return d;
            }

            if (typeof d !== 'number' && typeof d !== 'string') {
                return d;
            }

            d = d.toString(); // cast numbers

            if (d.length < cutoff) {
                return d;
            }

            var shortened = d.substr(0, cutoff - 1);

            // Find the last white space character in the string
            if (wordbreak) {
                shortened = shortened.replace(/\s([^\s]*)$/, '');
            }

            // Protect against uncontrolled HTML input
            if (escapeHtml) {
                shortened = esc(shortened);
            }

            return '<span class="ellipsis" title="' + esc(d) + '">' + shortened + '&#8230;</span>';
        };
    };
    //$(document).ready(function () {
    //    $("#frmkeyword").validate({
    //        rules: {
    //            keywordname: {
    //                required: true
    //            },
    //            sDrpControlType: {
    //                required: true
    //            }
    //        },
    //    });

    //    $('#sDrpControlType').on('changed.bs.sDrpControlType', function () {
    //        validator.element($(this)); // validate element
    //    });

    //});

    //function keyDelete(id) {
    //    swal.fire({
    //        title: 'Please confirm.',
    //        text: "This action can not be undone.",
    //        icon: 'warning',
    //        showCancelButton: true,
    //        confirmButtonText: 'Yes, delete it!'
    //    }).then(function (result) {
    //        if (result.value == true) {
    //            $.ajax({
    //                url: "/Keyword/DeletKeyword",
    //                data: JSON.stringify({ "Keywordid": id }),
    //                type: "POST",
    //                async: false,
    //                contentType: "application/json;charset=utf-8",
    //                dataType: "json",
    //                success: function (result) {
    //                    if (result.status == 1) {
    //                        if (result.data) {
    //                            KeywordTable.table().draw();
    //                            swal.fire(
    //                                'Deleted!',
    //                                result.message,
    //                                'success'
    //                            )
    //                        }
    //                        else {
    //                            if (result.data.length > 0) {
    //                                var resultstring = "";
    //                                for (i = 0; i < result.data.length; i++) {

    //                                    resultstring = resultstring + result.data[i] + " , ";
    //                                }
    //                                swal.fire(
    //                                    'Deleted!',
    //                                    'Following Test Cases contain Keyword [' + result.message + '].Please remove this Keyword from Test Cases. ' + "<br>" + resultstring,
    //                                    'error'
    //                                )
    //                            }
    //                        }
    //                    }
    //                    else if (result.status == 0) {
    //                        swal.fire({
    //                            "title": "",
    //                            "text": result.message,
    //                            "icon": "error",
    //                            "onClose": function (e) {
    //                                console.log('on close event fired!');
    //                            }
    //                        });
    //                    }
    //                },
    //                error: function (x, y, z) {
    //                    swal.fire(
    //                        'Error while deleting',
    //                        'error'

    //                    )
    //                }
    //            });
    //        }
    //    });
    //}
    //function AddEditKeywordSave() {

    //    //if (!$("#frmkeyword").valid()) {
    //    //    var validationobj = $("#clsControlType").find("#sDrpControlType-error");
    //    //    if (validationobj.length > 0) {
    //    //        $("#clsControlType").find("#sDrpControlType-error").remove();
    //    //        validationHTML = "<div id='sDrpControlType-error' class='error invalid-feedback ' >This field is required.</div>";
    //    //        $("#clsControlType").append(validationHTML);

    //    //    }
    //    //    return false;
    //    //}
    //    //$("#addedkeyword").attr("disabled", true);

    //    //var lId = $("#hdnKeywordId").val();
    //    //if (lId == null && lId == "")
    //    //    lId = 0;
    //    //var regex = /^[a-zA-Z0-9-._(&)*  ]*$/;

    //    //var KeywordModel = {};
    //    //KeywordModel.KeywordId = lId,
    //    //    KeywordModel.KeywordName = $("#keywordname").val(),
    //    //    KeywordModel.ControlType = $("#sDrpControlType").val(),
    //    //    KeywordModel.ControlTypeId = $("#sDrpControlType").val().toString(),
    //    //    KeywordModel.EntryFile = $("#DrpDataFile").val().toString();
    //    //if (!regex.test(KeywordModel.KeywordName)) {
    //    //    $("#keywordname").val("");
    //    //    $("#keywordvalidate").css("display", "block");
    //    //    $("#addedkeyword").attr("disabled", false);

    //    //    return false;
    //    //}
    //    //var keyword = $("#keywordname").val();
    //    //$.ajax({
    //    //    url: "/Keyword/AddEditKeyword",
    //    //    data: JSON.stringify(KeywordModel),
    //    //    type: "POST",
    //    //    contentType: "application/json;charset=utf-8",
    //    //    dataType: "json",
    //    //    success: function (result) {
    //    //        $("#AddKeyword").modal("hide");
    //    //        if (result.status == 1 && result.data) {
    //    //            swal.fire({
    //    //                "title": "",
    //    //                "text": result.message,
    //    //                "icon": "success",
    //    //                "onClose": function (e) {
    //    //                    console.log('on close event fired!');
    //    //                }
    //    //            });
    //    //        } else if (result.status == 0) {
    //    //            swal.fire({
    //    //                "title": "",
    //    //                "text": result.message,
    //    //                "icon": "error",
    //    //                "onClose": function (e) {
    //    //                    console.log('on close event fired!');
    //    //                }
    //    //            });
    //    //        }

    //    //        KeywordTable.table().draw();
    //    //        $("#addedkeyword").attr("disabled", false);
    //    //    },
    //    //    error: function (errormessage) {
    //    //        alert(errormessage.responseText);
    //    //    }
    //    //});
    //}
    //function CheckNameExist() {
    //    var keywordname = $("#keywordname").val();
    //    var KeywordId = $("#hdnKeywordId").val();

    //    $.ajax({
    //        url: "/Keyword/CheckDuplicateKeywordNameExist",
    //        data: '{"keywordname":"' + keywordname + '","KeywordId":"' + KeywordId + '"}',
    //        type: "POST",
    //        contentType: "application/json;charset=utf-8",
    //        dataType: "json",
    //        success: function (result) {
    //            if (result.status == 1 && result.data) {
    //                $("#keywordname").val("");
    //                $("#existkeywordname").css("display", "block");
    //            }
    //            else if (result.status == 0) {
    //                swal.fire({
    //                    "title": "",
    //                    "text": result.message,
    //                    "icon": "error",
    //                    "onClose": function (e) {
    //                        console.log('on close event fired!');
    //                    }
    //                });
    //            }
    //        },
    //    });
    //}
    //$("#keywordname").on('keyup', function () {
    //    $("#existkeywordname").css("display", "none");
    //});
    //$("#keywordname").on('keyup', function () {
    //    $("#keywordvalidate").css("display", "none");
    //});

</script>





