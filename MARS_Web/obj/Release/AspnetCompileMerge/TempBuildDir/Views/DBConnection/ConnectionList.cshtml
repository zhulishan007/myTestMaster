<div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content">
    <div class="kt-subheader   kt-grid__item" id="kt_subheader">
        <div class="kt-container  kt-container--fluid ">
            <div class="kt-subheader__main">

                <span class="kt-subheader__separator kt-hidden"></span>
                <div class="kt-subheader__breadcrumbs">
                    <a href="#" class="kt-subheader__breadcrumbs-home"><i class="flaticon2-settings" style="color:#1c6081"></i></a>
                    <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081">
                        Connection
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid">
        <div class="kt-portlet kt-portlet--mobile">
            <div class="kt-portlet__head kt-portlet__head--lg">
                <div class="kt-portlet__head-label">
                    <h3 class="kt-portlet__head-title" style="color:#1582ab">
                        List Of All Connection
                    </h3>
                </div>
                <div class="kt-portlet__head-toolbar">
                    <div class="kt-portlet__head-wrapper">
                        <div class="kt-portlet__head-actions">
                            <button type="button" class="btn btn-brand btn-elevate btn-icon-sm" data-toggle="modal" onclick="AddConnection()" data-target="#kt_modal_4"><i class="la la-plus"></i>New Connection</button>
                            &nbsp;
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal fade" id="AddConnection" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Add Connection</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="frmconnection">
                                <input type="hidden" id="hdnConnectionId" name="hdnConnectionId" />
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">User Name<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="Username" name="Username" onchange="CheckNameExist()" maxlength="64">
                                    <label id="existUsername" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">
                                    </label>
                                    <label id="connectionvalidate" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">
                                        User name can only consist Uppercase,Lowercase,numbers and Special characters(-,_,.,*,&,(,))
                                    </label>
                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Password<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="Password" name="Password" onchange="CheckNameExist()" maxlength="64">
                                    <label id="existPassword" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">
                                    </label>
                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Schema<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="Schema" name="Schema" maxlength="64">

                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Host<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="Host" name="Host" maxlength="64">
                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Port<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="Port" name="Port" maxlength="64">
                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Service Name<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="ServiceName" name="ServiceName" maxlength="64">
                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Decode Method<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="DecodeMethod" name="DecodeMethod" maxlength="8">
                                    <label id="existDecodeMethod" class="error" style="display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">
                                        Please enter min 8 character.
                                    </label>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" id="addedConnection" class="btn btn-outline-brand btn-elevate btn-pill" onclick="AddEditConnectionSave()">Save</button>
                            <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="kt-portlet__body">
                <table class="table table-striped- table-bordered table-hover table-checkable " id="Connectiontable">
                    <thead>
                        <tr>
                            <th>User Name</th>
                            <th>Password</th>
                            <th>Schema</th>
                            <th>Host</th>
                            <th>Port</th>
                            <th>Service Name</th>
                            <th>Decode Method</th>
                            <th style="color: #1c6081;background-color: #e9f5ff;font-weight: bold;">Actions</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    var ConnectionTable = function () {
        $.fn.dataTable.Api.register('column().title()', function () {
            return $(this.header()).text().trim();
        });

        var initConnectionTable = function () {
            ConnectionTable = $('#Connectiontable').DataTable({
                responsive: true,

                // Pagination settings
                dom: `<'row'<'col-sm-12'tr>>
                                        <'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7 dataTables_pager'lp>>`,
                // read more: https://datatables.net/examples/basic_init/dom.html

                lengthMenu: [10, 100, 1000],
                processing: true,
                pageLength: 100,

                language: {
                    'lengthMenu': 'Display _MENU_',
                    "processing": "<img  src='../assets/media/mars.gif'/>"
                },

                searchDelay: 500,
                //  processing: true,
                serverSide: true,
                ajax: {
                    url: '/DBConnection/DataLoad',
                    type: 'POST',
                    data: {
                        // parameters for custom backend script demo
                        columnsDef: [
                            'UserName', 'Password', 'Schema', 'Host', 'Port', 'Service_Name', 'Actions',],
                    },
                },

                columns: [
                    { data: 'UserName', name: "User Name" },
                    { data: 'Password', name: "Password" },
                    { data: 'Schema', name: "Schema" },
                    { data: 'Host', name: "Host" },
                    { data: 'Port', name: "Port" },
                    { data: 'Service_Name', name: "Service Name" },
                    { data: 'DecodeMethod', name: "Decode Method" },
                    { data: 'Actions', responsivePriority: -1, width: "120px" }
                ],
                initComplete: function () {
                    var thisTable = this;
                    var rowFilter = $('<tr class="filter"></tr>').appendTo($(ConnectionTable.table().header()));

                    ConnectionTable.columns().every(function () {
                        var column = this;
                        var input;
                        switch (column.title()) {
                            case 'Schema':
                            case 'User Name':
                            case 'Password':
                            case 'Host':
                            case 'Port':
                            case 'Service Name':
                            case 'Decode Method':
                                input = $(`<input type="text" class="form-control form-control-sm form-filter kt-input" data-col-index="` + column.index() + `"/>`);
                                $(input).keyup(function () {
                                    var params = {};
                                    $(rowFilter).find('.kt-input').each(function () {
                                        var i = $(this).data('col-index');
                                        if (params[i]) {
                                            params[i] += '|' + $(this).val();
                                        }
                                        else {
                                            params[i] = $(this).val();
                                        }
                                    });
                                    $.each(params, function (i, val) {
                                        // apply search params to datatable
                                        ConnectionTable.column(i).search(val ? val : '', false, false);
                                    });
                                    ConnectionTable.table().draw();
                                });
                                break;
                        }

                        if (column.title() !== 'actions') {
                            $(input).appendTo($('<th>').appendTo(rowFilter));
                        }
                    });

                    // hide search column for responsive table
                    var hideSearchColumnResponsive = function () {
                        thisTable.api().columns().every(function () {
                            var column = this
                            if (column.responsiveHidden()) {
                                $(rowFilter).find('th').eq(column.index()).show();
                            } else {
                                $(rowFilter).find('th').eq(column.index()).hide();
                            }
                        })
                    };

                    // init on datatable load
                    hideSearchColumnResponsive();
                    // recheck on window resize
                    window.onresize = hideSearchColumnResponsive;
                },
                columnDefs: [
                    {
                        targets: -1,
                        title: 'Actions',
                        orderable: false,
                        render: function (data, type, full, meta) {
                            var lid = full.connectionId;
                            var lUserName = full.UserName.replace(/'/g, "###");
                            var lPassword = full.Password;
                            var lHost = full.Host;
                            var lPort = full.Port;
                            var lSchema = full.Schema;
                            var lService_Name = full.Service_Name;
                            var lDecodeMethod = full.DecodeMethod;
                            return " <a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='View' data-name='" + lUserName + "' data-Password='" + lPassword + "' data-Host='" + lHost + "' data-Schema='" + lSchema + "' data-DecodeMethod='" + lDecodeMethod + "' data-Service_Name='" + lService_Name + "' data-Port='" + lPort + "' onclick=AddEditConnection(" + lid + ",$(this)) ><i class='la la-edit'></i></a> " +
                                "<a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Delete' onclick='Delete(" + lid + ")' ><i class='la la-trash la-xs'></i></a>";
                            //return "";
                        },
                    }
                ],
            });
        };
        return {
            //main function to initiate the module
            init: function () {
                initConnectionTable();
            },

        };
    }();
    jQuery(document).ready(function () {
        ConnectionTable.init();
    });
    $(document).ready(function () {
        $("#frmconnection").validate({
            rules: {
                Username: {
                    required: true
                },
                Password: {
                    required: true
                },
                Host: {
                    required: true
                },
                Port: {
                    required: true
                },
                Schema: {
                    required: true
                },
                ServiceName: {
                    required: true
                },
                DecodeMethod: {
                    required: true
                }
            },
        });
    });

    function AddEditConnection(Id, editObj) {
        $("#exampleModalLabel").text('');
        $("#exampleModalLabel").text('Edit Connection');
        setTimeout(function () {
            for (var i = 0; i < 1000; i++) {
                console.log(i)
            }

            $save.removeClass("kt-spinner kt-spinner--v2 kt-spinner--md kt-spinner--info")
        }, 30);
        $("#connectionvalidate").css("display", "none");
        $("#AddConnection").modal("show");
        var lConnectionId = Id;
        var Name = $(editObj).attr("data-name").replace(/###/g, "'");
        var Password = $(editObj).attr("data-Password");
        var Schema = $(editObj).attr("data-Schema");
        var Service_Name = $(editObj).attr("data-Service_Name");
        var Port = $(editObj).attr("data-Port");
        var Host = $(editObj).attr("data-Host");
        var lDecodeMethod = $(editObj).attr("data-DecodeMethod");

        $("#hdnConnectionId").val(lConnectionId);
        $("#Username").val(Name),
            $("#Password").val(Password),
            $("#Schema").val(Schema),
            $("#Host").val(Host);
        $("#Port").val(Port);
        $("#ServiceName").val(Service_Name);
        $("#DecodeMethod").val(lDecodeMethod);

        if (!$("#connectionvalidate").valid())
            return false;
    }

    function AddConnection() {
        $("#connectionvalidate").css("display", "none");
        $("#addedConnection").attr("disabled", false);
        $("#exampleModalLabel").text('');
        $("#exampleModalLabel").text('Add Connection');
        $("#AddConnection").modal("show");
        $("#hdnConnectionId").val("");
        $("#Schema").val("");
        $("#Username").val("");
        $("#Password").val("");
        $("#Host").val("");
        $("#Port").val("");
        $("#ServiceName").val("");
        $("#DecodeMethod").val("");
        var validator = $("#frmconnection").validate();
        validator.resetForm();
    }
    function Delete(id) {
        swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value == true) {

                $.ajax({
                    url: "/DBConnection/DeletConnection",
                    data: JSON.stringify({ "ConnectionId": id }),
                    type: "POST",
                    async: false,
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        if (result) {
                            ConnectionTable.table().draw();
                            swal.fire(
                                'Deleted!',
                                'Connection is deleted.',
                                'success'

                            )

                        } else {
                            swal.fire(
                                'Error while deleting',
                                'error'
                            )
                        }
                    },
                    error: function (x, y, z) {
                        swal.fire(
                            'Error while deleting',
                            'error'

                        )

                    }
                });
            }
        });
    }
    function AddEditConnectionSave() {
        if ($("#DecodeMethod").val().length < 8) {
            $("#existDecodeMethod").css("display", "block");
            return;
        } else {
            var $save = $("#addedConnection");
            $save.addClass("kt-spinner kt-spinner--v2 kt-spinner--md kt-spinner--info");
            if (!$("#frmconnection").valid()) {
                setTimeout(function () {
                    for (var i = 0; i < 1000; i++) {
                        console.log(i)
                    }

                    $save.removeClass("kt-spinner kt-spinner--v2 kt-spinner--md kt-spinner--info")
                }, 30);
                return false;
            }
            $("#addedConnection").attr("disabled", true);

            var lId = $("#hdnConnectionId").val();
            if (lId == null && lId == "")
                lId = 0;
            var regex = /^[a-zA-Z0-9-._(&)*  ]*$/;

            var ConnectionModel = {};
            ConnectionModel.connectionId = lId,
                ConnectionModel.UserName = $("#Username").val(),
                ConnectionModel.Password = $("#Password").val(),
                ConnectionModel.Schema = $("#Schema").val(),
                ConnectionModel.Host = $("#Host").val();
            ConnectionModel.Port = $("#Port").val();
            ConnectionModel.Service_Name = $("#ServiceName").val();
            ConnectionModel.DecodeMethod = $("#DecodeMethod").val();
            if (!regex.test(ConnectionModel.Schema)) {
                $("#Schema").val("");
                $("#connectionvalidate").css("display", "block");
                $("#addedConnection").attr("disabled", false);
                setTimeout(function () {
                    for (var i = 0; i < 1000; i++) {
                        console.log(i)
                    }

                    $save.removeClass("kt-spinner kt-spinner--v2 kt-spinner--md kt-spinner--info")
                }, 30);
                return false;
            }

            $.ajax({
                url: "/DBConnection/AddEditConnection",
                data: JSON.stringify(ConnectionModel),
                type: "POST",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                    $("#AddConnection").modal("hide");

                    swal.fire({
                        "title": "",
                        "text": "Successfully submitted Connection.",
                        "type": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                    setTimeout(function () {
                        $save.removeClass("kt-spinner kt-spinner--v2 kt-spinner--md kt-spinner--info")
                    }, 30);
                    ConnectionTable.table().draw();

                    $("#addedConnection").attr("disabled", false);
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }
    }
    function CheckNameExist() {
        var ConnectionId = $("#hdnConnectionId").val();
        var Username = $("#Username").val();
        var Password = $("#Password").val();

        if (Username == "") {
            $("#existUsername").text("");
            $("#existUsername").text("This field is required.");
            $("#existUsername").css("display", "block");
            return;
        }
        else if (Password == "") {
            $("#existPassword").text("");
            $("#existPassword").text("This field is required.");
            $("#existPassword").css("display", "block");
            return;
        }
        else {
            $.ajax({
                url: "/DBConnection/CheckDuplicateConnectionExist",
                data: '{"ConnectionId":"' + ConnectionId + '","Username":"' + Username + '","Password":"' + Password + '"}',
                //data: '{"ConnectionId":"' + ConnectionId + '","Username":"' + Username + '"}',
                type: "POST",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (result) {
                    if (result) {
                        $("#Username").val("");
                        $("#Password").val("");
                        $("#existUsername").text("");
                        $("#existUsername").text("User Name already exist.");
                        $("#existUsername").css("display", "block");
                        $("#existPassword").text("");
                        $("#existPassword").text("Password already exist.");
                        $("#existPassword").css("display", "block");
                    } else {
                        $("#existPassword").css("display", "none");
                    }
                },
            });
        }
    }
    $("#Username").on('keyup', function () {
        $("#existUsername").css("display", "none");
    });
    $("#Username").on('keyup', function () {
        $("#connectionvalidate").css("display", "none");
    });
    $("#Password").on('keypress', function () {
        $("#existPassword").css("display", "none");
    });
    $('#DecodeMethod').on('keyup', function () {
        if (this.value.length == 8) {
            $("#existDecodeMethod").css("display", "none");
            return false;
        }
        else {
            $("#existDecodeMethod").css("display", "block");
        }
    });
</script>







