@using MARS_Repository.ViewModel
@{
    /**/
    ViewBag.Title = "Test Case";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string ShowApp = "false", ShowPro = "false", ShowTS = "false", ShowTSImp = "false", ShowTC = "false";
    string ShowStoryboardImp = "false", Showvar = "false", ShowVarImp = "false", ShowKey = "false";
    string ShowObj = "false", ShowObjImp = "false", ShowUser = "false", ShowSelPro = "false";
    string ShowUserPro = "false", ShowSBSave = "false", ShowTCSave = "false";
    string ShowGroup = "false", ShowSet = "false", ShowFolder = "false", ShowConfig = "false";
    var PrivilegeList = Session["PrivilegeList"] as List<PrivilegeViewModel>;
    var RoleList = Session["RoleList"] as List<RoleViewModel>;
    if (PrivilegeList.Count > 0)
    {
       
        ShowApp = PrivilegeList.Select(y => y.MODULE).ToList().Contains("Application").ToString().ToLower();
        ShowPro = PrivilegeList.Select(y => y.MODULE).ToList().Contains("Project").ToString().ToLower();
        ShowTSImp = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import TestSuite").ToString().ToLower();
        ShowStoryboardImp = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import Storyboard").ToString().ToLower();
        ShowVarImp = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import Variable").ToString().ToLower();
        ShowObjImp = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Import Object").ToString().ToLower();
        ShowTC = PrivilegeList.Select(y => y.MODULE).ToList().Contains("TestCase").ToString().ToLower();
        ShowUser = PrivilegeList.Select(y => y.MODULE).ToList().Contains("User List").ToString().ToLower();
        ShowSelPro = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Assign Project").ToString().ToLower();
        ShowUserPro = RoleList.Select(y => y.ROLE_NAME.Trim().ToLower()).ToList().Contains("admin").ToString().ToLower();
        ShowSBSave = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Save Storyboard").ToString().ToLower();
        ShowTCSave = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Save TestCase").ToString().ToLower();
        ShowKey = PrivilegeList.Select(y => y.MODULE).ToList().Contains("Keyword").ToString().ToLower();
        ShowGroup = PrivilegeList.Select(y => y.MODULE).ToList().Contains("Group").ToString().ToLower();
        ShowSet = PrivilegeList.Select(y => y.MODULE).ToList().Contains("Set").ToString().ToLower();
        ShowFolder = PrivilegeList.Select(y => y.MODULE).ToList().Contains("Folder").ToString().ToLower();
        ShowConfig = PrivilegeList.Select(y => y.MODULE).ToList().Contains("UserConfiguration").ToString().ToLower();

        if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add Object") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add Pegwindow Object") ||
           PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Object") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("View Object") ||
           PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete Object") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("SaveAs Object"))
        {
            ShowObj = "true";
        }

        if(PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add Variable") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit Variable") ||
         PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("View Variable") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete Variable"))
        {
            Showvar = "true";
        }

        if(PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add TestSuite") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit TestSuite") ||
         PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("View TestSuite") || PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete TestSuite"))
        {
            ShowTS = "true";
        }
    }
}
<input type="hidden" value="@ShowApp" id="hdnShowApp" />
<input type="hidden" value="@ShowPro" id="hdnShowPro" />
<input type="hidden" value="@ShowTS" id="hdnShowTS" />
<input type="hidden" value="@ShowTSImp" id="hdnShowTSImp" />
<input type="hidden" value="@ShowTC" id="hdnShowTC" />
<input type="hidden" value="@ShowStoryboardImp" id="hdnShowStoryboardImp" />
<input type="hidden" value="@Showvar" id="hdnShowvar" />
<input type="hidden" value="@ShowVarImp" id="hdnShowVarImp" />
<input type="hidden" value="@ShowKey" id="hdnShowKey" />
<input type="hidden" value="@ShowObj" id="hdnShowObj" />
<input type="hidden" value="@ShowObjImp" id="hdnShowObjImp" />
<input type="hidden" value="@ShowUser" id="hdnShowUser" />
<input type="hidden" value="@ShowSelPro" id="hdnShowSelPro" />
<input type="hidden" value="@ShowUserPro" id="hdnShowUserPro" />
<input type="hidden" value="@ShowSBSave" id="hdnShowSBSave" />
<input type="hidden" value="@ShowTCSave" id="hdnShowTCSave" />
<input type="hidden" value="@ShowGroup" id="hdnShowGroup" />
<input type="hidden" value="@ShowSet" id="hdnShowSet" />
<input type="hidden" value="@ShowFolder" id="hdnShowFolder" />
<input type="hidden" value="@ShowConfig" id="hdnShowConfig" />
<input type="hidden" value="jenkins integration" id="hdnJekins" />

<div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content">
    <div class="kt-portlet">
        <div class="kt-portlet__body " id="tabsList">
            <div class="tabs_custom" id="myBox">
                <ul class="nav nav-tabs ULtablist" role="tablist" id="tabList">
                    <li class="nav-item context-menu-tab">
                        <a href="#default" class="nav-link active context-tab" data-toggle="tab" data-target="#default" style="display:none" onclick="activetab($(this))"><i class="fa fa-home tab_icons"></i>home</a>
                        @*<i class="fa fa-times-circle tab_close"></i>*@
                    </li>
                </ul>
            </div>
            <div class="tab-content divtablist">
                <div class="tab-pane active div" id="default" role="tabpanel">

                    @Html.Partial("RightSideGridView")


                    @*<div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content">
                            <div id="rightsideView">
                                @Html.Partial("RightSideGridView")
                            </div>

                        </div>*@


                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/Tab/Custom_AddingTab.js"></script>
<script src="~/Scripts/Import_Export/Custom_ImporExport.js"></script>
<script>
    var statesAvailable = @Html.Raw(ViewBag.activePinList);
    var lShowAppdisplay = $("#hdnShowApp").val();
    var lShowProdisplay = $("#hdnShowPro").val();
    var lShowTSdisplay = $("#hdnShowTS").val();
    var lShowTSImpdisplay = $("#hdnShowTSImp").val();
    var lhdnShowTCdisplay = $("#hdnShowTC").val();
    var lhdnShowStoryboardImpdisplay = $("#hdnShowStoryboardImp").val();
    var lhdnShowvardisplay = $("#hdnShowvar").val();
    var lhdnShowVarImpdisplay = $("#hdnShowVarImp").val();
    var lhdnShowKeydisplay = $("#hdnShowKey").val();
    var lhdnShowObjdisplay = $("#hdnShowObj").val();
    var lhdnShowObjImpdisplay = $("#hdnShowObjImp").val();
    var lhdnShowUserdisplay = $("#hdnShowUser").val();
    var lhdnShowSelProdisplay = $("#hdnShowSelPro").val();
    var lhdnShowUserProdisplay = $("#hdnShowUserPro").val();
    var lhdnShowSBSavedisplay = $("#hdnShowSBSave").val();
    var lhdnShowTCSavedisplay = $("#hdnShowTCSave").val();
    var lhdnShowGroupdisplay = $("#hdnShowGroup").val();
    var lhdnShowSetdisplay = $("#hdnShowSet").val();
    var lhdnShowFolderdisplay = $("#hdnShowFolder").val();
    var lhdnShowConfigdisplay = $("#hdnShowConfig").val();
    var lhdnShowjekins = $("#hdnJekins").val();

    setTimeout(function () {
        $.each(statesAvailable, function (key, value) {
            if (value.PAGE_NAME.trim() == "ProjectsList" && lShowProdisplay == "true") {
                PartialRightSideProjectGrid("1");
            }
            else if (value.PAGE_NAME.trim() == "JenkinsIntegration" && lhdnShowjekins == "true") {
                PartialRightSideJenkinsIntegrationGrid("1");
            }
            else if (value.PAGE_NAME.trim() == "ApplicationList" && lShowAppdisplay == "true") {
                PartialRightSideAplicationGrid("1");
            }
            else if (value.PAGE_NAME.trim() == "TestSuiteList" && lShowTSdisplay == "true") {
                PartialRightSideTestSuiteGrid("1");
            }
            else if (value.PAGE_NAME.trim() == "ImportTestSuite" && lShowTSImpdisplay == "true") {
                PartialRightSideImportTestSuite("1");
            }
            else if (value.PAGE_NAME.trim() == "TestCaseList" && lhdnShowTCdisplay == "true") {
                PartialRightSideTestCaseGrid("1");
            }
            else if (value.PAGE_NAME.trim() == "ImportStoryboard" && lhdnShowStoryboardImpdisplay == "true") {
                PartialRightImportStoryboard("1");
            }
            else if (value.PAGE_NAME.trim() == "VariableList" && lhdnShowvardisplay == "true") {
                PartialRightSideVariablesGrid("1");
            }
            else if (value.PAGE_NAME.trim() == "ImportVariable" && lhdnShowVarImpdisplay == "true") {
                ImportVariables("1");
            }
            else if (value.PAGE_NAME.trim() == "KeywordList" && lhdnShowKeydisplay == "true") {
                PartialRightSideKeywordGrid("1");
            }
            else if (value.PAGE_NAME.trim() == "objectlist" && lhdnShowObjdisplay == "true") {
                partialOpenObjectList("1");
            }
            else if (value.PAGE_NAME.trim() == "ImportObject" && lhdnShowObjImpdisplay == "true") {
                ImportObjects("1");
            }
            else if (value.PAGE_NAME.trim() == "UserList" && lhdnShowUserdisplay == "true") {
                RightSideUserGrid("1");
            }
            else if (value.PAGE_NAME.trim() == "SelectProject" && lhdnShowSelProdisplay == "true") {
                partialRightOpenProjectList("1");
            }
            else if (value.PAGE_NAME.trim() == "UserListByProject" && lhdnShowUserProdisplay == "true") {
                partialRightOpenUserList("1");
            }
            else if (value.PAGE_NAME.trim() == "Storyboard" && lhdnShowSBSavedisplay == "true") {
                DisplayStoryboardGrid(value.PAGE_ID, value.PROJECT_ID, "1");
            }
            else if (value.PAGE_NAME.trim() == "TestCase" && lhdnShowTCSavedisplay == "true") {
                DisplayTestCaseGrid(value.PAGE_ID, value.PROJECT_ID, "1");
            }
            else if (value.PAGE_NAME.trim() == "UserActiveList" && lhdnShowUserProdisplay == "true") {
                RightSideUserActivePageList("1");
            }
            else if (value.PAGE_NAME.trim() == "Group" && lhdnShowGroupdisplay == "true") {
                RightSideGroupList("1");
            }
            else if (value.PAGE_NAME.trim() == "Set" && lhdnShowSetdisplay == "true") {
                RightSideSetList("1");
            }
            else if (value.PAGE_NAME.trim() == "Folder" && lhdnShowFolderdisplay == "true") {
                RightSideFolderList("1");
            }
            else if (value.PAGE_NAME.trim() == "UserConfiguration" && lhdnShowConfigdisplay == "true") {
                RightSideUserConfigList("1");
            }
            //else if (value.PAGE_NAME.trim() == "GridList") {
            //    RightSideGridList("1");
            //}
             //else if (value.PAGE_NAME.trim() == "UserExePathList") {
            //    UserexecutionEnginePathList("1");
            //}
        }); }, 2000);
</script>