@using MARS_Repository.ViewModel
@{
    string EditConfig = "false", DeleteConfig = "false";
    var PrivilegeList = Session["PrivilegeList"] as List<PrivilegeViewModel>;
    if (PrivilegeList.Count > 0)
    {
        EditConfig = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Edit UserConfiguration").ToString().ToLower();
        DeleteConfig = PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Delete UserConfiguration").ToString().ToLower();
    }
}

<input type="hidden" value="@EditConfig" id="hdnEditConfig" />
<input type="hidden" value="@EditConfig" id="hdnDeleteConfig" />
<div class="kt-content  kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor" id="kt_content">
    <div class="kt-subheader   kt-grid__item" id="kt_subheader" style="left: @ViewBag.width;">
        <div class="kt-container  kt-container--fluid ">
            <div class="kt-subheader__main">

                <span class="kt-subheader__separator kt-hidden"></span>
                <div class="kt-subheader__breadcrumbs">
                    <a href="#" class="kt-subheader__breadcrumbs-home"><i class="flaticon2-settings" style="color:#1c6081"></i></a>
                    <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081">
                        User Configration
                    </a>
                    <i class="fa fa-angle-double-right" style="color:#1c6081"></i>
                    <a href="#" class="kt-subheader__breadcrumbs-link" style="color:#1c6081">
                        &nbsp;
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid">
        <div class="kt-portlet kt-portlet--mobile">
            <div class="kt-portlet__head kt-portlet__head--lg">
                <div class="kt-portlet__head-label">
                    <h3 class="kt-portlet__head-title" style="color:#1582ab">
                        List Of User Configration
                    </h3>
                </div>
                @if (PrivilegeList.Select(y => y.PRIVILEGE_NAME.Trim()).ToList().Contains("Add UserConfiguration"))
                {
                    <div class="kt-portlet__head-toolbar">
                        <div class="kt-portlet__head-wrapper">
                            <div class="kt-portlet__head-actions">
                                <button type="button" class="btn btn-brand btn-elevate btn-icon-sm" data-toggle="modal" onclick="AddUserConfig()" data-target="#kt_modal_4"><i class="la la-plus"></i>Add</button>
                                &nbsp;
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal fade" id="AddUserConfigration" tabindex="-1" role="dialog" aria-labelledby="userconfigexampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="userconfigexampleModalLabel">Add User Configration</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="frmuserconfig">
                                <input type="hidden" id="hdnUserConfigrationId" name="hdnUserConfigrationId" />
                                <input type="hidden" id="hdblobval" name="hdblobval" />
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Main Key<span style="color:red">&nbsp;*</span></label>
                                    <input type="text" class="form-control" id="mainkey" name="mainkey" maxlength="128">
                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Sub Key</label>
                                    <input type="text" class="form-control" id="subkey" name="mainkey" maxlength="128">
                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">Mars UserName</label>
                                    <select class="form-control kt-select2" id="DrpMarsUserName" name="DrpMarsUserName">
                                        @{var lUserList = ViewBag.userlist as IEnumerable<SelectListItem>;
                                            <option value="">Select MARS User</option>
                                            foreach (var item in lUserList)
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="form-group ">

                                    @*<label class="form-control-label">BLOB Value:</label>&nbsp;&nbsp;<a href="#" onclick="ShowBLOBvalue()"> Show</a>*@
                                    <label class="form-control-label">BLOB Value:</label>
                                    <div class="row">
                                        <div class="col-md-1">
                                            <a href="#" class="btn btn-link-primary font-weight-bold" onclick="ShowBLOBvalue()">View</a>
                                        </div>
                                        @*<div class="col-md-1 col offset-1 ">*@
                                        <div class="col-md-1">
                                            <button type="button" class="btn btn-clean btn-bold btn-upper" id="addkey" onclick="configKey()">Key</button>
                                        </div>
                                        <div class="col-md-1">
                                            <button type="button" class="btn btn-clean btn-bold btn-upper" id="addValue" onclick="configval()">Value</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="recipient-name" class="form-control-label">BLOB Value Type</label>
                                    <div class="kt-radio-inline">
                                        <label class="kt-radio kt-radio--bold kt-radio--brand">
                                            <input type="radio" name="BLOBType" class="Btype" id="Bjsontype" value="Json" checked="checked">Json
                                            <span></span>
                                        </label>
                                        <label class="kt-radio kt-radio--bold kt-radio--brand">
                                            <input type="radio" name="BLOBType" class="Btype" id="Bxmltype" value="Xml">Xml
                                            <span></span>
                                        </label>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="message-text" class="form-control-label">Description</label>
                                    <textarea class="form-control" id="userconfigdesc" name="userconfigdesc" maxlength="256"></textarea>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" id="addeduserconfig" class="btn btn-outline-brand btn-elevate btn-pill" onclick="AddEditUserConfigSave()">Save</button>
                            <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="kt-portlet__body">
                <table class="table table-striped- table-bordered table-hover table-checkable " id="userconfigtable">
                    <thead>
                        <tr>
                            <th>Main Key</th>
                            <th>Sub Key</th>
                            <th>MARS UserName</th>
                            <th>BLOBValue</th>
                            <th>BLOBValueType</th>
                            <th>Description</th>
                            <th style="color: #1c6081;background-color: #e9f5ff;font-weight: bold;">Actions</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="AddKeyModel" tabindex="-1" role="dialog" aria-labelledby="KeyexampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="KeyexampleModalLabel">Add Key</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="frmkey">
                    <input type="hidden" id="hdrowid" value="1" />
                    <input type="hidden" id="hdrowconfigid" value="" />
                    <input type="hidden" id="hdkeyflag" value="1" />
                    <div class="row">
                        <div class="form-group col-md-3 col offset-9">
                            <button type="button" class="btn btn-brand btn-elevate btn-icon-sm float-right" data-toggle="modal" onclick="AddRow()" data-target="#kt_modal_4"><i class="la la-plus"></i>Add Row</button>
                            &nbsp;
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-2">
                            <label for="recipient-name" class="form-control-label">Key<span style="color:red">&nbsp;*</span></label>
                        </div>
                        <div class="form-group col-md-2">
                            <label for="recipient-name" class="form-control-label">Display Name</label>
                        </div>
                        <div class="form-group col-md-2">
                            <label class="form-control-label">Type</label>
                        </div>
                        <div class="form-group col-md-2">
                            <label for="recipient-name" class="form-control-label">Type Value</label>
                        </div>
                        <div class="form-group col-md-1">
                            <label for="message-text" class="form-control-label">Mandatory</label>
                        </div>
                        <div class="form-group col-md-2">
                            <label class="form-control-label">Data Type</label>
                        </div>
                        <div class="form-group col-md-1">
                            <label class="form-control-label">Action</label>
                        </div>
                    </div>
                    <div id="addnewrow"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="AddEditKey" class="btn btn-outline-brand btn-elevate btn-pill" onclick="SaveKey()">Save</button>
                <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="AddvalueModel" tabindex="-1" role="dialog" aria-labelledby="valueexamplemodallabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="valueexamplemodallabel">Add Value</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="frmval">
                    <input type="hidden" id="hdvalcolid" value="1" />
                    <input type="hidden" id="hdvalconfigid" value="" />
                    <input type="hidden" id="hdblobvalinmodel" value="" />
                    <input type="hidden" id="hdvalflag" value="1" />
                    <div class="row">
                        <div class="form-group col-md-3 col offset-9">
                            <button type="button" class="btn btn-brand btn-elevate btn-icon-sm float-right" data-toggle="modal" onclick="AddColumn()" data-target="#kt_modal_4"><i class="la la-plus"></i>Add Column</button>
                            &nbsp;
                        </div>
                    </div>
                    <div class="row" id="valhader">
                        <div class="form-group col-md-2" id="keygroup">
                            <label for="recipient-name" class="form-control-label">Key</label>
                            <div id="addvallab"></div>
                        </div>
                        <div class="col-md-10 add_value_main_div">
                            <div class="form-group col-md-2 add_value_single" id="valgroup1">
                                <label for="recipient-name" class="form-control-label">Value &nbsp;<a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Delete' onclick='valDelt(1)'><i class='la la-trash la-xs'></i></a></label>
                                <div id="addvalcol"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="AddEditVal" class="btn btn-outline-brand btn-elevate btn-pill" onclick="SaveVal()">Save</button>
                <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ShowkeyvalobjModel" tabindex="-1" role="dialog" aria-labelledby="showexamplemodallabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="showexamplemodallabel">BLOBValue</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="showobj" style="text-align: left !important;">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-brand btn-elevate btn-pill" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/json-viewer.js"></script>
<script src="~/Scripts/xmlToJson.js"></script>
<script src="~/Scripts/simpleXML.js"></script>

<script>
    var datablobvalobj = '';
    var UserConfigTable = function () {
        $.fn.dataTable.Api.register('column().title()', function () {
            return $(this.header()).text().trim();
        });
        var initUserConfigTable = function () {

            var lEditConfigdisplay = $("#hdnEditConfig").val();
            var lDeleteConfigdisplay = $("#hdnDeleteConfig").val();

            UserConfigTable = $('#userconfigtable').DataTable({
                responsive: false,
                // Pagination settings
                dom: `<'row'<'col-sm-12'tr>>
                                                    <'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7 dataTables_pager'lp>>`,
                // read more: https://datatables.net/examples/basic_init/dom.html

                lengthMenu: [10, 100, 1000],
                processing: true,
                pageLength: 100,

                language: {
                    'lengthMenu': 'Display _MENU_',
                    "processing": "<img  src='../assets/media/mars.gif' style='width:80px;'/>"
                },
                "scrollY": $(window).height() - 305,
                searchDelay: 500,
                //  processing: true,
                serverSide: true,
                ajax: {
                    url: '/Accounts/UserConfigDataLoad',
                    type: 'POST',
                    data: {
                        // parameters for custom backend script demo
                        columnsDef: [
                            'MainKey', 'SubKey', 'MARSUserName', 'BLOBValuestr', 'BLOBType', 'Description', 'Actions',],
                    },
                },

                columns: [
                    { data: 'MainKey', name: "MainKey", width: '20%', "targets": 0, autowidth: false },
                    { data: 'SubKey', name: "SubKey", width: '20%', "targets": 1, autowidth: false },
                    { data: 'MARSUserName', name: "MARSUserName", width: '10%', "targets": 2, autowidth: false },
                    {
                        data: 'BLOBValuestr', name: "BLOBValuestr", width: '10%', "targets": 3, autowidth: false,
                        render: function (data, type, row, meta) {
                            var lBLOBValue = row.BLOBValuestr;
                            var lBLOBType = row.BLOBType;
                            lHtml = "<a href='#' class='btn btn-link-primary font-weight-bold' data-showblob='" + lBLOBValue + "' data-blobrowtype='" + lBLOBType + "' onclick='ShowRowBLOBvalue($(this))'> View</a>";
                            return lHtml;
                        }
                    },
                    { data: 'BLOBType', name: "BLOBType", width: '10%', "targets": 4, autowidth: false },
                    { data: 'Description', name: "Description", width: '15%', "targets": 5, autowidth: false },
                    { data: 'Actions', responsivePriority: -1, width: '15%', "targets": 6, autowidth: false }
                ],
                initComplete: function () {
                    var thisTable = this;
                    var rowFilter = $('<tr class="filter"></tr>').appendTo($(UserConfigTable.table().header()));

                    UserConfigTable.columns().every(function () {
                        var column = this;
                        var input;
                        switch (column.title()) {
                            case 'Main Key':
                            case 'Sub Key':
                            case 'MARS UserName':
                            case 'BLOBValueType':
                            case 'Description':
                                input = $(`<input type="text" class="form-control form-control-sm form-filter kt-input" data-col-index="` + column.index() + `"/>`);
                                $(input).keyup(function () {
                                    var params = {};
                                    $(rowFilter).find('.kt-input').each(function () {
                                        var i = $(this).data('col-index');
                                        if (params[i]) {
                                            params[i] += '|' + $(this).val();
                                        }
                                        else {
                                            params[i] = $(this).val();
                                        }
                                    });
                                    $.each(params, function (i, val) {
                                        UserConfigTable.column(i).search(val ? val : '', false, false);
                                    });
                                    UserConfigTable.table().draw();
                                });
                                break;
                        }
                        if (column.title() !== 'actions') {
                            $(input).appendTo($('<th>').appendTo(rowFilter));
                        }
                    });
                },
                columnDefs: [
                    {
                        targets: -1,
                        title: 'Actions',
                        orderable: false,
                        render: function (data, type, full, meta) {
                            var lid = full.Id;
                            var lMainKey = full.MainKey.replace(/'/g, "###");
                            var lSubKey = full.SubKey.replace(/'/g, "###");
                            var lUserId = full.UserId;
                            var lBLOBValue = full.BLOBValuestr;
                            var lBLOBType = full.BLOBType;
                            var lBLOBValueType = full.BLOBValueType;
                            var lDes = full.Description;
                            var lRenderHtml = "";
                            if (lEditConfigdisplay == "true") {
                                lRenderHtml = " <a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Edit' data-mainkey='" + lMainKey + "' data-des='" + lDes + "' data-subkey='" + lSubKey + "' data-userid='" + lUserId + "' data-blobval='" + lBLOBValue + "' data-blobtype='" + lBLOBType + "'onclick=AddEditUserConfig(" + lid + ",$(this)) ><i class='la la-edit'></i></a> ";
                            }
                            if (lDeleteConfigdisplay == "true") {
                                lRenderHtml = lRenderHtml + "<a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Delete' onclick='UserConfigDelete(" + lid + ")' ><i class='la la-trash la-xs'></i></a>";
                            }
                            lRenderHtml = lRenderHtml + "<a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Key' data-usekeyblobval='" + lBLOBValue + "' data-blobkeytype='" + lBLOBType + "' onclick='UserConfigKey(" + lid + ",$(this))' ><i class='fa fa-key'></i></a>";
                            lRenderHtml = lRenderHtml + "<a href='#' class='btn btn-sm btn-clean btn-icon btn-icon-md' title='Value' data-usevalueblobval='" + lBLOBValue + "' data-blovalbtype='" + lBLOBType + "' onclick='UserConfigValue(" + lid + ",$(this))' ><i class='icon-2x text-dark-50 flaticon2-pen'></i></a>";
                            return lRenderHtml;
                        },
                    }
                ],
            });
        };
        return {
            init: function () {
                initUserConfigTable();
            },
        };
    }();
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        $($.fn.dataTable.tables(true)).DataTable()
            .columns.adjust();
    });
    jQuery(document).ready(function () {
        UserConfigTable.init();
    });
    $(document).ready(function () {
        $("#frmuserconfig").validate({
            rules: {
                mainkey: {
                    required: true
                },
            },
        });
    });

    function AddEditUserConfig(Id, editObj) {
        var validator = $("#frmuserconfig").validate();
        validator.resetForm();
        $("#userconfigexampleModalLabel").text('');
        $("#userconfigexampleModalLabel").text('Edit User Configration');
        $("#addeduserconfig").prop("disabled", false);

        var lconfigId = Id;
        var mainkey = $(editObj).attr("data-mainkey") == "null" ? "" : $(editObj).attr("data-mainkey");
        var Desc = $(editObj).attr("data-des") == "null" ? "" : $(editObj).attr("data-des");
        var subkey = $(editObj).attr("data-subkey") == "null" ? "" : $(editObj).attr("data-subkey");
        var userid = $(editObj).attr("data-userid") == "null" ? "" : $(editObj).attr("data-userid");
        var type = $(editObj).attr("data-blobtype");
        var blobobj = $(editObj).attr("data-blobval") == "null" ? "" : $(editObj).attr("data-blobval");

        $("#hdnUserConfigrationId").val(lconfigId);
        $("#mainkey").val(mainkey);
        $("#subkey").val(subkey);
        $("#hdblobval").val(blobobj);
        $("#userconfigdesc").val(Desc);
        $("#DrpMarsUserName").val(userid);
        $("#DrpMarsUserName").select2();
        if (type == "Json") {
            $("#Bjsontype").prop("checked", true);
        }
        else {
            $("#Bxmltype").prop("checked", true);
        }

        $("#AddUserConfigration").modal("show");
        $('.modal-dialog').draggable({
            handle: ".modal-header"
        });
    }

    function AddUserConfig() {
        $("#addeduserconfig").attr("disabled", false);
        $("#userconfigexampleModalLabel").text('');
        $("#userconfigexampleModalLabel").text('Add User Configration');
        $("#hdnUserConfigrationId").val("");
        $("#mainkey").val("");
        $("#subkey").val("");
        $("#BLOBValue").val("");
        $("#userconfigdesc").val("");
        $("#DrpMarsUserName").val("");
        $("#DrpMarsUserName").select2();
        $("#hdblobval").val("");
        $("#Bjsontype").prop("checked", true);
        var validator = $("#frmuserconfig").validate();
        validator.resetForm();
        $("#AddUserConfigration").modal("show");
        $('.modal-dialog').draggable({
            handle: ".modal-header"
        });
    }

    function AddEditUserConfigSave() {
        $("#addeduserconfig").prop("disabled", true);
        if (!$("#frmuserconfig").valid()) {
            $("#addeduserconfig").prop("disabled", false);
            return false;
        }
        var lId = $("#hdnUserConfigrationId").val();
        if (lId == null || lId == "")
            lId = 0;

        var Bblobvalue = $("#hdblobval").val();
        var Btype = 1;
        var type = $(".Btype:checked").val();
        if (Bblobvalue != "") {
            if (type == "Xml") {
                Btype = 0;
                if (testJSON(Bblobvalue)) {
                    console.log(Bblobvalue);
                    Bblobvalue = createXml(Bblobvalue);
                }
            }
            else {
                if (!testJSON(Bblobvalue)) {
                    if (testxml(Bblobvalue)) {
                        Bblobvalue = xmlToJson.parse(Bblobvalue);
                        Bblobvalue = setBlobvalueFormat(Bblobvalue);
                        Bblobvalue = JSON.stringify(Bblobvalue);
                    }
                }
            }
        }

        var ConfigModel = {};
        ConfigModel.Id = lId,
            ConfigModel.MainKey = $("#mainkey").val().trim(),
            ConfigModel.SubKey = $("#subkey").val().trim(),
            ConfigModel.UserId = $("#DrpMarsUserName").val(),
            ConfigModel.BLOBValuestr = Bblobvalue,
            ConfigModel.BLOBValueType = Btype,
            ConfigModel.Description = $("#userconfigdesc").val().trim();
        $.ajax({
            url: "/Accounts/AddEditUserConfigration",
            data: JSON.stringify(ConfigModel),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                $("#AddUserConfigration").modal("hide");
                $("#addeduserconfig").attr("disabled", false);
                if (result.status == 1 && result.data) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "success",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
                else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
                UserConfigTable.table().draw();
            },
            error: function (errormessage) {
                alert(errormessage.responseText);
            }
        });
    }

    function UserConfigDelete(id) {
        swal.fire({
            title: 'Please confirm.',
            text: "This action can not be undone.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value == true) {
                $.ajax({
                    url: "/Accounts/DeleteUserConfigration",
                    data: JSON.stringify({ "Id": id }),
                    type: "POST",
                    async: false,
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        if (result.status == 1) {
                            if (result.data == "success") {
                                UserConfigTable.table().draw();
                                swal.fire(
                                    'Deleted!',
                                    result.message,
                                    'success'
                                )
                            }
                        }
                        else if (result.status == 0) {
                            swal.fire({
                                "title": "",
                                "text": result.message,
                                "icon": "error",
                                "onClose": function (e) {
                                    console.log('on close event fired!');
                                }
                            });
                        }

                    },
                    error: function (x, y, z) {
                        swal.fire(
                            'Error while deleting',
                            'error'
                        )
                    }
                });
            }
        });
    }

    function configKey() {
        var blobobj = [];

        $("#hdkeyflag").val($(".Btype:checked").val() == "Json" ? 1 : 0);

        $('.keyerror').css("display", "none");
        $("#addnewrow").html('');
        if ($("#hdnUserConfigrationId").val() == "" && $("#hdblobval").val() == "") {
            $("#hdrowconfigid").val("");
            CreateFristBalnkRow();
            $("#AddKeyModel").modal("show");
            $('.modal-dialog').draggable({
                handle: ".modal-header"
            });
        } else {
            datablobvalobj = $("#hdblobval").val();
            $("#hdrowconfigid").val($("#hdnUserConfigrationId").val());
            if (datablobvalobj != "" && datablobvalobj != "null") {
                if (!testJSON(datablobvalobj)) {
                    if (testxml(datablobvalobj)) {
                        blobobj = xmlToJson.parse(datablobvalobj);
                        blobobj = setBlobvalueFormat(blobobj);
                    }
                } else {
                    blobobj = JSON.parse(datablobvalobj);
                }

                if (blobobj[0].objectList.length > 0 && blobobj[0].objectList[0].items.length > 0) {
                    var keylist = blobobj[0].objectList[0].items[0].item;
                    $('#hdrowid').val(keylist.length);
                    for (var i = 0; i < keylist.length; i++) {
                        var id = i + 1;
                        if ($("#hdkeyid" + id).length == 0) {
                            var text = '  <div class="row" id="row' + id + '">' +
                                '<input type = "hidden" id = "hdkeyid' + id + '" />' +
                                '<div class="form-group col-md-2"><input type="text" class="form-control" id="txtkey' + id + '" name="txtkey' + id + '" value="' + keylist[i].key + '">' +
                                '<label id = "errorkey' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
                                'This field is required.</label ></div > ' +
                                '<div class="form-group col-md-2"><input type="text" class="form-control" id="txtDisplayName' + id + '" name="txtDisplayName' + id + '" value="' + keylist[i].displayname + '"></div>' +
                                '<div class="form-group col-md-2"><select class="form-control kt-select2" id="sDrpType' + id + '" name="sDrpType' + id + '" onchange="rowTypeChnage($(this))">' +
                                '<option value="CheckBox">CheckBox</option><option value="File">File</option><option value="Radio">Radio</option><option value="TextBox">TextBox</option>' +
                                '</select></div><div class="form-group col-md-2"><input type="text" class="form-control" id="txtTypeval' + id + '" name="txtTypeval' + id + '" value="' + keylist[i].typevalue + '">' +
                                '<label id = "errortypeval' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
                                'This field is required.</label ></div > ' +
                                '<div class="form-group col-md-1"><label class="kt-checkbox kt-checkbox--brand" style="display: block; "><input type="checkbox" id="DqMandatory' + id +
                                '" name="DqMandatory' + id + '" checked />&nbsp;<span></span></label></div><div class="form-group col-md-2"><select class="form-control kt-select2" id="sDrpDataType' + id +
                                '" name="sDrpDataType' + id + '"><option value="bool">bool</option><option value="date">date</option><option value="number">number</option><option value="string">string</option>' +
                                '</select><label id = "errordatatype' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;" > ' +
                                'Select valid DataType.</label ></div><div class="form-group col-md-1"><a href="#" class="btn btn-sm btn-clean btn-icon btn-icon-md" title="Delete" onclick="keyDelt(' + id + ')">' +
                                '<i class="la la-trash la-xs"></i ></a ></div></div>';

                            $("#addnewrow").append(text);
                            $("#sDrpType" + id).val(keylist[i].type);
                            $("#sDrpDataType" + id).val(keylist[i].datatype);
                            $("#DqMandatory" + id).prop('checked', keylist[i].mandatory);

                            if (keylist[i].type == 'TextBox' || keylist[i].type == 'File') {
                                $('#txtTypeval' + id).prop('disabled', true);
                            }
                            else
                                $('#txtTypeval' + id).prop('disabled', false);
                        }
                    }
                }
                else {
                    CreateFristBalnkRow();
                }

            } else {
                CreateFristBalnkRow();
            }

            $("#AddKeyModel").modal("show");
            $('.modal-dialog').draggable({
                handle: ".modal-header"
            });
        }
    }

    function CreateFristBalnkRow() {
        var text = '  <div class="row" id="row1">' +
            '<input type = "hidden" id = "hdkeyid1" />' +
            '<div class="form-group col-md-2"><input type="text" class="form-control" id="txtkey1" name="txtkey1">' +
            '<label id = "errorkey1" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
            'This field is required.</label ></div > ' +
            '<div class="form-group col-md-2"><input type="text" class="form-control" id="txtDisplayName1" name="txtDisplayName1"></div>' +
            '<div class="form-group col-md-2"><select class="form-control kt-select2" id="sDrpType1" name="sDrpType1" onchange="rowTypeChnage($(this))">' +
            '<option value="CheckBox">CheckBox</option><option value="File">File</option><option value="Radio">Radio</option><option value="TextBox">TextBox</option>' +
            '</select></div><div class="form-group col-md-2"><input type="text" class="form-control" id="txtTypeval1" name="txtTypeval1">' +
            '<label id = "errortypeval1" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
            'This field is required.</label ></div > ' +
            '<div class="form-group col-md-1"><label class="kt-checkbox kt-checkbox--brand" style="display: block; "><input type="checkbox" id="DqMandatory1' +
            '" name="DqMandatory1" checked />&nbsp;<span></span></label></div><div class="form-group col-md-2"><select class="form-control kt-select2" id="sDrpDataType1' +
            '" name="sDrpDataType1"><option value="bool">bool</option><option value="date">date</option><option value="number">number</option><option value="string">string</option>' +
            '</select><label id = "errordatatype1" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;" > ' +
            'Select valid DataType.</label ></div><div class="form-group col-md-1"><a href="#" class="btn btn-sm btn-clean btn-icon btn-icon-md" title="Delete" onclick="keyDelt(1)">' +
            '<i class="la la-trash la-xs"></i ></a ></div></div>';
        $("#addnewrow").append(text);
    }

    function AddRow() {
        var rowid = $('#hdrowid').val();
        var id = parseInt(rowid) + 1;
        $('#hdrowid').val(id);
        var text = '  <div class="row" id="row' + id + '">' +
            '<input type = "hidden" id = "hdkeyid' + id + '" />' +
            '<div class="form-group col-md-2"><input type="text" class="form-control" id="txtkey' + id + '" name="txtkey' + id + '">' +
            '<label id = "errorkey' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
            'This field is required.</label ></div > ' +
            '<div class="form-group col-md-2"><input type="text" class="form-control" id="txtDisplayName' + id + '" name="txtDisplayName' + id + '"></div>' +
            '<div class="form-group col-md-2"><select class="form-control kt-select2" id="sDrpType' + id + '" name="sDrpType' + id + '" onchange="rowTypeChnage($(this))">' +
            '<option value="CheckBox">CheckBox</option><option value="File">File</option><option value="Radio">Radio</option><option value="TextBox">TextBox</option>' +
            '</select></div><div class="form-group col-md-2"><input type="text" class="form-control" id="txtTypeval' + id + '" name="txtTypeval' + id + '">' +
            '<label id = "errortypeval' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
            'This field is required.</label ></div > ' +
            '<div class="form-group col-md-1"><label class="kt-checkbox kt-checkbox--brand" style="display: block; "><input type="checkbox" id="DqMandatory' + id +
            '" name="DqMandatory' + id + '" checked />&nbsp;<span></span></label></div><div class="form-group col-md-2"><select class="form-control kt-select2" id="sDrpDataType' + id +
            '" name="sDrpDataType' + id + '"><option value="bool">bool</option><option value="date">date</option><option value="number">number</option><option value="string">string</option>' +
            '</select><label id = "errordatatype' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;" > ' +
            'Select valid DataType.</label ></div><div class="form-group col-md-1"><a href="#" class="btn btn-sm btn-clean btn-icon btn-icon-md" title="Delete" onclick="keyDelt(' + id + ')">' +
            '<i class="la la-trash la-xs"></i ></a ></div></div>';

        $("#addnewrow").append(text);
    }

    function keyDelt(Id) {
        var id = "#row" + Id;
        if (datablobvalobj != "" && datablobvalobj != "null") {

            if (!testJSON(datablobvalobj)) {
                if (testxml(datablobvalobj)) {
                    datablobvalobj = xmlToJson.parse(datablobvalobj);
                    datablobvalobj = setBlobvalueFormat(datablobvalobj);
                    datablobvalobj = JSON.stringify(datablobvalobj);
                }
            }
            var dataval = JSON.parse(datablobvalobj);
            var keyid = '#txtkey' + Id;
            if (keyid != "") {
                var itemlist = dataval[0].objectList[0].items;
                for (var j = 0; j < itemlist.length; j++) {
                    var keyval = $(keyid).val();
                    var index = findValueInArray(keyval, itemlist[j].item);
                    if (index != null) {
                        itemlist[j].item.splice(index, 1);
                    }
                }
            }
            if (itemlist[0].item.length == 0) {
                datablobvalobj = "";
            } else {
                datablobvalobj = JSON.stringify(dataval);
            }
            console.log(datablobvalobj);
        }
        $(id).remove();
    }

    function SaveKey() {
        var falg = true;
        var dataval = [];
        $('.keyerror').css("display", "none");
        var rowid = $('#hdrowid').val();
        var lId = $("#hdrowconfigid").val();
        rowid = parseInt(rowid);
        if ($('#hdnUserConfigrationId').val() == "" && $("#hdblobval").val() == "") {
            CreateKeyObj(lId);
        } else {
            if (datablobvalobj != "" && datablobvalobj != "null") {

                if (!testJSON(datablobvalobj)) {
                    if (testxml(datablobvalobj)) {
                        dataval = xmlToJson.parse(datablobvalobj);
                        dataval = setBlobvalueFormat(dataval);
                    }
                } else {
                    dataval = JSON.parse(datablobvalobj);
                }

                for (i = 1; i <= rowid; i++) {
                    var hdkey = '#hdkeyid' + i;
                    if ($(hdkey).val() != undefined) {
                        if ($('#txtkey' + i).val() == "") {
                            $("#errorkey" + i).css("display", "block");
                            falg = false
                        }

                        if ($('#sDrpType' + i).val() == "CheckBox" || $('#sDrpType' + i).val() == "Radio") {
                            if ($('#txtTypeval' + i).val() == "") {
                                $("#errortypeval" + i).css("display", "block");
                                falg = false
                            }

                            if ($('#sDrpDataType' + i).val() != "bool") {
                                $("#errordatatype" + i).css("display", "block");
                                falg = false
                            }
                        }

                        if ($('#sDrpType' + i).val() == "File") {
                            if ($('#sDrpDataType' + i).val() != "string") {
                                $("#errordatatype" + i).css("display", "block");
                                falg = false
                            }
                        }

                        if ($('#sDrpType' + i).val() == "TextBox") {
                            if ($('#sDrpDataType' + i).val() == "bool") {
                                $("#errordatatype" + i).css("display", "block");
                                falg = false
                            }
                        }

                        if (falg == true) {
                            var keyid = '#txtkey' + i;
                            var dnameid = '#txtDisplayName' + i;
                            var dtypeid = '#sDrpType' + i;
                            var typevalid = '#txtTypeval' + i;
                            var dmandatoryid = '#DqMandatory' + i;
                            var datatypeid = '#sDrpDataType' + i;

                            var itemlist = dataval[0].objectList[0].items;
                            for (var j = 0; j < itemlist.length; j++) {
                                var keyval = $(keyid).val();
                                var index = findValueInArray(keyval, itemlist[j].item);

                                if (index != null) {
                                    if (itemlist[j].item[index].type != $(dtypeid).val())
                                        itemlist[j].item[index].value = "";

                                    itemlist[j].item[index].key = $(keyid).val();
                                    itemlist[j].item[index].typevalue = $(typevalid).val();
                                    itemlist[j].item[index].mandatory = $(dmandatoryid).is(":checked");
                                    itemlist[j].item[index].displayname = $(dnameid).val();
                                    itemlist[j].item[index].type = $(dtypeid).val();
                                    itemlist[j].item[index].datatype = $(datatypeid).val();
                                } else {
                                    if (typeof itemlist[j].item[i - 1] === 'undefined') {
                                        var itemobj = {
                                            key: $(keyid).val(),
                                            displayname: $(dnameid).val(),
                                            type: $(dtypeid).val(),
                                            typevalue: $(typevalid).val(),
                                            mandatory: $(dmandatoryid).is(":checked"),
                                            datatype: $(datatypeid).val(),
                                            value: ""
                                        };
                                        itemlist[j].item.push(itemobj);
                                    }
                                    else {
                                        if (itemlist[j].item[i - 1].type != $(dtypeid).val())
                                            itemlist[j].item[i - 1].value = "";

                                        itemlist[j].item[i - 1].key = $(keyid).val();
                                        itemlist[j].item[i - 1].typevalue = $(typevalid).val();
                                        itemlist[j].item[i - 1].mandatory = $(dmandatoryid).is(":checked");
                                        itemlist[j].item[i - 1].displayname = $(dnameid).val();
                                        itemlist[j].item[i - 1].type = $(dtypeid).val();
                                        itemlist[j].item[i - 1].datatype = $(datatypeid).val();
                                    }
                                }
                            }
                        }
                    }
                }
                if (falg == false) {
                    return true;
                }
                else {
                    var btype = $("#hdkeyflag").val();
                    if (dataval[0].objectList[0].items[0].item.length == 0) {
                        datablobvalobj = "";
                    }

                    if (datablobvalobj != "") {
                        datablobvalobj = JSON.stringify(dataval);
                        if (btype == 0) {
                            if (testJSON(datablobvalobj)) {
                                datablobvalobj = createXml(datablobvalobj);
                            }
                        }
                    }

                    console.log(datablobvalobj);
                    if (lId != "")
                        saveBlobvalue(datablobvalobj, lId, 'key');
                    else {
                        $("#hdblobval").val(datablobvalobj);
                        $("#AddKeyModel").modal("hide");
                    }
                }
            }
            else {
                CreateKeyObj(lId);
            }
        }
    }

    function CreateKeyObj(lId) {
        var item = [];
        var ItemsArray = [];
        var objectArray = [];
        var mainArray = [];
        var falg = true;
        datablobvalobj = "";
        var rowid = $('#hdrowid').val();
        rowid = parseInt(rowid);
        for (i = 1; i <= rowid; i++) {
            var hdkey = '#hdkeyid' + i;
            if ($(hdkey).val() != undefined) {
                if ($('#txtkey' + i).val() == "") {
                    $("#errorkey" + i).css("display", "block");
                    falg = false
                }

                if ($('#sDrpType' + i).val() == "CheckBox" || $('#sDrpType' + i).val() == "Radio") {
                    if ($('#txtTypeval' + i).val() == "") {
                        $("#errortypeval" + i).css("display", "block");
                        falg = false
                    }

                    if ($('#sDrpDataType' + i).val() != "bool") {
                        $("#errordatatype" + i).css("display", "block");
                        falg = false
                    }
                }

                if ($('#sDrpType' + i).val() == "File") {
                    if ($('#sDrpDataType' + i).val() != "string") {
                        $("#errordatatype" + i).css("display", "block");
                        falg = false
                    }
                }

                if ($('#sDrpType' + i).val() == "TextBox") {
                    if ($('#sDrpDataType' + i).val() == "bool") {
                        $("#errordatatype" + i).css("display", "block");
                        falg = false
                    }
                }

                if (falg == true) {
                    var keyid = '#txtkey' + i;
                    var dnameid = '#txtDisplayName' + i;
                    var dtypeid = '#sDrpType' + i;
                    var typevalid = '#txtTypeval' + i;
                    var dmandatoryid = '#DqMandatory' + i;
                    var datatypeid = '#sDrpDataType' + i;
                    var itemobj = {
                        key: $(keyid).val(),
                        displayname: $(dnameid).val(),
                        type: $(dtypeid).val(),
                        typevalue: $(typevalid).val(),
                        mandatory: $(dmandatoryid).is(":checked"),
                        datatype: $(datatypeid).val(),
                        value: ""
                    };
                    item.push(itemobj);
                }
            }
        }
        if (falg == false) {
            return true;
        }
        else {
            var btype = $("#hdkeyflag").val();
            var items = { item: item };
            ItemsArray.push(items);
            var object = { items: ItemsArray }
            objectArray = [];
            objectArray.push(object);
            var main = { objectList: objectArray };
            mainArray = [];
            mainArray.push(main);
            datablobvalobj = JSON.stringify(mainArray);

            if (btype == 0) {
                datablobvalobj = createXml(datablobvalobj);
            }

            console.log(datablobvalobj);
            if (lId != "") {
                saveBlobvalue(datablobvalobj, lId, 'key');

            }
            else {
                $("#hdblobval").val(datablobvalobj);
                $("#AddKeyModel").modal("hide");
            }
        }
    }

    function findValueInArray(value, arr) {
        var index = null;
        for (var i = 0; i < arr.length; i++) {
            var name = arr[i].key;
            if (name == value) {
                index = i;
                break;
            }
        }
        return index;
    }

    function saveBlobvalue(datablobvalobj, lId, status) {
        if (datablobvalobj != "") {
            datablobvalobj = datablobvalobj.replace(/>\s*/g, '>');
            datablobvalobj = datablobvalobj.replace(/\s*</g, '<');
        }
        var ConfigModel = {};
        ConfigModel.Id = lId,
            ConfigModel.BLOBValuestr = datablobvalobj;
        $.ajax({
            url: "/Accounts/UpdateBolbValue",
            data: JSON.stringify(ConfigModel),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                if (result.status == 1) {
                    if ($("#hdblobval").val() != undefined)
                        $("#hdblobval").val(datablobvalobj);

                    if (status == 'key')
                        $("#AddKeyModel").modal("hide");
                    else if (status == 'value')
                        $("#AddvalueModel").modal("hide");

                    UserConfigTable.table().draw();
                }
                else if (result.status == 0) {
                    swal.fire({
                        "title": "",
                        "text": result.message,
                        "icon": "error",
                        "onClose": function (e) {
                            console.log('on close event fired!');
                        }
                    });
                }
            },
            error: function (errormessage) {
                console.log(errormessage.responseText);
            }
        });
    }

    function configval() {
        var dataval = [];
        $('.valerror').css("display", "none");
        $('#addvallab').html('');
        $('#addvalcol').html('');
        $('.add_column').remove();
        $("#hdblobvalinmodel").val('');

        $("#hdvalflag").val($(".Btype:checked").val() == "Json" ? 1 : 0);

        if ($("#hdnUserConfigrationId").val() == "")
            $("#hdvalconfigid").val("");

        datablobvalobj = $("#hdblobval").val();
        $("#hdvalconfigid").val($("#hdnUserConfigrationId").val());
        if (datablobvalobj != "" && datablobvalobj != "null") {
            $("#hdblobvalinmodel").val(datablobvalobj);
            if (!testJSON(datablobvalobj)) {
                if (testxml(datablobvalobj)) {
                    datablobvalobj = xmlToJson.parse(datablobvalobj);
                    datablobvalobj = setBlobvalueFormat(datablobvalobj);
                    datablobvalobj = JSON.stringify(datablobvalobj);
                }
            }
            try {
                dataval = JSON.parse(datablobvalobj);

                $('#hdvalcolid').val(dataval[0].objectList[0].items.length);
                for (var c = 0; c < dataval[0].objectList[0].items.length; c++) {
                    var keylist = dataval[0].objectList[0].items[c].item;
                    if (c == 0) {
                        AddFirstColumn(keylist, 1);
                    } else {
                        var cid = c + 1;
                        var divid = '#valgroup' + cid;
                        AppendColumn(cid, divid, keylist, 1);
                    }
                }
            } catch (e) {

            }
        }

        $("#AddvalueModel").modal("show");
        $('.modal-dialog').draggable({
            handle: ".modal-header"
        });
    }

    function AddFirstColumn(keylist, flag) {
        for (i = 1; i <= keylist.length; i++) {
            var type = keylist[i - 1].type;
            var typevalue = keylist[i - 1].typevalue;
            var typevalues = typevalue.split(",");
            var inputtext = "";
            var drpOption = "";
            if (type == "File") {
                inputtext = '<input type="file" class="file" id="val1' + i + '" name="val1' + i + '" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"><label id = "errorval1' + i + '" class="valerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
                    'This field is required.</label >';
            } else if (type == "CheckBox") {
                if (typevalue != "") {
                    for (var p = 0; p < typevalues.length; p++) {
                        inputtext = inputtext + '<span id="val1' + i + '" class="checkbox"><label for="message-text" class="form-control-label">' + typevalues[p] + '</label>' +
                            '<label class="kt-checkbox kt-checkbox--brand"> <input type="checkbox" id="' + typevalues[p] + 'val1' + i +
                            '" name="' + typevalues[p] + 'val1' + i + '" />&nbsp;<span></span></label ></span>';
                    }
                }
                else {
                    inputtext = '<span id="val1' + i + '" class="checkbox"><label for="message-text" class="form-control-label"></label>' +
                        '<label class="kt-checkbox kt-checkbox--brand"> <input type="checkbox" id="val1' + i +
                        '" name="val1' + i + '" />&nbsp;<span></span></label ></span>';
                }
            }
            else if (type == "Radio") {
                if (typevalue != "") {
                    for (var p = 0; p < typevalues.length; p++) {
                        var radiochecked = "";
                        if (p == 0)
                            radiochecked = 'checked="checked"';

                        drpOption = drpOption + '<label class="kt-radio kt-radio--bold kt-radio--brand">' +
                            '<input type="radio" name="val1' + i + '" value = "' + typevalues[p] + '" ' + radiochecked + '>' + typevalues[p] +
                            '<span></span></label>';

                        //drpOption = drpOption + '<label class="kt-radio kt-radio--bold kt-radio--brand">' +
                        //    '<input type="radio" name="' + typevalues[p] + 'val1' + i + '" id="' + typevalues[p] + 'val1' + i + '" value = "' + typevalues[p] + '" ' + radiochecked + '>' + typevalues[p] +
                        //    '<span></span></label>';
                    }
                    inputtext = '<div class="kt-radio-inline"  id="val1' + i + '">' + drpOption + '</div>';
                } else {
                    drpOption = '<label class="kt-radio kt-radio--bold kt-radio--brand">' +
                        '<input type="radio" name="val1' + i + '" value = "" ><span></span></label>';
                    inputtext = '<div class="kt-radio-inline"  id="val1' + i + '">' + drpOption + '</div>';
                }
            }
            else if (type == "TextBox") {
                inputtext = '<input class="form-control" type="text" name="val1' + i + '" id="val1' + i + '" /><label id = "errorval1' + i + '" class="valerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
                    'This field is required.</label >';
            }
            var keyid = 'key' + i;
            var valid = 'val1' + i;
            if ($("#" + keyid).length == 0)
                $('#addvallab').append('<label for="recipient-name" class="form-control-label" id="' + keyid + '">' + keylist[i - 1].key + '</label>');

            if ($("#" + valid).length == 0) {
                if ($('#addvalcol').val() == undefined) {
                    $('.add_value_main_div').append('<div class="form-group col-md-2 add_value_single" id="valgroup1">' +
                        '<label for= "recipient-name" class= "form-control-label" >Value&nbsp;<a href="#" class="btn btn-sm btn-clean btn-icon btn-icon-md" title="Delete" onclick="valDelt(1)">' +
                        '<i class="la la-trash la-xs"></i></a></label><div id="addvalcol"></div></div >');
                }
                $('#addvalcol').append('<div>' + inputtext + '</div>');
            }

            if (flag == 1 && keylist[i - 1].value != "") {
                if (type == "Radio")
                    $("input[name=val1" + i + "][value=" + keylist[i - 1].value + "]").prop('checked', true);
                else if (type == "CheckBox") {
                    var vals = keylist[i - 1].value;
                    if (vals != "") {
                        var val = vals.split(',');
                        for (var p = 0; p < typevalues.length; p++) {
                            if (p < val.length) {
                                $('#' + typevalues[p] + 'val1' + i).prop('checked', val[p] == "true" ? Boolean(val[p]) : false);
                            }
                        }
                    }
                }
                else if (type == "TextBox") {
                    $('#val1' + i).val(keylist[i - 1].value);
                }
            }
        }
    }

    function AppendColumn(cid, divid, keylist, flag) {
        $(".add_value_main_div").append(' <div class="form-group col-md-2 add_column add_value_single" id="valgroup' + cid + '">' +
            '<label for= "recipient-name" class= "form-control-label" id="haderval' + cid + '"> Value  <a href="#" class="btn btn-sm btn-clean btn-icon btn-icon-md" title="Delete" onclick="valDelt(' + cid + ')"><i class="la la-trash la-xs"></i>' +
            '</a ></label ></div >');

        for (r = 0; r < keylist.length; r++) {
            var rid = r + 1;
            var type = keylist[r].type;
            var typevalue = keylist[r].typevalue;
            var typevalues = typevalue.split(",");
            var inputtext = "";
            var drpOption = "";
            if (type == "File") {
                inputtext = '<input type="file" class="file" id="val' + cid + rid + '" name="val' + cid + rid + '" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"><label id = "errorval' + cid + rid + '" class="valerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
                    'This field is required.</label >';
            } else if (type == "CheckBox") {
                if (typevalue != "") {
                    for (var p = 0; p < typevalues.length; p++) {
                        inputtext = inputtext + '<span id="val' + cid + rid + '" class="checkbox"><label for="message-text" class="form-control-label">' + typevalues[p] + '</label>' +
                            '<label class="kt-checkbox kt-checkbox--brand"> <input type="checkbox" id="' + typevalues[p] + 'val' + cid + rid +
                            '" name="' + typevalues[p] + 'val' + cid + rid + '" />&nbsp;<span></span></label ></span>';
                    }
                }
                else {
                    inputtext = '<span id="val' + cid + rid + '" class="checkbox"><label for="message-text" class="form-control-label"></label>' +
                        '<label class="kt-checkbox kt-checkbox--brand"> <input type="checkbox" id="val' + cid + rid +
                        '" name="val' + cid + rid + '" />&nbsp;<span></span></label ></span></br>';
                }
            } else if (type == "Radio") {
                if (typevalue != "") {
                    for (var p = 0; p < typevalues.length; p++) {
                        var radiochecked = "";
                        if (p == 0)
                            radiochecked = 'checked="checked"';

                        drpOption = drpOption + '<label class="kt-radio kt-radio--bold kt-radio--brand">' +
                            '<input type="radio" name="val' + cid + rid + '" value = "' + typevalues[p] + '" ' + radiochecked + '>' + typevalues[p] +
                            '<span></span></label>';

                        //drpOption = drpOption + '<label class="kt-radio kt-radio--bold kt-radio--brand">' +
                        //    '<input type="radio" name="' + typevalues[p] + 'val' + cid + rid + '" id="' + typevalues[p] + 'val' + cid + rid + '" value = "' + typevalues[p] + '" ' + radiochecked + '>' + typevalues[p] +
                        //    '<span></span></label>';
                    }
                    inputtext = '<div class="kt-radio-inline"  id="val' + cid + rid + '">' + drpOption + '</div>';
                }
                else {
                    drpOption = drpOption + '<label class="kt-radio kt-radio--bold kt-radio--brand">' +
                        '<input type="radio" name="val' + cid + rid + '" value = ""><span></span></label>';
                    inputtext = '<div class="kt-radio-inline"  id="val' + cid + rid + '">' + drpOption + '</div>';
                }
            } else {
                inputtext = '<input class="form-control" type="text" name="val' + cid + rid + '" id="val' + cid + rid + '" /><label id = "errorval' + cid + rid + '" class="valerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
                    'This field is required.</label >';
            }
            $(divid).append('<div>' + inputtext + '</div>');

            if (flag == 1 && keylist[r].value != "") {
                if (type == "Radio") {
                    $("input[name=val" + cid + rid + "][value=" + keylist[r].value + "]").prop('checked', true);
                }
                else if (type == "CheckBox") {
                    var vals = keylist[r].value;
                    if (vals != "") {
                        var val = vals.split(',');
                        for (var p = 0; p < typevalues.length; p++) {
                            if (p < val.length) {
                                $('#' + typevalues[p] + 'val' + cid + rid).prop('checked', val[p] == "true" ? Boolean(val[p]) : false);
                            }
                        }
                    }
                }
                else if (type == "TextBox") {
                    $('#val' + cid + rid).val(keylist[r].value);
                }
            }
        }
    }

    function AddColumn() {
        var colid = $('#hdvalcolid').val();
        var cid = parseInt(colid) + 1;
        $('#hdvalcolid').val(cid);
        if (datablobvalobj != "" && datablobvalobj != "null") {
            if (!testJSON(datablobvalobj)) {
                if (testxml(datablobvalobj)) {
                    datablobvalobj = xmlToJson.parse(datablobvalobj);
                    datablobvalobj = setBlobvalueFormat(datablobvalobj);
                    datablobvalobj = JSON.stringify(datablobvalobj);
                }
            }
            var dataval = JSON.parse(datablobvalobj);

            if (dataval[0].objectList[0].items.length == 0) {
                var obj = $("#hdblobvalinmodel").val();
                if (obj != "" || obj != "null") {
                    var datavalobj = JSON.parse(obj);
                    var keylist = datavalobj[0].objectList[0].items[0].item;
                    var item = [];
                    for (var i = 0; i < keylist.length; i++) {
                        var itemobj = {
                            key: keylist[i].key,
                            displayname: keylist[i].displayname,
                            type: keylist[i].type,
                            typevalue: keylist[i].typevalue,
                            mandatory: keylist[i].mandatory,
                            datatype: keylist[i].datatype,
                            value: ""
                        };
                        item.push(itemobj);
                    }
                    var items = { item: item };
                    dataval[0].objectList[0].items.push(items);
                }
            }

            if (dataval[0].objectList[0].items.length > 0) {
                var keylist = dataval[0].objectList[0].items[0].item;
                var divid = '#valgroup' + cid;
                AppendColumn(cid, divid, keylist, 0);
            }
        }
    }

    function valDelt(Id) {
        var haderrow = '#valgroup' + Id;
        if (datablobvalobj != "" && datablobvalobj != "null") {

            if (!testJSON(datablobvalobj)) {
                if (testxml(datablobvalobj)) {
                    datablobvalobj = xmlToJson.parse(datablobvalobj);
                    datablobvalobj = setBlobvalueFormat(datablobvalobj);
                    datablobvalobj = JSON.stringify(datablobvalobj);
                }
            }
            var dataval = JSON.parse(datablobvalobj);
            var index = Id - 1;
            if (dataval[0].objectList[0].items.length > 0) {
                if (dataval[0].objectList[0].items.length > 1) {
                    dataval[0].objectList[0].items.splice(index, 1);
                } else {
                    var keylist = dataval[0].objectList[0].items[0].item;
                    for (var r = 0; r < keylist.length; r++) {
                        dataval[0].objectList[0].items[0].item[r].value = "";
                    }
                }
            }

            datablobvalobj = JSON.stringify(dataval);
        }
        $(haderrow).remove();
    }

    function SaveVal() {
        var dataval = [];
        $('.valerror').css("display", "none");
        var colid = $('#hdvalcolid').val();
        var Id = $("#hdvalconfigid").val();
        var flag = true;
        if (datablobvalobj != "" && datablobvalobj != "null") {
            colid = parseInt(colid);

            if (!testJSON(datablobvalobj)) {
                if (testxml(datablobvalobj)) {
                    dataval = xmlToJson.parse(datablobvalobj);
                    dataval = setBlobvalueFormat(dataval);
                }
            } else {
                dataval = JSON.parse(datablobvalobj);
            }
            //dataval = JSON.parse(datablobvalobj);
            if (dataval[0].objectList[0].items.length > 0) {
                var keylist = dataval[0].objectList[0].items[0].item;
                var keyvalue = "";
                for (c = 0; c < colid; c++) {
                    for (var r = 0; r < keylist.length; r++) {
                        keyvalue = "";
                        var inputval = "#val" + (c + 1) + (r + 1);
                        if ($(inputval).val() != undefined) {
                            if ($(inputval).attr("class").includes('radio')) {
                                keyvalue = keylist[r].typevalue == "" ? "" : $("input[name='val" + (c + 1) + (r + 1) + "']:checked").val();
                                // keyvalue = keylist[r].typevalue == "" ? "" : $("input[name='" + inputval + "']:checked").is(":checked");
                            }
                            else if ($(inputval).attr("class").includes('checkbox')) {
                                var typevalue = keylist[r].typevalue;
                                if (typevalue != "") {
                                    var typevalues = typevalue.split(",");
                                    for (var p = 0; p < typevalues.length; p++) {
                                        if (keyvalue == "")
                                            keyvalue = keyvalue + $('#' + typevalues[p] + 'val' + (c + 1) + (r + 1)).is(":checked");
                                        else
                                            keyvalue = keyvalue + ',' + $('#' + typevalues[p] + 'val' + (c + 1) + (r + 1)).is(":checked");
                                    }
                                }
                            }
                            else {
                                keyvalue = $(inputval).val();
                                if (keylist[r].mandatory == true) {
                                    if (keyvalue == "" && keylist[r].type != "File") {
                                        $("#errorval" + (c + 1) + (r + 1)).css("display", "block");
                                        flag = false;
                                    }
                                }
                            }
                            if (keylist[r].mandatory == true) {
                                if ($(inputval).attr("class").includes('file')) {
                                    if (c < dataval[0].objectList[0].items.length) {
                                        if (keyvalue == "" && dataval[0].objectList[0].items[c].item[r].value == "") {
                                            $("#errorval" + (c + 1) + (r + 1)).css("display", "block");
                                            flag = false;
                                        }
                                    } else {
                                        if (keyvalue == "") {
                                            $("#errorval" + (c + 1) + (r + 1)).css("display", "block");
                                            flag = false;
                                        }
                                    }
                                }
                            }

                            if (flag == true) {
                                if (c < dataval[0].objectList[0].items.length) {
                                    if ($(inputval).attr("class").includes('file')) {
                                        if (keyvalue != "") {
                                            if (keyvalue.includes('fakepath'))
                                                keyvalue = keyvalue.substr(12, keyvalue.length);
                                            dataval[0].objectList[0].items[c].item[r].value = keyvalue;
                                        }
                                    }
                                    else
                                        dataval[0].objectList[0].items[c].item[r].value = keyvalue;
                                }
                                else {
                                    var item = [];
                                    for (var i = 0; i < keylist.length; i++) {
                                        var itemobj = {
                                            key: keylist[i].key,
                                            displayname: keylist[i].displayname,
                                            type: keylist[i].type,
                                            typevalue: keylist[i].typevalue,
                                            mandatory: keylist[i].mandatory,
                                            datatype: keylist[i].datatype,
                                            value: ""
                                        };
                                        item.push(itemobj);
                                    }
                                    var items = { item: item };
                                    dataval[0].objectList[0].items.push(items);

                                    if ($(inputval).attr("class").includes('file')) {
                                        if (keyvalue != "") {
                                            if (keyvalue.includes('fakepath'))
                                                keyvalue = keyvalue.substr(12, keyvalue.length);
                                        }
                                    }

                                    dataval[0].objectList[0].items[c].item[r].value = keyvalue;
                                    console.log('\n' + JSON.stringify(dataval, '\t', 2));
                                }
                            }
                        }
                    }
                }
            }

            if (flag == false) {
                return true;
            } else {
                var btype = $("#hdvalflag").val();
                if (dataval[0].objectList[0].items.length == 0) {
                    datablobvalobj = "";
                }

                if (datablobvalobj != "") {
                    datablobvalobj = JSON.stringify(dataval);

                    if (btype == 0) {
                        if (testJSON(datablobvalobj)) {
                            datablobvalobj = createXml(datablobvalobj);
                        }
                    }
                }
                if (Id != "")
                    saveBlobvalue(datablobvalobj, Id, 'value');
                else
                    $("#hdblobval").val(datablobvalobj);

                $("#AddvalueModel").modal("hide");
            }
        }
        else
            $("#AddvalueModel").modal("hide");
    }

    function ShowBLOBvalue() {
        var btype = $(".Btype:checked").val() == "Json" ? 1 : 0;
        if (datablobvalobj == "" || datablobvalobj != "null")
            datablobvalobj = $("#hdblobval").val();
        openBlobModel(datablobvalobj, btype);
    }

    function openBlobModel(obj, flag) {
        $("#showobj").html('');
        if (obj != "") {
            if (flag == "1") {
                if (!testJSON(obj)) {
                    if (testxml(obj)) {
                        obj = xmlToJson.parse(obj);
                        obj = setBlobvalueFormat(obj);
                        obj = JSON.stringify(obj);
                    }
                }
                var jsonViewer = new JSONViewer();
                $("#showobj").html(jsonViewer.getContainer());
                var jsonObj = {};
                try {
                    jsonObj = JSON.parse(obj);
                    jsonViewer.showJSON(jsonObj, null, 5);
                }
                catch (err) {
                    alert(err);
                }
            } else {
                if (testJSON(obj)) {
                    obj = createXml(obj);
                }
                try {
                    $("#showobj").empty();
                    $("#showobj").simpleXML({ xmlString: obj });

                } catch (ex) {
                    alert("Unable to process XML: " + ex);
                }
            }
        }
        $("#ShowkeyvalobjModel").modal("show");
        $('.modal-dialog').draggable({
            handle: ".modal-header"
        });
    }

    function ShowRowBLOBvalue(editObj) {
        var obj = editObj[0].dataset.showblob == "null" ? "" : editObj[0].dataset.showblob;
        var flag = editObj[0].dataset.blobrowtype == "Xml" ? 0 : 1;
        openBlobModel(obj, flag);
    }

    function UserConfigKey(Id, editObj) {
        $("#addnewrow").html('');
        datablobvalobj = $(editObj).attr("data-usekeyblobval");
        var btype = $(editObj).attr("data-blobkeytype") == "Xml" ? 0 : 1;
        $("#hdkeyflag").val(btype);
        $("#hdrowconfigid").val(Id);
        var blobobj = [];
        if (datablobvalobj != "" && datablobvalobj != "null") {

            if (btype == 0) {
                if (!testJSON(datablobvalobj)) {
                    if (testxml(datablobvalobj)) {
                        blobobj = xmlToJson.parse(datablobvalobj);
                        blobobj = setBlobvalueFormat(blobobj);
                    }
                } else {
                    blobobj = JSON.parse(datablobvalobj);
                }
            } else {
                blobobj = JSON.parse(datablobvalobj);
            }

            var keylist = blobobj[0].objectList[0].items[0].item;
            $('#hdrowid').val(keylist.length);
            $("#addnewrow").html('');
            for (var i = 0; i < keylist.length; i++) {
                var id = i + 1;
                if ($("#hdkeyid" + id).length == 0) {
                    var text = '  <div class="row" id="row' + id + '">' +
                        '<input type = "hidden" id = "hdkeyid' + id + '" />' +
                        '<div class="form-group col-md-2"><input type="text" class="form-control" id="txtkey' + id + '" name="txtkey' + id + '" value="' + keylist[i].key + '">' +
                        '<label id = "errorkey' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
                        'This field is required.</label ></div > ' +
                        '<div class="form-group col-md-2"><input type="text" class="form-control" id="txtDisplayName' + id + '" name="txtDisplayName' + id + '" value="' + keylist[i].displayname + '"></div>' +
                        '<div class="form-group col-md-2"><select class="form-control kt-select2" id="sDrpType' + id + '" name="sDrpType' + id + '" onchange="rowTypeChnage($(this))">' +
                        '<option value="CheckBox">CheckBox</option><option value="File">File</option><option value="Radio">Radio</option><option value="TextBox">TextBox</option>' +
                        '</select></div><div class="form-group col-md-2"><input type="text" class="form-control" id="txtTypeval' + id + '" name="txtTypeval' + id + '" value="' + keylist[i].typevalue + '">' +
                        '<label id = "errortypeval' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;">' +
                        'This field is required.</label ></div > ' +
                        '<div class="form-group col-md-1"><label class="kt-checkbox kt-checkbox--brand" style="display: block; "><input type="checkbox" id="DqMandatory' + id +
                        '" name="DqMandatory' + id + '" checked />&nbsp;<span></span></label></div><div class="form-group col-md-2"><select class="form-control kt-select2" id="sDrpDataType' + id +
                        '" name="sDrpDataType' + id + '"><option value="bool">bool</option><option value="date">date</option><option value="number">number</option><option value="string">string</option>' +
                        '</select><label id = "errordatatype' + id + '" class="keyerror" style = "display: none;width: 100%;margin-top: 0.25rem;font-size: 80%;color: #fd397a;" > ' +
                        'Select valid DataType.</label ></div><div class="form-group col-md-1"><a href="#" class="btn btn-sm btn-clean btn-icon btn-icon-md" title="Delete" onclick="keyDelt(' + id + ')">' +
                        '<i class="la la-trash la-xs"></i ></a ></div></div>';

                    $("#addnewrow").append(text);
                    $("#sDrpType" + id).val(keylist[i].type);
                    $("#sDrpDataType" + id).val(keylist[i].datatype);
                    $("#DqMandatory" + id).prop('checked', keylist[i].mandatory);

                    if (keylist[i].type == 'TextBox' || keylist[i].type == 'File') {
                        $('#txtTypeval' + id).prop('disabled', true);
                    }
                    else
                        $('#txtTypeval' + id).prop('disabled', false);
                }
            }

        } else {
            CreateFristBalnkRow();
        }
        $("#AddKeyModel").modal("show");
        $('.modal-dialog').draggable({
            handle: ".modal-header"
        });
    }

    function UserConfigValue(Id, editObj) {
        $('#addvallab').html('');
        $('#addvalcol').html('');
        $('.add_column').remove();
        var dataval = [];
        datablobvalobj = $(editObj).attr("data-usevalueblobval");
        $("#hdvalconfigid").val(Id);
        var btype = $(editObj).attr("data-blovalbtype") == "Xml" ? 0 : 1;
        if (datablobvalobj != "" && datablobvalobj != "null") {

            if (btype == 0) {
                if (!testJSON(datablobvalobj)) {
                    if (testxml(datablobvalobj)) {
                        dataval = xmlToJson.parse(datablobvalobj);
                        dataval = setBlobvalueFormat(dataval);
                    }
                } else {
                    dataval = JSON.parse(datablobvalobj);
                }
            } else {
                dataval = JSON.parse(datablobvalobj);
            }

            $('#hdvalcolid').val(dataval[0].objectList[0].items.length);
            for (var c = 0; c < dataval[0].objectList[0].items.length; c++) {
                var keylist = dataval[0].objectList[0].items[c].item;
                if (c == 0) {
                    AddFirstColumn(keylist, 1);
                } else {
                    var cid = c + 1;
                    var divid = '#valgroup' + cid;
                    AppendColumn(cid, divid, keylist, 1);
                }
            }
        }
        $("#AddvalueModel").modal("show");
        $('.modal-dialog').draggable({
            handle: ".modal-header"
        });
    }

    function rowTypeChnage(dpObj) {
        var id = dpObj[0].id.replace('sDrpType', '');
        $('#txtTypeval' + id).val('');
        $('#sDrpDataType' + id).val('string');
        var val = $('#sDrpType' + id).val();
        if ($('#sDrpType' + id).val() == 'TextBox' || $('#sDrpType' + id).val() == 'File')
            $('#txtTypeval' + id).prop('disabled', true);
        else
            $('#txtTypeval' + id).prop('disabled', false);
    }

    function ToXml(obj, index) {
        var xml = '', tab = '', count = 0;
        var attr = '\t\t\t\t<item';

        if (index > 0) count = index;
        for (var prop in obj) {
            switch (typeof obj[prop]) {

                case 'object': {

                    if (obj[prop] instanceof Array) {
                        for (var instance in obj[prop]) {

                            switch (prop) {
                                case 'objectList': { tab = ""; break; }
                                case 'items': { tab = "\t\t"; break; }
                                case 'item': { tab = "\t\t\t"; break; }
                            }
                            if (prop == 'item' && count < 1) {
                                count++;
                                xml += `${ToXml(new Object(obj[prop]), count)}`;
                            }
                            else if (prop != 'item') {
                                xml += tab + `<${prop}>\n${ToXml(new Object(obj[prop][instance]))}` + tab + `</${prop}>\n`;
                            }
                        }
                    }
                    else {
                        xml += `${ToXml(new Object(obj[prop]), count)}`;
                    }
                    break;
                }
                case 'string': {
                    attr += ` ${prop}="${obj[prop]}"`
                    break;
                }
            }
        }
        if (typeof obj[prop] == 'string') {
            attr += `/>\n`
            xml += attr;
        }

        return xml
    }

    function createXml(obj) {
        obj = obj.replaceAll(':false', ':"false"');
        obj = obj.replaceAll(':true', ':"true"');
        var mainArray = JSON.parse(obj);
        console.log("mainArray: " + mainArray)

        var xmldata = ToXml(mainArray);
        console.log(xmldata);

        return xmldata;
    }

    function setBlobvalueFormat(obj) {
        var ItemsArray = [];
        var objectArray = [];
        var mainArray = [];

        if (obj.objectList.items.length == undefined) {
            if (obj.objectList.items.item.length != undefined) {
                var item = [];
                for (var j = 0; j < obj.objectList.items.item.length; j++) {
                    var itemobj = {
                        key: obj.objectList.items.item[j].key == null ? "" : obj.objectList.items.item[j].key,
                        displayname: obj.objectList.items.item[j].displayname == null ? "" : obj.objectList.items.item[j].displayname,
                        type: obj.objectList.items.item[j].type,
                        typevalue: obj.objectList.items.item[j].typevalue == null ? "" : obj.objectList.items.item[j].typevalue,
                        mandatory: obj.objectList.items.item[j].mandatory,
                        datatype: obj.objectList.items.item[j].datatype,
                        value: obj.objectList.items.item[j].value == null ? "" : obj.objectList.items.item[j].value
                    };
                    item.push(itemobj);
                }
                var items = { item: item };
                ItemsArray.push(items);
            }
            else if (obj.objectList.items.item.length == undefined) {
                var item = [];
                var itemobj = {
                    key: obj.objectList.items.item.key == null ? "" : obj.objectList.items.item.key,
                    displayname: obj.objectList.items.item.displayname == null ? "" : obj.objectList.items.item.displayname,
                    type: obj.objectList.items.item.type,
                    typevalue: obj.objectList.items.item.typevalue == null ? "" : obj.objectList.items.item.typevalue,
                    mandatory: obj.objectList.items.item.mandatory,
                    datatype: obj.objectList.items.item.datatype,
                    value: obj.objectList.items.item.value == null ? "" : obj.objectList.items.item.value
                };
                item.push(itemobj);
                var items = { item: item };
                ItemsArray.push(items);
            }
        }
        else {
            for (var i = 0; i < obj.objectList.items.length; i++) {
                var item = [];
                for (var j = 0; j < obj.objectList.items[i].item.length; j++) {
                    var itemobj = {
                        key: obj.objectList.items[i].item[j].key == null ? "" : obj.objectList.items[i].item[j].key,
                        displayname: obj.objectList.items[i].item[j].displayname == null ? "" : obj.objectList.items[i].item[j].displayname,
                        type: obj.objectList.items[i].item[j].type,
                        typevalue: obj.objectList.items[i].item[j].typevalue == null ? "" : obj.objectList.items[i].item[j].typevalue,
                        mandatory: obj.objectList.items[i].item[j].mandatory,
                        datatype: obj.objectList.items[i].item[j].datatype,
                        value: obj.objectList.items[i].item[j].value == null ? "" : obj.objectList.items[i].item[j].value
                    };
                    item.push(itemobj);
                }
                var items = { item: item };
                ItemsArray.push(items);
            }
        }

        var object = { items: ItemsArray };
        objectArray = [];
        objectArray.push(object);
        var main = { objectList: objectArray };
        mainArray = [];
        mainArray.push(main);
        var data = '\n' + JSON.stringify(mainArray, '\t', 2);
        console.log(data);
        return mainArray;
    }

    function testJSON(text) {
        //var text = '[{"objectList":[{"items":[{"item":[{"key":"sh","displayname":"sh","type":"CheckBox","typevalue":"M,G","mandatory":true,"datatype":"bool","value":"true,true"}]}]}]}]';
        try {
            JSON.parse(text);
            return true;
        } catch (error) {
            return false;
        }
    }

    function testxml(text) {
        //var text = '"<objectList><items><item key="test1" displayname="name1 " type="CheckBox" typevalue="M,G" datatype="bool" value="true,false" /></items></objectList>"';
        try {
            var parser = new DOMParser();
            xmlDoc = parser.parseFromString(text, "text/xml");
            return true;
        } catch (error) {
            return false;
        }
    }

    $('input[type=radio][name=BLOBType]').change(function () {
        if (this.value == 'Json') {
            $('#hdkeyflag').val(1);
            $('#hdvalflag').val(1);
        }
        else if (this.value == 'Xml') {
            $('#hdkeyflag').val(0);
            $('#hdvalflag').val(0);
        }
    });
</script>

